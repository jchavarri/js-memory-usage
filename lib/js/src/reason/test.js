// Generated by BUCKLESCRIPT VERSION 3.0.0, PLEASE EDIT WITH CARE
'use strict';

var $$Map = require("bs-platform/lib/js/map.js");
var $$Set = require("bs-platform/lib/js/set.js");
var List = require("bs-platform/lib/js/list.js");
var Curry = require("bs-platform/lib/js/curry.js");
var $$String = require("bs-platform/lib/js/string.js");
var Hashtbl = require("bs-platform/lib/js/hashtbl.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Caml_int32 = require("bs-platform/lib/js/caml_int32.js");
var Js_primitive = require("bs-platform/lib/js/js_primitive.js");
var Memw = require("../../../../src/reason/memw");

var TestMap = $$Map.Make([$$String.compare]);

var TestSet = $$Set.Make([$$String.compare]);

function fillTestList(_l, _from, cnt, f) {
  while(true) {
    var from = _from;
    var l = _l;
    if (from < cnt) {
      _from = from + 1 | 0;
      _l = List.append(l, /* :: */[
            Curry._1(f, /* () */0),
            /* [] */0
          ]);
      continue ;
    } else {
      return l;
    }
  };
}

function record(cnt, f) {
  Memw.gc();
  var hd = new Memw.HeapDiff();
  var arr = fillTestList(/* [] */0, 0, 1000, f);
  var diff = hd.end_();
  global.name = List.length(arr);
  return Caml_int32.div(diff.change.size_bytes, cnt);
}

function fillHashtbl(_cnt, obj) {
  while(true) {
    var cnt = _cnt;
    if (cnt > 0) {
      Hashtbl.add(obj, "key-" + String(cnt), cnt);
      _cnt = cnt - 1 | 0;
      continue ;
    } else {
      return obj;
    }
  };
}

function fillList(_cnt, _obj) {
  while(true) {
    var obj = _obj;
    var cnt = _cnt;
    if (cnt > 0) {
      _obj = List.append(/* :: */[
            cnt,
            /* [] */0
          ], obj);
      _cnt = cnt - 1 | 0;
      continue ;
    } else {
      return obj;
    }
  };
}

function fillMap(_cnt, _obj) {
  while(true) {
    var obj = _obj;
    var cnt = _cnt;
    if (cnt > 0) {
      _obj = Curry._3(TestMap[/* add */3], "key-" + String(cnt), cnt, obj);
      _cnt = cnt - 1 | 0;
      continue ;
    } else {
      return obj;
    }
  };
}

function fillSet(_cnt, _obj) {
  while(true) {
    var obj = _obj;
    var cnt = _cnt;
    if (cnt > 0) {
      _obj = Curry._2(TestSet[/* add */3], String(cnt), obj);
      _cnt = cnt - 1 | 0;
      continue ;
    } else {
      return obj;
    }
  };
}

function fillArr(_cnt, obj) {
  while(true) {
    var cnt = _cnt;
    if (cnt > 0) {
      Caml_array.caml_array_set(obj, cnt - 1 | 0, cnt);
      _cnt = cnt - 1 | 0;
      continue ;
    } else {
      return obj;
    }
  };
}

var results = {
  "empty List": record(1000, (function () {
          return /* [] */0;
        })),
  "empty Array": record(1000, (function () {
          return Caml_array.caml_make_vect(0, 0);
        })),
  "empty Set": record(1000, (function () {
          return TestSet[/* empty */0];
        })),
  "empty Map": record(1000, (function () {
          return TestMap[/* empty */0];
        })),
  "empty Hashtbl": record(1000, (function () {
          return Hashtbl.create(/* None */0, 0);
        })),
  "10 item List": record(1000, (function () {
          return fillList(10, /* [] */0);
        })),
  "10 item Array": record(1000, (function () {
          return fillArr(10, Caml_array.caml_make_vect(10, 0));
        })),
  "10 item Set": record(1000, (function () {
          return fillSet(10, TestSet[/* empty */0]);
        })),
  "10 item Map": record(1000, (function () {
          return fillMap(10, TestMap[/* empty */0]);
        })),
  "10 item Hashtbl": record(1000, (function () {
          return fillHashtbl(10, Hashtbl.create(/* None */0, 0));
        })),
  "100 item List": record(1000, (function () {
          return fillList(100, /* [] */0);
        })),
  "100 item Array": record(1000, (function () {
          return fillArr(100, Caml_array.caml_make_vect(100, 0));
        })),
  "100 item Set": record(1000, (function () {
          return fillSet(100, TestSet[/* empty */0]);
        })),
  "100 item Map": record(1000, (function () {
          return fillMap(100, TestMap[/* empty */0]);
        })),
  "100 item Hashtbl": record(1000, (function () {
          return fillHashtbl(100, Hashtbl.create(/* None */0, 0));
        })),
  "1000 item List": record(1000, (function () {
          return fillList(1000, /* [] */0);
        })),
  "1000 item Array": record(1000, (function () {
          return fillArr(1000, Caml_array.caml_make_vect(1000, 0));
        })),
  "1000 item Set": record(1000, (function () {
          return fillSet(1000, TestSet[/* empty */0]);
        })),
  "1000 item Map": record(1000, (function () {
          return fillMap(1000, TestMap[/* empty */0]);
        })),
  "1000 item Hashtbl": record(1000, (function () {
          return fillHashtbl(1000, Hashtbl.create(/* None */0, 0));
        }))
};

console.log(Js_primitive.undefined_to_opt(JSON.stringify(results)));

exports.TestMap = TestMap;
exports.TestSet = TestSet;
exports.fillTestList = fillTestList;
exports.record = record;
exports.fillHashtbl = fillHashtbl;
exports.fillList = fillList;
exports.fillMap = fillMap;
exports.fillSet = fillSet;
exports.fillArr = fillArr;
exports.results = results;
/* TestMap Not a pure module */
