'use strict';
export var ElixirScript=function(){'use strict';/* @flow */function type(e,t={}){return new Type(e,t)}function namedVariableResult(e,t){return new NamedVariableResult(e,t)}/* @flow */function is_number(e){return'number'==typeof e}function is_string(e){return'string'==typeof e}function is_boolean(e){return'boolean'==typeof e}function is_symbol(e){return'symbol'==typeof e}function is_object(e){return'object'==typeof e}function is_variable(e){return e instanceof Variable}function is_bitstring(e){return e instanceof BitStringMatch}function is_null(e){return null===e}function is_array(e){return Array.isArray(e)}function is_function(e){return'function'==typeof e||e instanceof Function}function is_map(e){return e instanceof Map}function is_pid(e){return e instanceof i.PID}function is_tuple(e){return e instanceof i.Tuple}function is_reference(e){return e instanceof i.Reference}function arrayEquals(e,t){if(!Array.isArray(t))return!1;if(e.length!==t.length)return!1;for(let n=0;n<e.length;n++)if(!1===equals(e[n],t[n]))return!1;return!0}function tupleEquals(e,t){return!1!=t instanceof i.Tuple&&!(e.length!==t.length)&&arrayEquals(e.values,t.values)}function bitstringEquals(e,t){return!1!=t instanceof i.BitString&&!(e.length!==t.length)&&arrayEquals(e.value,t.value)}function pidEquals(e,t){return!1!=t instanceof i.PID&&e.id===t.id}function referenceEquals(e,t){return!1!=t instanceof i.Reference&&e.id===t.id}function mapEquals(e,t){if(!1==t instanceof Map)return!1;const n=Array.from(e.entries()),r=Array.from(t.entries());return arrayEquals(n,r)}function equals(e,t){return Array.isArray(e)?arrayEquals(e,t):e instanceof i.Tuple?tupleEquals(e,t):e instanceof i.PID?pidEquals(e,t):e instanceof i.BitString?bitstringEquals(e,t):e instanceof i.Reference?referenceEquals(e,t):e instanceof Map?mapEquals(e,t):e===t}function is_non_primitive(e){return is_array(e)||is_map(e)||is_pid(e)||is_reference(e)||is_bitstring(e)||is_tuple(e)}function resolveFunction(e){return function(t){return is_function(t)&&t===e}}function resolveNull(){return function(e){return is_null(e)}}function resolveWildcard(){return function(){return!0}}function resolveObject(e){let t={};const n=Object.keys(e).concat(Object.getOwnPropertySymbols(e));for(let r of n)t[r]=buildMatch(e[r]);return function(r,i){if(!is_object(r)||e.length>r.length)return!1;for(let e of n)if(!(e in r)||!t[e](r[e],i))return!1;return!0}}function getSize(e,t){return e*t/8}function arraysEqual(e,t){if(e===t)return!0;if(null==e||null==t)return!1;if(e.length!=t.length)return!1;for(var n=0;n<e.length;++n)if(e[n]!==t[n])return!1;return!0}function fillArray(e,t){for(let n=0;n<t;n++)e.push(0)}function createBitString(e){let t=e.map((e)=>s.integer(e));return new s(...t)}function resolveNoMatch(){return function(){return!1}}function buildMatch(e){if(null===e)return resolveNull(e);if('undefined'==typeof e)return resolveWildcard(e);if('function'==typeof e)return resolveFunction(e);const t=e.constructor.prototype,n=l.get(t);return n?n(e):'object'==typeof e?resolveObject(e):resolveNoMatch()}function defmatchgen(...e){const t=getArityMap(e);return function*(...e){let[n,r]=findMatchingFunction(e,t);return yield*n.apply(this,r)}}function findMatchingFunction(e,t){if(t.has(e.length)){const n=t.get(e.length);let r=null,i=null;for(let t of n){let n=[];e=fillInOptionalValues(e,t.arity,t.optionals);const a=t.pattern(e,n),[s,l]=checkNamedVariables(n);if(a&&l&&t.guard.apply(this,s)){r=t.fn,i=s;break}}if(!r)throw console.error('No match for:',e),new MatchError(e);return[r,i]}throw console.error('Arity of',e.length,'not found. No match for:',e),new MatchError(e)}function getArityMap(e){let t=new Map;for(const n of e){const e=getArityRange(n);for(const r of e){let e=[];t.has(r)&&(e=t.get(r)),e.push(n),t.set(r,e)}}return t}function getArityRange(e){const t=e.arity-e.optionals.length,n=e.arity;let r=[t];for(;r[r.length-1]!=n;)r.push(r[r.length-1]+1);return r}function getOptionalValues(e){let t=[];for(let n=0;n<e.length;n++)e[n]instanceof Variable&&e[n].default_value!=Symbol.for('tailored.no_value')&&t.push([n,e[n].default_value]);return t}function fillInOptionalValues(e,t,n){if(e.length===t||0===n.length)return e;if(e.length+n.length<t)return e;let r=t-e.length,i=n.length-r,a=n.slice(i);for(let[r,i]of a)if(e.splice(r,0,i),e.length===t)break;return e}function checkNamedVariables(e){const t={},n=[];for(let r=0;r<e.length;r++){const i=e[r];if(i instanceof NamedVariableResult){if(t[i.name]&&t[i.name]!==i.value)return[e,!1];t[i.name]&&t[i.name]===i.value?n.push(i.value):(t[i.name]=i.value,n.push(i.value))}else n.push(i)}return[n,!0]}function match_or_default(e,t,n=()=>!0,r=null){let i=[],a=buildMatch(e);const s=a(t,i),[l,o]=checkNamedVariables(i);return s&&o&&n.apply(this,l)?l:r}function run_generators(e,t){if(0==t.length)return e.map((e)=>Array.isArray(e)?e:[e]);else{const n=t.pop();let r=[];for(let t of n())for(let n of e)r.push([t].concat(n));return run_generators(r,t)}}/*
Breaks a Javascript string into individual user-perceived "characters" 
called extended grapheme clusters by implementing the Unicode UAX-29 standard, version 10.0.0

Usage:
var splitter = new GraphemeSplitter();
//returns an array of strings, one string for each grapheme cluster
var graphemes = splitter.splitGraphemes(string); 

*/// http://erlang.org/doc/man/lists.html
function reverse(e){return[...e]}function flatten(e,t=[]){const n=e.reduce((e,t)=>Array.isArray(t)?e.concat(flatten(t)):e.concat(t),[]);return n.concat(t)}function foldl(e,t,n){return n.reduce((t,n)=>e(n,t),t)}function keyfind(e,t,n){for(const r of n)if(r instanceof i.Tuple&&r.get(t-1)===e)return r;return!1}function keydelete(e,t,n){const r=[];let i=!1;for(let a=0;a<n.length;a++)!1==i&&n[a].get(t-1)===e?i=!0:r.push(n[a]);return r}function is_boolean$1(e){return'boolean'==typeof e||e instanceof Boolean}function atom_to_binary(e,t=Symbol.for('utf8')){if(t!==Symbol.for('utf8'))throw new Error(`unsupported encoding ${t}`);return null===e?'nil':is_boolean$1(e)?e.toString():e.__MODULE__?Symbol.keyFor(e.__MODULE__):Symbol.keyFor(e)}function binary_to_atom(e,t=Symbol.for('utf8')){if(t!==Symbol.for('utf8'))throw new Error(`unsupported encoding ${t}`);return'nil'===e?null:!('true'!==e)||'false'!==e&&Symbol.for(e)}function arrayEquals$1(e,t){if(!Array.isArray(t))return!1;if(e.length!==t.length)return!1;for(let n=0;n<e.length;n++)if(!1===equals$1(e[n],t[n]))return!1;return!0}function tupleEquals$1(e,t){return!1!=t instanceof i.Tuple&&!(e.length!==t.length)&&arrayEquals$1(e.values,t.values)}function bitstringEquals$1(e,t){return!1!=t instanceof i.BitString&&!(e.length!==t.length)&&arrayEquals$1(e.value,t.value)}function pidEquals$1(e,t){return!1!=t instanceof i.PID&&e.id===t.id}function referenceEquals$1(e,t){return!1!=t instanceof i.Reference&&e.id===t.id}function mapEquals$1(e,t){if(!1==t instanceof Map)return!1;const n=Array.from(e.entries()),r=Array.from(t.entries());return arrayEquals$1(n,r)}function equals$1(e,t){return Array.isArray(e)?arrayEquals$1(e,t):e instanceof i.Tuple?tupleEquals$1(e,t):e instanceof i.PID?pidEquals$1(e,t):e instanceof i.BitString?bitstringEquals$1(e,t):e instanceof i.Reference?referenceEquals$1(e,t):e instanceof Map?mapEquals$1(e,t):e===t}function is_bitstring$1(e){return e instanceof i.BitString}function is_number$1(e){return'number'==typeof e||e instanceof Number}function is_integer(e){return t(e)}function is_binary(e){return'string'==typeof e||e instanceof String}function iolist_to_binary(t){if(null===t)return'';if(is_binary(t))return t;if(is_bitstring$1(t))return e(...t.value);if(is_number$1(t))return e(t);const n=p.flatten(t),r=n.reduce((t,n)=>{if(null===n)return t;return is_integer(n)?t+e(n):is_bitstring$1(n)?t+e(...n.value):t+iolist_to_binary(n)},'');return r}function _throw(e){throw e}function error(e){if(e instanceof Map&&e.has(Symbol.for('__exception__'))){let t=Symbol.keyFor(e.get(Symbol.for('__struct__')).__MODULE__);t=t.split('.').slice(1).join('.');const n=e.get(Symbol.for('message'));throw new Error(`** (${t}) ${n}`)}else if(is_binary(e))throw new Error(`** (RuntimeError) ${e}`);else throw new Error(`** (ErlangError) Erlang Error ${e.toString()}`)}function exit(...e){if(2===e.length)throw e[1];else throw e[0]}function map_to_object(e,t=[]){const n=d.get_value(Symbol.for('keys'),t),r=d.get_value(Symbol.for('symbols'),t),i={};for(const a of e.entries()){let e=a[0];const s=a[1];n===Symbol.for('string')&&'number'==typeof e?e=e.toString():(n===Symbol.for('string')||r!==Symbol.for('undefined'))&&'symbol'==typeof e&&(e=g.atom_to_binary(e)),i[e]=s instanceof Map?map_to_object(s,t):r!==Symbol.for('undefined')&&'symbol'==typeof s?g.atom_to_binary(s):s}return i}function object_to_map(e,t=[]){const n=d.get_value(Symbol.for('keys'),t)===Symbol.for('atom'),r=!0===d.get_value(Symbol.for('recurse_array'),t);if(e.constructor===Object){const i=new Map;return Reflect.ownKeys(e).forEach((a)=>{let s=a,l=e[a];n&&'string'==typeof a&&(s=Symbol.for(a)),null!==l&&(l.constructor===Object||l instanceof Array&&r)&&(l=object_to_map(l,t)),i.set(s,l)}),i}if(e instanceof Array&&r)return e.map((e)=>null!==e&&(e.constructor===Object||e instanceof Array)?object_to_map(e,t):e);throw new Error(`Object ${e} is not an native object or array`)}function split_at(e,t){const n=new u,r=n.splitGraphemes(e);if(0>t){const n=r.length+t;return 0>n?new k.Tuple('',e):split_at(e,n)}let i='',a='',s=0;for(const n of r)s<t?i+=n:a+=n,s+=1;return new k.Tuple(i,a)}function run_list_generators(e,t){if(0===t.length)return e.map((e)=>Array.isArray(e)?e:[e]);const n=t.pop(),r=[];for(const a of n())for(const t of e)r.push([a].concat(t));return run_list_generators(r,t)}function is_non_primitive$1(e){return g.is_list(e)||g.is_map(e)||g.is_pid(e)||g.is_reference(e)||g.is_bitstring(e)||g.is_tuple(e)}function __put(e,t,n){const r=new Map(e);if(is_non_primitive$1(t))for(const i of e.keys())if(g.equals(i,t))return r.set(i,n),r;return r.set(t,n),r}function __has(e,t){if(is_non_primitive$1(t)){for(const n of e.keys())if(g.equals(n,t))return!0;return!1}return e.has(t)}function __get(e,t){if(is_non_primitive$1(t)){for(const n of e.keys())if(g.equals(n,t))return e.get(n);return null}return e.get(t)}function __delete(e,t){if(is_non_primitive$1(t))for(const n of e.keys())g.equals(n,t)&&e.delete(n);else e.delete(t)}function is_key(e,t){return __has(t,e)}function put$1(e,t){return b.get(m).set(e,t),Symbol.for('ok')}function get$2(e){return b.get(m).get(e)}function at(e,t){return e.charAt(t)}// TODO: Support more options
// TODO: pattern cannot be list of strings
// TODO: Support more options, global is implied
// TODO: pattern cannot be list of strings
function characters_to_list(e,t=Symbol.for('unicode')){let n=e;return Array.isArray(e)&&(n=p.flatten(e)),g.is_binary(n)?n.split('').map((e)=>e.codePointAt(0)):n.reduce((e,n)=>g.is_integer(n)?e.concat(n):e.concat(characters_to_list(n,t)),[])}function get_key(e){let t=e;if(k.global.__elixirscript_names__.has(e)&&(t=k.global.__elixirscript_names__.get(e)),k.global.__elixirscript_store__.has(t))return t;throw new Error(`Key ${t} not found`)}var e=String.fromCodePoint,t=Number.isInteger;class Variable{constructor(e=null,t=Symbol.for('tailored.no_value')){this.name=e,this.default_value=t}}class Wildcard{constructor(){}}class StartsWith{constructor(e){this.prefix=e}}class Capture{constructor(e){this.value=e}}class HeadTail{constructor(e,t){this.head=e,this.tail=t}}class Type{constructor(e,t={}){this.type=e,this.objPattern=t}}class Bound{constructor(e){this.value=e}}class BitStringMatch{constructor(...e){this.values=e}length(){return values.length}bit_size(){return 8*this.byte_size()}byte_size(){let e=0;for(let t of this.values)e+=t.unit*t.size/8;return e}getValue(e){return this.values(e)}getSizeOfValue(e){let t=this.getValue(e);return t.unit*t.size}getTypeOfValue(e){return this.getValue(e).type}}class NamedVariableResult{constructor(e,t){this.name=e,this.value=t}}class Tuple{constructor(...e){this.values=Object.freeze(e),this.length=this.values.length}get(e){return this.values[e]}count(){return this.values.length}[Symbol.iterator](){return this.values[Symbol.iterator]()}toString(){let e,t='';for(e=0;e<this.values.length;e++){''!=t&&(t+=', ');const n=this.values[e]?this.values[e].toString():'';t+=n}return'{'+t+'}'}put_elem(e,t){if(e===this.length){let e=this.values.concat([t]);return new Tuple(...e)}let n=this.values.concat([]);return n.splice(e,0,t),new Tuple(...n)}remove_elem(e){let t=this.values.concat([]);return t.splice(e,1),new Tuple(...t)}}let n=-1;let r=-1;class BitString$1{constructor(...e){this.value=Object.freeze(this.process(e)),this.length=this.value.length,this.bit_size=8*this.length,this.byte_size=this.length}get(e){return this.value[e]}count(){return this.value.length}slice(e,t=null){let n=this.value.slice(e,t),r=n.map((e)=>BitString$1.integer(e));return new BitString$1(...r)}[Symbol.iterator](){return this.value[Symbol.iterator]()}toString(){var e,t='';for(e=0;e<this.count();e++)''!=t&&(t+=', '),t+=this.get(e).toString();return'<<'+t+'>>'}process(e){let t=[];var n;for(n=0;n<e.length;n++){let r=this['process_'+e[n].type](e[n]);for(let t of e[n].attributes)r=this['process_'+t](r);t=t.concat(r)}return t}process_integer(e){return e.value}process_float(e){if(64===e.size)return BitString$1.float64ToBytes(e.value);if(32===e.size)return BitString$1.float32ToBytes(e.value);throw new Error('Invalid size for float')}process_bitstring(e){return e.value.value}process_binary(e){return BitString$1.toUTF8Array(e.value)}process_utf8(e){return BitString$1.toUTF8Array(e.value)}process_utf16(e){return BitString$1.toUTF16Array(e.value)}process_utf32(e){return BitString$1.toUTF32Array(e.value)}process_signed(e){return new Uint8Array([e])[0]}process_unsigned(e){return e}process_native(e){return e}process_big(e){return e}process_little(e){return e.reverse()}process_size(e){return e}process_unit(e){return e}static integer(e){return BitString$1.wrap(e,{type:'integer',unit:1,size:8})}static float(e){return BitString$1.wrap(e,{type:'float',unit:1,size:64})}static bitstring(e){return BitString$1.wrap(e,{type:'bitstring',unit:1,size:e.bit_size})}static bits(e){return BitString$1.bitstring(e)}static binary(e){return BitString$1.wrap(e,{type:'binary',unit:8,size:e.length})}static bytes(e){return BitString$1.binary(e)}static utf8(e){return BitString$1.wrap(e,{type:'utf8',unit:1,size:e.length})}static utf16(e){return BitString$1.wrap(e,{type:'utf16',unit:1,size:2*e.length})}static utf32(e){return BitString$1.wrap(e,{type:'utf32',unit:1,size:4*e.length})}static signed(e){return BitString$1.wrap(e,{},'signed')}static unsigned(e){return BitString$1.wrap(e,{},'unsigned')}static native(e){return BitString$1.wrap(e,{},'native')}static big(e){return BitString$1.wrap(e,{},'big')}static little(e){return BitString$1.wrap(e,{},'little')}static size(e,t){return BitString$1.wrap(e,{size:t})}static unit(e,t){return BitString$1.wrap(e,{unit:t})}static wrap(e,t,n=null){let r=e;return e instanceof Object||(r={value:e,attributes:[]}),r=Object.assign(r,t),n&&r.attributes.push(n),r}static toUTF8Array(e){for(var t,n=[],r=0;r<e.length;r++)t=e.charCodeAt(r),128>t?n.push(t):2048>t?n.push(192|t>>6,128|63&t):55296>t||57344<=t?n.push(224|t>>12,128|63&t>>6,128|63&t):(r++,t=65536+((1023&t)<<10|1023&e.charCodeAt(r)),n.push(240|t>>18,128|63&t>>12,128|63&t>>6,128|63&t));return n}static toUTF16Array(e){for(var t,n=[],r=0;r<e.length;r++)t=e.codePointAt(r),255>=t?(n.push(0),n.push(t)):(n.push(255&t>>8),n.push(255&t));return n}static toUTF32Array(e){for(var t,n=[],r=0;r<e.length;r++)t=e.codePointAt(r),255>=t?(n.push(0),n.push(0),n.push(0),n.push(t)):(n.push(0),n.push(0),n.push(255&t>>8),n.push(255&t));return n}//http://stackoverflow.com/questions/2003493/javascript-float-from-to-bits
static float32ToBytes(e){var t=[],n=new ArrayBuffer(4);new Float32Array(n)[0]=e;let r=new Uint32Array(n)[0];return t.push(255&r>>24),t.push(255&r>>16),t.push(255&r>>8),t.push(255&r),t}static float64ToBytes(e){var t=[],n=new ArrayBuffer(8);new Float64Array(n)[0]=e;var r=new Uint32Array(n)[0],i=new Uint32Array(n)[1];return t.push(255&i>>24),t.push(255&i>>16),t.push(255&i>>8),t.push(255&i),t.push(255&r>>24),t.push(255&r>>16),t.push(255&r>>8),t.push(255&r),t}}var i={Tuple,PID:class PID{constructor(){++n,this.id=n}toString(){return'PID#<0.'+this.id+'.0>'}},Reference:class Reference{constructor(){++r,this.id=r,this.ref=Symbol()}toString(){return'Ref#<0.0.0.'+this.id+'>'}},BitString:BitString$1},a={get:function get(e,t){if(is_non_primitive(t)){for(const n of e.keys())if(equals(n,t))return e.get(n);return null}return e.get(t)},has:function has(e,t){if(is_non_primitive(t)){for(const n of e.keys())if(equals(n,t))return!0;return!1}return e.has(t)},equals};/* @flow */const s=i.BitString,l=new Map;l.set(Variable.prototype,function resolveVariable(e){return function(t,n){return null===e.name?n.push(t):'_'!==e.name&&n.push(namedVariableResult(e.name,t)),!0}}),l.set(Wildcard.prototype,resolveWildcard),l.set(HeadTail.prototype,function resolveHeadTail(e){const t=buildMatch(e.head),n=buildMatch(e.tail);return function(e,r){if(!is_array(e)||0===e.length)return!1;const i=e[0],a=e.slice(1);return t(i,r)&&n(a,r)}}),l.set(StartsWith.prototype,function resolveStartsWith(e){const t=e.prefix;return function(e,n){return is_string(e)&&e.startsWith(t)&&(n.push(e.substring(t.length)),!0)}}),l.set(Capture.prototype,function resolveCapture(e){const t=buildMatch(e.value);return function(e,n){return!!t(e,n)&&(n.push(e),!0)}}),l.set(Bound.prototype,function resolveBound(e){return function(t){return typeof t==typeof e.value&&t===e.value}}),l.set(Type.prototype,function resolveType(e){return function(t,n){if(t instanceof e.type){const r=buildMatch(e.objPattern);return r(t,n)}return!1}}),l.set(BitStringMatch.prototype,function resolveBitString(e){let t=[];for(let n of e.values)if(is_variable(n.value)){let e=getSize(n.unit,n.size);fillArray(t,e)}else t=t.concat(new s(n).value);let n=e.values;return function(e,r){var i=String.fromCharCode;let a=null;if(!is_string(e)&&!(e instanceof s))return!1;a=is_string(e)?new s(s.binary(e)):e;let l=0;for(let s,o=0;o<n.length;o++){if(s=n[o],is_variable(s.value)&&'binary'==s.type&&void 0===s.size&&o<n.length-1)throw new Error('a binary field without size is only allowed at the end of a binary pattern');let e=0,u=[],p=[];if(e=getSize(s.unit,s.size),o===n.length-1?(u=a.value.slice(l),p=t.slice(l)):(u=a.value.slice(l,l+e),p=t.slice(l,l+e)),is_variable(s.value))switch(s.type){case'integer':s.attributes&&-1!=s.attributes.indexOf('signed')?r.push(new Int8Array([u[0]])[0]):r.push(new Uint8Array([u[0]])[0]);break;case'float':if(64===e)r.push(Float64Array.from(u)[0]);else if(32===e)r.push(Float32Array.from(u)[0]);else return!1;break;case'bitstring':r.push(createBitString(u));break;case'binary':r.push(i.apply(null,new Uint8Array(u)));break;case'utf8':r.push(i.apply(null,new Uint8Array(u)));break;case'utf16':r.push(i.apply(null,new Uint16Array(u)));break;case'utf32':r.push(i.apply(null,new Uint32Array(u)));break;default:return!1;}else if(!arraysEqual(u,p))return!1;l+=e}return!0}}),l.set(Number.prototype,function resolveNumber(e){return function(t){return is_number(t)&&t===e}}),l.set(Symbol.prototype,function resolveSymbol(e){return function(t){return is_symbol(t)&&t===e}}),l.set(Map.prototype,function resolveMap(e){let t=new Map;const n=Array.from(e.keys());for(let r of n)t.set(r,buildMatch(e.get(r)));return function(r,i){if(!is_map(r)||e.size>r.size)return!1;for(const e of n)if(!a.has(r,e)||!a.get(t,e)(a.get(r,e),i))return!1;return!0}}),l.set(Array.prototype,function resolveArray(e){const t=e.map((e)=>buildMatch(e));return function(n,r){return is_array(n)&&n.length==e.length&&n.every(function(e,a){return t[a](n[a],r)})}}),l.set(String.prototype,function resolveString(e){return function(t){return is_string(t)&&t===e}}),l.set(Boolean.prototype,function resolveBoolean(e){return function(t){return is_boolean(t)&&t===e}}),l.set(Function.prototype,resolveFunction),l.set(Object.prototype,resolveObject);class MatchError extends Error{constructor(e){if(super(),'symbol'==typeof e)this.message='No match for: '+e.toString();else if(Array.isArray(e)){let t=e.map((e)=>null===e?'null':'undefined'==typeof e?'undefined':e.toString());this.message='No match for: '+t}else this.message='No match for: '+e;this.name=this.constructor.name}}class Clause{constructor(e,t,n=()=>!0){this.pattern=buildMatch(e),this.arity=e.length,this.optionals=getOptionalValues(e),this.fn=t,this.guard=n}}const o=Symbol();var u=function GraphemeSplitter(){function isSurrogate(e,t){return 55296<=e.charCodeAt(t)&&56319>=e.charCodeAt(t)&&56320<=e.charCodeAt(t+1)&&57343>=e.charCodeAt(t+1)}// Private function, gets a Unicode code point from a JavaScript UTF-16 string
// handling surrogate pairs appropriately
function codePointAt(e,t){void 0===t&&(t=0);var n=e.charCodeAt(t);// if a high surrogate
if(55296<=n&&56319>=n&&t<e.length-1){var r=n,i=e.charCodeAt(t+1);return 56320<=i&&57343>=i?1024*(r-55296)+(i-56320)+65536:r}// if a low surrogate
if(56320<=n&&57343>=n&&1<=t){var r=e.charCodeAt(t-1),i=n;return 55296<=r&&56319>=r?1024*(r-55296)+(i-56320)+65536:i}//just return the char if an unmatched surrogate half or a 
//single-char codepoint
return n}// Private function, returns whether a break is allowed between the 
// two given grapheme breaking classes
function shouldBreak(d,T,z){var A=[d].concat(T).concat([z]),w=A[A.length-2],I=z,S=A.lastIndexOf(_);// Lookahead termintor for:
// GB10. (E_Base | EBG) Extend* ?	E_Modifier
if(1<S&&A.slice(1,S).every(function(e){return e==r})&&-1==[r,g,y].indexOf(d))return v;// Lookahead termintor for:
// GB12. ^ (RI RI)* RI	?	RI
// GB13. [^RI] (RI RI)* RI	?	RI
var P=A.lastIndexOf(i);if(0<P&&A.slice(1,P).every(function(e){return e==i})&&-1==[f,i].indexOf(w))return 1==A.filter(function(e){return e==i}).length%2?k:x;// GB3. CR X LF
if(w==e&&I==t)return m;// GB4. (Control|CR|LF) ÷
// GB10. (E_Base | EBG) Extend* ?	E_Modifier
if(w==n||w==e||w==t)return I==_&&T.every(function(e){return e==r})?v:b;// GB5. ÷ (Control|CR|LF)
if(I==n||I==e||I==t)return b;// GB6. L X (L|V|LV|LVT)
if(w==s&&(I==s||I==l||I==u||I==p))return m;// GB7. (LV|V) X (V|T)
if((w==u||w==l)&&(I==l||I==o))return m;// GB8. (LVT|T) X (T)
if((w==p||w==o)&&I==o)return m;// GB9. X (Extend|ZWJ)
if(I==r||I==h)return m;// GB9a. X SpacingMark
if(I==a)return m;// GB9b. Prepend X
if(w==f)return m;var B=-1==A.indexOf(r)?A.length-2:A.lastIndexOf(r)-1;// GB12. ^ (RI RI)* RI ? RI
// GB13. [^RI] (RI RI)* RI ? RI
// GB999. Any ? Any
return-1!=[g,y].indexOf(A[B])&&A.slice(B+1,-1).every(function(e){return e==r})&&I==_?m:w==h&&-1!=[c,y].indexOf(I)?m:-1==T.indexOf(i)?w==i&&I==i?m:b:v;// GB11. ZWJ ? (Glue_After_Zwj | EBG)
}// Returns the next grapheme break in the string after the given index
//given a Unicode code point, determines this symbol's grapheme break property
function getGraphemeBreakProperty(m){//grapheme break property for Unicode 10.0.0, 
//taken from http://www.unicode.org/Public/10.0.0/ucd/auxiliary/GraphemeBreakProperty.txt
//and adapted to JavaScript rules
return 1536<=m&&1541>=m||// Cf   [6] ARABIC NUMBER SIGN..ARABIC NUMBER MARK ABOVE
1757==m||// Cf       ARABIC END OF AYAH
1807==m||// Cf       SYRIAC ABBREVIATION MARK
2274==m||// Cf       ARABIC DISPUTED END OF AYAH
3406==m||// Lo       MALAYALAM LETTER DOT REPH
69821==m||// Cf       KAITHI NUMBER SIGN
70082<=m&&70083>=m||// Lo   [2] SHARADA SIGN JIHVAMULIYA..SHARADA SIGN UPADHMANIYA
72250==m||// Lo       ZANABAZAR SQUARE CLUSTER-INITIAL LETTER RA
72326<=m&&72329>=m||// Lo   [4] SOYOMBO CLUSTER-INITIAL LETTER RA..SOYOMBO CLUSTER-INITIAL LETTER SA
73030==m// Lo       MASARAM GONDI REPHA
?f:13==m// Cc       <control-000D>
?e:10==m// Cc       <control-000A>
?t:0<=m&&9>=m||// Cc  [10] <control-0000>..<control-0009>
11<=m&&12>=m||// Cc   [2] <control-000B>..<control-000C>
14<=m&&31>=m||// Cc  [18] <control-000E>..<control-001F>
127<=m&&159>=m||// Cc  [33] <control-007F>..<control-009F>
173==m||// Cf       SOFT HYPHEN
1564==m||// Cf       ARABIC LETTER MARK
6158==m||// Cf       MONGOLIAN VOWEL SEPARATOR
8203==m||// Cf       ZERO WIDTH SPACE
8206<=m&&8207>=m||// Cf   [2] LEFT-TO-RIGHT MARK..RIGHT-TO-LEFT MARK
8232==m||// Zl       LINE SEPARATOR
8233==m||// Zp       PARAGRAPH SEPARATOR
8234<=m&&8238>=m||// Cf   [5] LEFT-TO-RIGHT EMBEDDING..RIGHT-TO-LEFT OVERRIDE
8288<=m&&8292>=m||// Cf   [5] WORD JOINER..INVISIBLE PLUS
8293==m||// Cn       <reserved-2065>
8294<=m&&8303>=m||// Cf  [10] LEFT-TO-RIGHT ISOLATE..NOMINAL DIGIT SHAPES
55296<=m&&57343>=m||// Cs [2048] <surrogate-D800>..<surrogate-DFFF>
65279==m||// Cf       ZERO WIDTH NO-BREAK SPACE
65520<=m&&65528>=m||// Cn   [9] <reserved-FFF0>..<reserved-FFF8>
65529<=m&&65531>=m||// Cf   [3] INTERLINEAR ANNOTATION ANCHOR..INTERLINEAR ANNOTATION TERMINATOR
113824<=m&&113827>=m||// Cf   [4] SHORTHAND FORMAT LETTER OVERLAP..SHORTHAND FORMAT UP STEP
119155<=m&&119162>=m||// Cf   [8] MUSICAL SYMBOL BEGIN BEAM..MUSICAL SYMBOL END PHRASE
917504==m||// Cn       <reserved-E0000>
917505==m||// Cf       LANGUAGE TAG
917506<=m&&917535>=m||// Cn  [30] <reserved-E0002>..<reserved-E001F>
917632<=m&&917759>=m||// Cn [128] <reserved-E0080>..<reserved-E00FF>
918000<=m&&921599>=m// Cn [3600] <reserved-E01F0>..<reserved-E0FFF>
?n:768<=m&&879>=m||// Mn [112] COMBINING GRAVE ACCENT..COMBINING LATIN SMALL LETTER X
1155<=m&&1159>=m||// Mn   [5] COMBINING CYRILLIC TITLO..COMBINING CYRILLIC POKRYTIE
1160<=m&&1161>=m||// Me   [2] COMBINING CYRILLIC HUNDRED THOUSANDS SIGN..COMBINING CYRILLIC MILLIONS SIGN
1425<=m&&1469>=m||// Mn  [45] HEBREW ACCENT ETNAHTA..HEBREW POINT METEG
1471==m||// Mn       HEBREW POINT RAFE
1473<=m&&1474>=m||// Mn   [2] HEBREW POINT SHIN DOT..HEBREW POINT SIN DOT
1476<=m&&1477>=m||// Mn   [2] HEBREW MARK UPPER DOT..HEBREW MARK LOWER DOT
1479==m||// Mn       HEBREW POINT QAMATS QATAN
1552<=m&&1562>=m||// Mn  [11] ARABIC SIGN SALLALLAHOU ALAYHE WASSALLAM..ARABIC SMALL KASRA
1611<=m&&1631>=m||// Mn  [21] ARABIC FATHATAN..ARABIC WAVY HAMZA BELOW
1648==m||// Mn       ARABIC LETTER SUPERSCRIPT ALEF
1750<=m&&1756>=m||// Mn   [7] ARABIC SMALL HIGH LIGATURE SAD WITH LAM WITH ALEF MAKSURA..ARABIC SMALL HIGH SEEN
1759<=m&&1764>=m||// Mn   [6] ARABIC SMALL HIGH ROUNDED ZERO..ARABIC SMALL HIGH MADDA
1767<=m&&1768>=m||// Mn   [2] ARABIC SMALL HIGH YEH..ARABIC SMALL HIGH NOON
1770<=m&&1773>=m||// Mn   [4] ARABIC EMPTY CENTRE LOW STOP..ARABIC SMALL LOW MEEM
1809==m||// Mn       SYRIAC LETTER SUPERSCRIPT ALAPH
1840<=m&&1866>=m||// Mn  [27] SYRIAC PTHAHA ABOVE..SYRIAC BARREKH
1958<=m&&1968>=m||// Mn  [11] THAANA ABAFILI..THAANA SUKUN
2027<=m&&2035>=m||// Mn   [9] NKO COMBINING SHORT HIGH TONE..NKO COMBINING DOUBLE DOT ABOVE
2070<=m&&2073>=m||// Mn   [4] SAMARITAN MARK IN..SAMARITAN MARK DAGESH
2075<=m&&2083>=m||// Mn   [9] SAMARITAN MARK EPENTHETIC YUT..SAMARITAN VOWEL SIGN A
2085<=m&&2087>=m||// Mn   [3] SAMARITAN VOWEL SIGN SHORT A..SAMARITAN VOWEL SIGN U
2089<=m&&2093>=m||// Mn   [5] SAMARITAN VOWEL SIGN LONG I..SAMARITAN MARK NEQUDAA
2137<=m&&2139>=m||// Mn   [3] MANDAIC AFFRICATION MARK..MANDAIC GEMINATION MARK
2260<=m&&2273>=m||// Mn  [14] ARABIC SMALL HIGH WORD AR-RUB..ARABIC SMALL HIGH SIGN SAFHA
2275<=m&&2306>=m||// Mn  [32] ARABIC TURNED DAMMA BELOW..DEVANAGARI SIGN ANUSVARA
2362==m||// Mn       DEVANAGARI VOWEL SIGN OE
2364==m||// Mn       DEVANAGARI SIGN NUKTA
2369<=m&&2376>=m||// Mn   [8] DEVANAGARI VOWEL SIGN U..DEVANAGARI VOWEL SIGN AI
2381==m||// Mn       DEVANAGARI SIGN VIRAMA
2385<=m&&2391>=m||// Mn   [7] DEVANAGARI STRESS SIGN UDATTA..DEVANAGARI VOWEL SIGN UUE
2402<=m&&2403>=m||// Mn   [2] DEVANAGARI VOWEL SIGN VOCALIC L..DEVANAGARI VOWEL SIGN VOCALIC LL
2433==m||// Mn       BENGALI SIGN CANDRABINDU
2492==m||// Mn       BENGALI SIGN NUKTA
2494==m||// Mc       BENGALI VOWEL SIGN AA
2497<=m&&2500>=m||// Mn   [4] BENGALI VOWEL SIGN U..BENGALI VOWEL SIGN VOCALIC RR
2509==m||// Mn       BENGALI SIGN VIRAMA
2519==m||// Mc       BENGALI AU LENGTH MARK
2530<=m&&2531>=m||// Mn   [2] BENGALI VOWEL SIGN VOCALIC L..BENGALI VOWEL SIGN VOCALIC LL
2561<=m&&2562>=m||// Mn   [2] GURMUKHI SIGN ADAK BINDI..GURMUKHI SIGN BINDI
2620==m||// Mn       GURMUKHI SIGN NUKTA
2625<=m&&2626>=m||// Mn   [2] GURMUKHI VOWEL SIGN U..GURMUKHI VOWEL SIGN UU
2631<=m&&2632>=m||// Mn   [2] GURMUKHI VOWEL SIGN EE..GURMUKHI VOWEL SIGN AI
2635<=m&&2637>=m||// Mn   [3] GURMUKHI VOWEL SIGN OO..GURMUKHI SIGN VIRAMA
2641==m||// Mn       GURMUKHI SIGN UDAAT
2672<=m&&2673>=m||// Mn   [2] GURMUKHI TIPPI..GURMUKHI ADDAK
2677==m||// Mn       GURMUKHI SIGN YAKASH
2689<=m&&2690>=m||// Mn   [2] GUJARATI SIGN CANDRABINDU..GUJARATI SIGN ANUSVARA
2748==m||// Mn       GUJARATI SIGN NUKTA
2753<=m&&2757>=m||// Mn   [5] GUJARATI VOWEL SIGN U..GUJARATI VOWEL SIGN CANDRA E
2759<=m&&2760>=m||// Mn   [2] GUJARATI VOWEL SIGN E..GUJARATI VOWEL SIGN AI
2765==m||// Mn       GUJARATI SIGN VIRAMA
2786<=m&&2787>=m||// Mn   [2] GUJARATI VOWEL SIGN VOCALIC L..GUJARATI VOWEL SIGN VOCALIC LL
2810<=m&&2815>=m||// Mn   [6] GUJARATI SIGN SUKUN..GUJARATI SIGN TWO-CIRCLE NUKTA ABOVE
2817==m||// Mn       ORIYA SIGN CANDRABINDU
2876==m||// Mn       ORIYA SIGN NUKTA
2878==m||// Mc       ORIYA VOWEL SIGN AA
2879==m||// Mn       ORIYA VOWEL SIGN I
2881<=m&&2884>=m||// Mn   [4] ORIYA VOWEL SIGN U..ORIYA VOWEL SIGN VOCALIC RR
2893==m||// Mn       ORIYA SIGN VIRAMA
2902==m||// Mn       ORIYA AI LENGTH MARK
2903==m||// Mc       ORIYA AU LENGTH MARK
2914<=m&&2915>=m||// Mn   [2] ORIYA VOWEL SIGN VOCALIC L..ORIYA VOWEL SIGN VOCALIC LL
2946==m||// Mn       TAMIL SIGN ANUSVARA
3006==m||// Mc       TAMIL VOWEL SIGN AA
3008==m||// Mn       TAMIL VOWEL SIGN II
3021==m||// Mn       TAMIL SIGN VIRAMA
3031==m||// Mc       TAMIL AU LENGTH MARK
3072==m||// Mn       TELUGU SIGN COMBINING CANDRABINDU ABOVE
3134<=m&&3136>=m||// Mn   [3] TELUGU VOWEL SIGN AA..TELUGU VOWEL SIGN II
3142<=m&&3144>=m||// Mn   [3] TELUGU VOWEL SIGN E..TELUGU VOWEL SIGN AI
3146<=m&&3149>=m||// Mn   [4] TELUGU VOWEL SIGN O..TELUGU SIGN VIRAMA
3157<=m&&3158>=m||// Mn   [2] TELUGU LENGTH MARK..TELUGU AI LENGTH MARK
3170<=m&&3171>=m||// Mn   [2] TELUGU VOWEL SIGN VOCALIC L..TELUGU VOWEL SIGN VOCALIC LL
3201==m||// Mn       KANNADA SIGN CANDRABINDU
3260==m||// Mn       KANNADA SIGN NUKTA
3263==m||// Mn       KANNADA VOWEL SIGN I
3266==m||// Mc       KANNADA VOWEL SIGN UU
3270==m||// Mn       KANNADA VOWEL SIGN E
3276<=m&&3277>=m||// Mn   [2] KANNADA VOWEL SIGN AU..KANNADA SIGN VIRAMA
3285<=m&&3286>=m||// Mc   [2] KANNADA LENGTH MARK..KANNADA AI LENGTH MARK
3298<=m&&3299>=m||// Mn   [2] KANNADA VOWEL SIGN VOCALIC L..KANNADA VOWEL SIGN VOCALIC LL
3328<=m&&3329>=m||// Mn   [2] MALAYALAM SIGN COMBINING ANUSVARA ABOVE..MALAYALAM SIGN CANDRABINDU
3387<=m&&3388>=m||// Mn   [2] MALAYALAM SIGN VERTICAL BAR VIRAMA..MALAYALAM SIGN CIRCULAR VIRAMA
3390==m||// Mc       MALAYALAM VOWEL SIGN AA
3393<=m&&3396>=m||// Mn   [4] MALAYALAM VOWEL SIGN U..MALAYALAM VOWEL SIGN VOCALIC RR
3405==m||// Mn       MALAYALAM SIGN VIRAMA
3415==m||// Mc       MALAYALAM AU LENGTH MARK
3426<=m&&3427>=m||// Mn   [2] MALAYALAM VOWEL SIGN VOCALIC L..MALAYALAM VOWEL SIGN VOCALIC LL
3530==m||// Mn       SINHALA SIGN AL-LAKUNA
3535==m||// Mc       SINHALA VOWEL SIGN AELA-PILLA
3538<=m&&3540>=m||// Mn   [3] SINHALA VOWEL SIGN KETTI IS-PILLA..SINHALA VOWEL SIGN KETTI PAA-PILLA
3542==m||// Mn       SINHALA VOWEL SIGN DIGA PAA-PILLA
3551==m||// Mc       SINHALA VOWEL SIGN GAYANUKITTA
3633==m||// Mn       THAI CHARACTER MAI HAN-AKAT
3636<=m&&3642>=m||// Mn   [7] THAI CHARACTER SARA I..THAI CHARACTER PHINTHU
3655<=m&&3662>=m||// Mn   [8] THAI CHARACTER MAITAIKHU..THAI CHARACTER YAMAKKAN
3761==m||// Mn       LAO VOWEL SIGN MAI KAN
3764<=m&&3769>=m||// Mn   [6] LAO VOWEL SIGN I..LAO VOWEL SIGN UU
3771<=m&&3772>=m||// Mn   [2] LAO VOWEL SIGN MAI KON..LAO SEMIVOWEL SIGN LO
3784<=m&&3789>=m||// Mn   [6] LAO TONE MAI EK..LAO NIGGAHITA
3864<=m&&3865>=m||// Mn   [2] TIBETAN ASTROLOGICAL SIGN -KHYUD PA..TIBETAN ASTROLOGICAL SIGN SDONG TSHUGS
3893==m||// Mn       TIBETAN MARK NGAS BZUNG NYI ZLA
3895==m||// Mn       TIBETAN MARK NGAS BZUNG SGOR RTAGS
3897==m||// Mn       TIBETAN MARK TSA -PHRU
3953<=m&&3966>=m||// Mn  [14] TIBETAN VOWEL SIGN AA..TIBETAN SIGN RJES SU NGA RO
3968<=m&&3972>=m||// Mn   [5] TIBETAN VOWEL SIGN REVERSED I..TIBETAN MARK HALANTA
3974<=m&&3975>=m||// Mn   [2] TIBETAN SIGN LCI RTAGS..TIBETAN SIGN YANG RTAGS
3981<=m&&3991>=m||// Mn  [11] TIBETAN SUBJOINED SIGN LCE TSA CAN..TIBETAN SUBJOINED LETTER JA
3993<=m&&4028>=m||// Mn  [36] TIBETAN SUBJOINED LETTER NYA..TIBETAN SUBJOINED LETTER FIXED-FORM RA
4038==m||// Mn       TIBETAN SYMBOL PADMA GDAN
4141<=m&&4144>=m||// Mn   [4] MYANMAR VOWEL SIGN I..MYANMAR VOWEL SIGN UU
4146<=m&&4151>=m||// Mn   [6] MYANMAR VOWEL SIGN AI..MYANMAR SIGN DOT BELOW
4153<=m&&4154>=m||// Mn   [2] MYANMAR SIGN VIRAMA..MYANMAR SIGN ASAT
4157<=m&&4158>=m||// Mn   [2] MYANMAR CONSONANT SIGN MEDIAL WA..MYANMAR CONSONANT SIGN MEDIAL HA
4184<=m&&4185>=m||// Mn   [2] MYANMAR VOWEL SIGN VOCALIC L..MYANMAR VOWEL SIGN VOCALIC LL
4190<=m&&4192>=m||// Mn   [3] MYANMAR CONSONANT SIGN MON MEDIAL NA..MYANMAR CONSONANT SIGN MON MEDIAL LA
4209<=m&&4212>=m||// Mn   [4] MYANMAR VOWEL SIGN GEBA KAREN I..MYANMAR VOWEL SIGN KAYAH EE
4226==m||// Mn       MYANMAR CONSONANT SIGN SHAN MEDIAL WA
4229<=m&&4230>=m||// Mn   [2] MYANMAR VOWEL SIGN SHAN E ABOVE..MYANMAR VOWEL SIGN SHAN FINAL Y
4237==m||// Mn       MYANMAR SIGN SHAN COUNCIL EMPHATIC TONE
4253==m||// Mn       MYANMAR VOWEL SIGN AITON AI
4957<=m&&4959>=m||// Mn   [3] ETHIOPIC COMBINING GEMINATION AND VOWEL LENGTH MARK..ETHIOPIC COMBINING GEMINATION MARK
5906<=m&&5908>=m||// Mn   [3] TAGALOG VOWEL SIGN I..TAGALOG SIGN VIRAMA
5938<=m&&5940>=m||// Mn   [3] HANUNOO VOWEL SIGN I..HANUNOO SIGN PAMUDPOD
5970<=m&&5971>=m||// Mn   [2] BUHID VOWEL SIGN I..BUHID VOWEL SIGN U
6002<=m&&6003>=m||// Mn   [2] TAGBANWA VOWEL SIGN I..TAGBANWA VOWEL SIGN U
6068<=m&&6069>=m||// Mn   [2] KHMER VOWEL INHERENT AQ..KHMER VOWEL INHERENT AA
6071<=m&&6077>=m||// Mn   [7] KHMER VOWEL SIGN I..KHMER VOWEL SIGN UA
6086==m||// Mn       KHMER SIGN NIKAHIT
6089<=m&&6099>=m||// Mn  [11] KHMER SIGN MUUSIKATOAN..KHMER SIGN BATHAMASAT
6109==m||// Mn       KHMER SIGN ATTHACAN
6155<=m&&6157>=m||// Mn   [3] MONGOLIAN FREE VARIATION SELECTOR ONE..MONGOLIAN FREE VARIATION SELECTOR THREE
6277<=m&&6278>=m||// Mn   [2] MONGOLIAN LETTER ALI GALI BALUDA..MONGOLIAN LETTER ALI GALI THREE BALUDA
6313==m||// Mn       MONGOLIAN LETTER ALI GALI DAGALGA
6432<=m&&6434>=m||// Mn   [3] LIMBU VOWEL SIGN A..LIMBU VOWEL SIGN U
6439<=m&&6440>=m||// Mn   [2] LIMBU VOWEL SIGN E..LIMBU VOWEL SIGN O
6450==m||// Mn       LIMBU SMALL LETTER ANUSVARA
6457<=m&&6459>=m||// Mn   [3] LIMBU SIGN MUKPHRENG..LIMBU SIGN SA-I
6679<=m&&6680>=m||// Mn   [2] BUGINESE VOWEL SIGN I..BUGINESE VOWEL SIGN U
6683==m||// Mn       BUGINESE VOWEL SIGN AE
6742==m||// Mn       TAI THAM CONSONANT SIGN MEDIAL LA
6744<=m&&6750>=m||// Mn   [7] TAI THAM SIGN MAI KANG LAI..TAI THAM CONSONANT SIGN SA
6752==m||// Mn       TAI THAM SIGN SAKOT
6754==m||// Mn       TAI THAM VOWEL SIGN MAI SAT
6757<=m&&6764>=m||// Mn   [8] TAI THAM VOWEL SIGN I..TAI THAM VOWEL SIGN OA BELOW
6771<=m&&6780>=m||// Mn  [10] TAI THAM VOWEL SIGN OA ABOVE..TAI THAM SIGN KHUEN-LUE KARAN
6783==m||// Mn       TAI THAM COMBINING CRYPTOGRAMMIC DOT
6832<=m&&6845>=m||// Mn  [14] COMBINING DOUBLED CIRCUMFLEX ACCENT..COMBINING PARENTHESES BELOW
6846==m||// Me       COMBINING PARENTHESES OVERLAY
6912<=m&&6915>=m||// Mn   [4] BALINESE SIGN ULU RICEM..BALINESE SIGN SURANG
6964==m||// Mn       BALINESE SIGN REREKAN
6966<=m&&6970>=m||// Mn   [5] BALINESE VOWEL SIGN ULU..BALINESE VOWEL SIGN RA REPA
6972==m||// Mn       BALINESE VOWEL SIGN LA LENGA
6978==m||// Mn       BALINESE VOWEL SIGN PEPET
7019<=m&&7027>=m||// Mn   [9] BALINESE MUSICAL SYMBOL COMBINING TEGEH..BALINESE MUSICAL SYMBOL COMBINING GONG
7040<=m&&7041>=m||// Mn   [2] SUNDANESE SIGN PANYECEK..SUNDANESE SIGN PANGLAYAR
7074<=m&&7077>=m||// Mn   [4] SUNDANESE CONSONANT SIGN PANYAKRA..SUNDANESE VOWEL SIGN PANYUKU
7080<=m&&7081>=m||// Mn   [2] SUNDANESE VOWEL SIGN PAMEPET..SUNDANESE VOWEL SIGN PANEULEUNG
7083<=m&&7085>=m||// Mn   [3] SUNDANESE SIGN VIRAMA..SUNDANESE CONSONANT SIGN PASANGAN WA
7142==m||// Mn       BATAK SIGN TOMPI
7144<=m&&7145>=m||// Mn   [2] BATAK VOWEL SIGN PAKPAK E..BATAK VOWEL SIGN EE
7149==m||// Mn       BATAK VOWEL SIGN KARO O
7151<=m&&7153>=m||// Mn   [3] BATAK VOWEL SIGN U FOR SIMALUNGUN SA..BATAK CONSONANT SIGN H
7212<=m&&7219>=m||// Mn   [8] LEPCHA VOWEL SIGN E..LEPCHA CONSONANT SIGN T
7222<=m&&7223>=m||// Mn   [2] LEPCHA SIGN RAN..LEPCHA SIGN NUKTA
7376<=m&&7378>=m||// Mn   [3] VEDIC TONE KARSHANA..VEDIC TONE PRENKHA
7380<=m&&7392>=m||// Mn  [13] VEDIC SIGN YAJURVEDIC MIDLINE SVARITA..VEDIC TONE RIGVEDIC KASHMIRI INDEPENDENT SVARITA
7394<=m&&7400>=m||// Mn   [7] VEDIC SIGN VISARGA SVARITA..VEDIC SIGN VISARGA ANUDATTA WITH TAIL
7405==m||// Mn       VEDIC SIGN TIRYAK
7412==m||// Mn       VEDIC TONE CANDRA ABOVE
7416<=m&&7417>=m||// Mn   [2] VEDIC TONE RING ABOVE..VEDIC TONE DOUBLE RING ABOVE
7616<=m&&7673>=m||// Mn  [58] COMBINING DOTTED GRAVE ACCENT..COMBINING WIDE INVERTED BRIDGE BELOW
7675<=m&&7679>=m||// Mn   [5] COMBINING DELETION MARK..COMBINING RIGHT ARROWHEAD AND DOWN ARROWHEAD BELOW
8204==m||// Cf       ZERO WIDTH NON-JOINER
8400<=m&&8412>=m||// Mn  [13] COMBINING LEFT HARPOON ABOVE..COMBINING FOUR DOTS ABOVE
8413<=m&&8416>=m||// Me   [4] COMBINING ENCLOSING CIRCLE..COMBINING ENCLOSING CIRCLE BACKSLASH
8417==m||// Mn       COMBINING LEFT RIGHT ARROW ABOVE
8418<=m&&8420>=m||// Me   [3] COMBINING ENCLOSING SCREEN..COMBINING ENCLOSING UPWARD POINTING TRIANGLE
8421<=m&&8432>=m||// Mn  [12] COMBINING REVERSE SOLIDUS OVERLAY..COMBINING ASTERISK ABOVE
11503<=m&&11505>=m||// Mn   [3] COPTIC COMBINING NI ABOVE..COPTIC COMBINING SPIRITUS LENIS
11647==m||// Mn       TIFINAGH CONSONANT JOINER
11744<=m&&11775>=m||// Mn  [32] COMBINING CYRILLIC LETTER BE..COMBINING CYRILLIC LETTER IOTIFIED BIG YUS
12330<=m&&12333>=m||// Mn   [4] IDEOGRAPHIC LEVEL TONE MARK..IDEOGRAPHIC ENTERING TONE MARK
12334<=m&&12335>=m||// Mc   [2] HANGUL SINGLE DOT TONE MARK..HANGUL DOUBLE DOT TONE MARK
12441<=m&&12442>=m||// Mn   [2] COMBINING KATAKANA-HIRAGANA VOICED SOUND MARK..COMBINING KATAKANA-HIRAGANA SEMI-VOICED SOUND MARK
42607==m||// Mn       COMBINING CYRILLIC VZMET
42608<=m&&42610>=m||// Me   [3] COMBINING CYRILLIC TEN MILLIONS SIGN..COMBINING CYRILLIC THOUSAND MILLIONS SIGN
42612<=m&&42621>=m||// Mn  [10] COMBINING CYRILLIC LETTER UKRAINIAN IE..COMBINING CYRILLIC PAYEROK
42654<=m&&42655>=m||// Mn   [2] COMBINING CYRILLIC LETTER EF..COMBINING CYRILLIC LETTER IOTIFIED E
42736<=m&&42737>=m||// Mn   [2] BAMUM COMBINING MARK KOQNDON..BAMUM COMBINING MARK TUKWENTIS
43010==m||// Mn       SYLOTI NAGRI SIGN DVISVARA
43014==m||// Mn       SYLOTI NAGRI SIGN HASANTA
43019==m||// Mn       SYLOTI NAGRI SIGN ANUSVARA
43045<=m&&43046>=m||// Mn   [2] SYLOTI NAGRI VOWEL SIGN U..SYLOTI NAGRI VOWEL SIGN E
43204<=m&&43205>=m||// Mn   [2] SAURASHTRA SIGN VIRAMA..SAURASHTRA SIGN CANDRABINDU
43232<=m&&43249>=m||// Mn  [18] COMBINING DEVANAGARI DIGIT ZERO..COMBINING DEVANAGARI SIGN AVAGRAHA
43302<=m&&43309>=m||// Mn   [8] KAYAH LI VOWEL UE..KAYAH LI TONE CALYA PLOPHU
43335<=m&&43345>=m||// Mn  [11] REJANG VOWEL SIGN I..REJANG CONSONANT SIGN R
43392<=m&&43394>=m||// Mn   [3] JAVANESE SIGN PANYANGGA..JAVANESE SIGN LAYAR
43443==m||// Mn       JAVANESE SIGN CECAK TELU
43446<=m&&43449>=m||// Mn   [4] JAVANESE VOWEL SIGN WULU..JAVANESE VOWEL SIGN SUKU MENDUT
43452==m||// Mn       JAVANESE VOWEL SIGN PEPET
43493==m||// Mn       MYANMAR SIGN SHAN SAW
43561<=m&&43566>=m||// Mn   [6] CHAM VOWEL SIGN AA..CHAM VOWEL SIGN OE
43569<=m&&43570>=m||// Mn   [2] CHAM VOWEL SIGN AU..CHAM VOWEL SIGN UE
43573<=m&&43574>=m||// Mn   [2] CHAM CONSONANT SIGN LA..CHAM CONSONANT SIGN WA
43587==m||// Mn       CHAM CONSONANT SIGN FINAL NG
43596==m||// Mn       CHAM CONSONANT SIGN FINAL M
43644==m||// Mn       MYANMAR SIGN TAI LAING TONE-2
43696==m||// Mn       TAI VIET MAI KANG
43698<=m&&43700>=m||// Mn   [3] TAI VIET VOWEL I..TAI VIET VOWEL U
43703<=m&&43704>=m||// Mn   [2] TAI VIET MAI KHIT..TAI VIET VOWEL IA
43710<=m&&43711>=m||// Mn   [2] TAI VIET VOWEL AM..TAI VIET TONE MAI EK
43713==m||// Mn       TAI VIET TONE MAI THO
43756<=m&&43757>=m||// Mn   [2] MEETEI MAYEK VOWEL SIGN UU..MEETEI MAYEK VOWEL SIGN AAI
43766==m||// Mn       MEETEI MAYEK VIRAMA
44005==m||// Mn       MEETEI MAYEK VOWEL SIGN ANAP
44008==m||// Mn       MEETEI MAYEK VOWEL SIGN UNAP
44013==m||// Mn       MEETEI MAYEK APUN IYEK
64286==m||// Mn       HEBREW POINT JUDEO-SPANISH VARIKA
65024<=m&&65039>=m||// Mn  [16] VARIATION SELECTOR-1..VARIATION SELECTOR-16
65056<=m&&65071>=m||// Mn  [16] COMBINING LIGATURE LEFT HALF..COMBINING CYRILLIC TITLO RIGHT HALF
65438<=m&&65439>=m||// Lm   [2] HALFWIDTH KATAKANA VOICED SOUND MARK..HALFWIDTH KATAKANA SEMI-VOICED SOUND MARK
66045==m||// Mn       PHAISTOS DISC SIGN COMBINING OBLIQUE STROKE
66272==m||// Mn       COPTIC EPACT THOUSANDS MARK
66422<=m&&66426>=m||// Mn   [5] COMBINING OLD PERMIC LETTER AN..COMBINING OLD PERMIC LETTER SII
68097<=m&&68099>=m||// Mn   [3] KHAROSHTHI VOWEL SIGN I..KHAROSHTHI VOWEL SIGN VOCALIC R
68101<=m&&68102>=m||// Mn   [2] KHAROSHTHI VOWEL SIGN E..KHAROSHTHI VOWEL SIGN O
68108<=m&&68111>=m||// Mn   [4] KHAROSHTHI VOWEL LENGTH MARK..KHAROSHTHI SIGN VISARGA
68152<=m&&68154>=m||// Mn   [3] KHAROSHTHI SIGN BAR ABOVE..KHAROSHTHI SIGN DOT BELOW
68159==m||// Mn       KHAROSHTHI VIRAMA
68325<=m&&68326>=m||// Mn   [2] MANICHAEAN ABBREVIATION MARK ABOVE..MANICHAEAN ABBREVIATION MARK BELOW
69633==m||// Mn       BRAHMI SIGN ANUSVARA
69688<=m&&69702>=m||// Mn  [15] BRAHMI VOWEL SIGN AA..BRAHMI VIRAMA
69759<=m&&69761>=m||// Mn   [3] BRAHMI NUMBER JOINER..KAITHI SIGN ANUSVARA
69811<=m&&69814>=m||// Mn   [4] KAITHI VOWEL SIGN U..KAITHI VOWEL SIGN AI
69817<=m&&69818>=m||// Mn   [2] KAITHI SIGN VIRAMA..KAITHI SIGN NUKTA
69888<=m&&69890>=m||// Mn   [3] CHAKMA SIGN CANDRABINDU..CHAKMA SIGN VISARGA
69927<=m&&69931>=m||// Mn   [5] CHAKMA VOWEL SIGN A..CHAKMA VOWEL SIGN UU
69933<=m&&69940>=m||// Mn   [8] CHAKMA VOWEL SIGN AI..CHAKMA MAAYYAA
70003==m||// Mn       MAHAJANI SIGN NUKTA
70016<=m&&70017>=m||// Mn   [2] SHARADA SIGN CANDRABINDU..SHARADA SIGN ANUSVARA
70070<=m&&70078>=m||// Mn   [9] SHARADA VOWEL SIGN U..SHARADA VOWEL SIGN O
70090<=m&&70092>=m||// Mn   [3] SHARADA SIGN NUKTA..SHARADA EXTRA SHORT VOWEL MARK
70191<=m&&70193>=m||// Mn   [3] KHOJKI VOWEL SIGN U..KHOJKI VOWEL SIGN AI
70196==m||// Mn       KHOJKI SIGN ANUSVARA
70198<=m&&70199>=m||// Mn   [2] KHOJKI SIGN NUKTA..KHOJKI SIGN SHADDA
70206==m||// Mn       KHOJKI SIGN SUKUN
70367==m||// Mn       KHUDAWADI SIGN ANUSVARA
70371<=m&&70378>=m||// Mn   [8] KHUDAWADI VOWEL SIGN U..KHUDAWADI SIGN VIRAMA
70400<=m&&70401>=m||// Mn   [2] GRANTHA SIGN COMBINING ANUSVARA ABOVE..GRANTHA SIGN CANDRABINDU
70460==m||// Mn       GRANTHA SIGN NUKTA
70462==m||// Mc       GRANTHA VOWEL SIGN AA
70464==m||// Mn       GRANTHA VOWEL SIGN II
70487==m||// Mc       GRANTHA AU LENGTH MARK
70502<=m&&70508>=m||// Mn   [7] COMBINING GRANTHA DIGIT ZERO..COMBINING GRANTHA DIGIT SIX
70512<=m&&70516>=m||// Mn   [5] COMBINING GRANTHA LETTER A..COMBINING GRANTHA LETTER PA
70712<=m&&70719>=m||// Mn   [8] NEWA VOWEL SIGN U..NEWA VOWEL SIGN AI
70722<=m&&70724>=m||// Mn   [3] NEWA SIGN VIRAMA..NEWA SIGN ANUSVARA
70726==m||// Mn       NEWA SIGN NUKTA
70832==m||// Mc       TIRHUTA VOWEL SIGN AA
70835<=m&&70840>=m||// Mn   [6] TIRHUTA VOWEL SIGN U..TIRHUTA VOWEL SIGN VOCALIC LL
70842==m||// Mn       TIRHUTA VOWEL SIGN SHORT E
70845==m||// Mc       TIRHUTA VOWEL SIGN SHORT O
70847<=m&&70848>=m||// Mn   [2] TIRHUTA SIGN CANDRABINDU..TIRHUTA SIGN ANUSVARA
70850<=m&&70851>=m||// Mn   [2] TIRHUTA SIGN VIRAMA..TIRHUTA SIGN NUKTA
71087==m||// Mc       SIDDHAM VOWEL SIGN AA
71090<=m&&71093>=m||// Mn   [4] SIDDHAM VOWEL SIGN U..SIDDHAM VOWEL SIGN VOCALIC RR
71100<=m&&71101>=m||// Mn   [2] SIDDHAM SIGN CANDRABINDU..SIDDHAM SIGN ANUSVARA
71103<=m&&71104>=m||// Mn   [2] SIDDHAM SIGN VIRAMA..SIDDHAM SIGN NUKTA
71132<=m&&71133>=m||// Mn   [2] SIDDHAM VOWEL SIGN ALTERNATE U..SIDDHAM VOWEL SIGN ALTERNATE UU
71219<=m&&71226>=m||// Mn   [8] MODI VOWEL SIGN U..MODI VOWEL SIGN AI
71229==m||// Mn       MODI SIGN ANUSVARA
71231<=m&&71232>=m||// Mn   [2] MODI SIGN VIRAMA..MODI SIGN ARDHACANDRA
71339==m||// Mn       TAKRI SIGN ANUSVARA
71341==m||// Mn       TAKRI VOWEL SIGN AA
71344<=m&&71349>=m||// Mn   [6] TAKRI VOWEL SIGN U..TAKRI VOWEL SIGN AU
71351==m||// Mn       TAKRI SIGN NUKTA
71453<=m&&71455>=m||// Mn   [3] AHOM CONSONANT SIGN MEDIAL LA..AHOM CONSONANT SIGN MEDIAL LIGATING RA
71458<=m&&71461>=m||// Mn   [4] AHOM VOWEL SIGN I..AHOM VOWEL SIGN UU
71463<=m&&71467>=m||// Mn   [5] AHOM VOWEL SIGN AW..AHOM SIGN KILLER
72193<=m&&72198>=m||// Mn   [6] ZANABAZAR SQUARE VOWEL SIGN I..ZANABAZAR SQUARE VOWEL SIGN O
72201<=m&&72202>=m||// Mn   [2] ZANABAZAR SQUARE VOWEL SIGN REVERSED I..ZANABAZAR SQUARE VOWEL LENGTH MARK
72243<=m&&72248>=m||// Mn   [6] ZANABAZAR SQUARE FINAL CONSONANT MARK..ZANABAZAR SQUARE SIGN ANUSVARA
72251<=m&&72254>=m||// Mn   [4] ZANABAZAR SQUARE CLUSTER-FINAL LETTER YA..ZANABAZAR SQUARE CLUSTER-FINAL LETTER VA
72263==m||// Mn       ZANABAZAR SQUARE SUBJOINER
72273<=m&&72278>=m||// Mn   [6] SOYOMBO VOWEL SIGN I..SOYOMBO VOWEL SIGN OE
72281<=m&&72283>=m||// Mn   [3] SOYOMBO VOWEL SIGN VOCALIC R..SOYOMBO VOWEL LENGTH MARK
72330<=m&&72342>=m||// Mn  [13] SOYOMBO FINAL CONSONANT SIGN G..SOYOMBO SIGN ANUSVARA
72344<=m&&72345>=m||// Mn   [2] SOYOMBO GEMINATION MARK..SOYOMBO SUBJOINER
72752<=m&&72758>=m||// Mn   [7] BHAIKSUKI VOWEL SIGN I..BHAIKSUKI VOWEL SIGN VOCALIC L
72760<=m&&72765>=m||// Mn   [6] BHAIKSUKI VOWEL SIGN E..BHAIKSUKI SIGN ANUSVARA
72767==m||// Mn       BHAIKSUKI SIGN VIRAMA
72850<=m&&72871>=m||// Mn  [22] MARCHEN SUBJOINED LETTER KA..MARCHEN SUBJOINED LETTER ZA
72874<=m&&72880>=m||// Mn   [7] MARCHEN SUBJOINED LETTER RA..MARCHEN VOWEL SIGN AA
72882<=m&&72883>=m||// Mn   [2] MARCHEN VOWEL SIGN U..MARCHEN VOWEL SIGN E
72885<=m&&72886>=m||// Mn   [2] MARCHEN SIGN ANUSVARA..MARCHEN SIGN CANDRABINDU
73009<=m&&73014>=m||// Mn   [6] MASARAM GONDI VOWEL SIGN AA..MASARAM GONDI VOWEL SIGN VOCALIC R
73018==m||// Mn       MASARAM GONDI VOWEL SIGN E
73020<=m&&73021>=m||// Mn   [2] MASARAM GONDI VOWEL SIGN AI..MASARAM GONDI VOWEL SIGN O
73023<=m&&73029>=m||// Mn   [7] MASARAM GONDI VOWEL SIGN AU..MASARAM GONDI VIRAMA
73031==m||// Mn       MASARAM GONDI RA-KARA
92912<=m&&92916>=m||// Mn   [5] BASSA VAH COMBINING HIGH TONE..BASSA VAH COMBINING HIGH-LOW TONE
92976<=m&&92982>=m||// Mn   [7] PAHAWH HMONG MARK CIM TUB..PAHAWH HMONG MARK CIM TAUM
94095<=m&&94098>=m||// Mn   [4] MIAO TONE RIGHT..MIAO TONE BELOW
113821<=m&&113822>=m||// Mn   [2] DUPLOYAN THICK LETTER SELECTOR..DUPLOYAN DOUBLE MARK
119141==m||// Mc       MUSICAL SYMBOL COMBINING STEM
119143<=m&&119145>=m||// Mn   [3] MUSICAL SYMBOL COMBINING TREMOLO-1..MUSICAL SYMBOL COMBINING TREMOLO-3
119150<=m&&119154>=m||// Mc   [5] MUSICAL SYMBOL COMBINING FLAG-1..MUSICAL SYMBOL COMBINING FLAG-5
119163<=m&&119170>=m||// Mn   [8] MUSICAL SYMBOL COMBINING ACCENT..MUSICAL SYMBOL COMBINING LOURE
119173<=m&&119179>=m||// Mn   [7] MUSICAL SYMBOL COMBINING DOIT..MUSICAL SYMBOL COMBINING TRIPLE TONGUE
119210<=m&&119213>=m||// Mn   [4] MUSICAL SYMBOL COMBINING DOWN BOW..MUSICAL SYMBOL COMBINING SNAP PIZZICATO
119362<=m&&119364>=m||// Mn   [3] COMBINING GREEK MUSICAL TRISEME..COMBINING GREEK MUSICAL PENTASEME
121344<=m&&121398>=m||// Mn  [55] SIGNWRITING HEAD RIM..SIGNWRITING AIR SUCKING IN
121403<=m&&121452>=m||// Mn  [50] SIGNWRITING MOUTH CLOSED NEUTRAL..SIGNWRITING EXCITEMENT
121461==m||// Mn       SIGNWRITING UPPER BODY TILTING FROM HIP JOINTS
121476==m||// Mn       SIGNWRITING LOCATION HEAD NECK
121499<=m&&121503>=m||// Mn   [5] SIGNWRITING FILL MODIFIER-2..SIGNWRITING FILL MODIFIER-6
121505<=m&&121519>=m||// Mn  [15] SIGNWRITING ROTATION MODIFIER-2..SIGNWRITING ROTATION MODIFIER-16
122880<=m&&122886>=m||// Mn   [7] COMBINING GLAGOLITIC LETTER AZU..COMBINING GLAGOLITIC LETTER ZHIVETE
122888<=m&&122904>=m||// Mn  [17] COMBINING GLAGOLITIC LETTER ZEMLJA..COMBINING GLAGOLITIC LETTER HERU
122907<=m&&122913>=m||// Mn   [7] COMBINING GLAGOLITIC LETTER SHTA..COMBINING GLAGOLITIC LETTER YATI
122915<=m&&122916>=m||// Mn   [2] COMBINING GLAGOLITIC LETTER YU..COMBINING GLAGOLITIC LETTER SMALL YUS
122918<=m&&122922>=m||// Mn   [5] COMBINING GLAGOLITIC LETTER YO..COMBINING GLAGOLITIC LETTER FITA
125136<=m&&125142>=m||// Mn   [7] MENDE KIKAKUI COMBINING NUMBER TEENS..MENDE KIKAKUI COMBINING NUMBER MILLIONS
125252<=m&&125258>=m||// Mn   [7] ADLAM ALIF LENGTHENER..ADLAM NUKTA
917536<=m&&917631>=m||// Cf  [96] TAG SPACE..CANCEL TAG
917760<=m&&917999>=m// Mn [240] VARIATION SELECTOR-17..VARIATION SELECTOR-256
?r:127462<=m&&127487>=m?i:2307==m||// Mc       DEVANAGARI SIGN VISARGA
2363==m||// Mc       DEVANAGARI VOWEL SIGN OOE
2366<=m&&2368>=m||// Mc   [3] DEVANAGARI VOWEL SIGN AA..DEVANAGARI VOWEL SIGN II
2377<=m&&2380>=m||// Mc   [4] DEVANAGARI VOWEL SIGN CANDRA O..DEVANAGARI VOWEL SIGN AU
2382<=m&&2383>=m||// Mc   [2] DEVANAGARI VOWEL SIGN PRISHTHAMATRA E..DEVANAGARI VOWEL SIGN AW
2434<=m&&2435>=m||// Mc   [2] BENGALI SIGN ANUSVARA..BENGALI SIGN VISARGA
2495<=m&&2496>=m||// Mc   [2] BENGALI VOWEL SIGN I..BENGALI VOWEL SIGN II
2503<=m&&2504>=m||// Mc   [2] BENGALI VOWEL SIGN E..BENGALI VOWEL SIGN AI
2507<=m&&2508>=m||// Mc   [2] BENGALI VOWEL SIGN O..BENGALI VOWEL SIGN AU
2563==m||// Mc       GURMUKHI SIGN VISARGA
2622<=m&&2624>=m||// Mc   [3] GURMUKHI VOWEL SIGN AA..GURMUKHI VOWEL SIGN II
2691==m||// Mc       GUJARATI SIGN VISARGA
2750<=m&&2752>=m||// Mc   [3] GUJARATI VOWEL SIGN AA..GUJARATI VOWEL SIGN II
2761==m||// Mc       GUJARATI VOWEL SIGN CANDRA O
2763<=m&&2764>=m||// Mc   [2] GUJARATI VOWEL SIGN O..GUJARATI VOWEL SIGN AU
2818<=m&&2819>=m||// Mc   [2] ORIYA SIGN ANUSVARA..ORIYA SIGN VISARGA
2880==m||// Mc       ORIYA VOWEL SIGN II
2887<=m&&2888>=m||// Mc   [2] ORIYA VOWEL SIGN E..ORIYA VOWEL SIGN AI
2891<=m&&2892>=m||// Mc   [2] ORIYA VOWEL SIGN O..ORIYA VOWEL SIGN AU
3007==m||// Mc       TAMIL VOWEL SIGN I
3009<=m&&3010>=m||// Mc   [2] TAMIL VOWEL SIGN U..TAMIL VOWEL SIGN UU
3014<=m&&3016>=m||// Mc   [3] TAMIL VOWEL SIGN E..TAMIL VOWEL SIGN AI
3018<=m&&3020>=m||// Mc   [3] TAMIL VOWEL SIGN O..TAMIL VOWEL SIGN AU
3073<=m&&3075>=m||// Mc   [3] TELUGU SIGN CANDRABINDU..TELUGU SIGN VISARGA
3137<=m&&3140>=m||// Mc   [4] TELUGU VOWEL SIGN U..TELUGU VOWEL SIGN VOCALIC RR
3202<=m&&3203>=m||// Mc   [2] KANNADA SIGN ANUSVARA..KANNADA SIGN VISARGA
3262==m||// Mc       KANNADA VOWEL SIGN AA
3264<=m&&3265>=m||// Mc   [2] KANNADA VOWEL SIGN II..KANNADA VOWEL SIGN U
3267<=m&&3268>=m||// Mc   [2] KANNADA VOWEL SIGN VOCALIC R..KANNADA VOWEL SIGN VOCALIC RR
3271<=m&&3272>=m||// Mc   [2] KANNADA VOWEL SIGN EE..KANNADA VOWEL SIGN AI
3274<=m&&3275>=m||// Mc   [2] KANNADA VOWEL SIGN O..KANNADA VOWEL SIGN OO
3330<=m&&3331>=m||// Mc   [2] MALAYALAM SIGN ANUSVARA..MALAYALAM SIGN VISARGA
3391<=m&&3392>=m||// Mc   [2] MALAYALAM VOWEL SIGN I..MALAYALAM VOWEL SIGN II
3398<=m&&3400>=m||// Mc   [3] MALAYALAM VOWEL SIGN E..MALAYALAM VOWEL SIGN AI
3402<=m&&3404>=m||// Mc   [3] MALAYALAM VOWEL SIGN O..MALAYALAM VOWEL SIGN AU
3458<=m&&3459>=m||// Mc   [2] SINHALA SIGN ANUSVARAYA..SINHALA SIGN VISARGAYA
3536<=m&&3537>=m||// Mc   [2] SINHALA VOWEL SIGN KETTI AEDA-PILLA..SINHALA VOWEL SIGN DIGA AEDA-PILLA
3544<=m&&3550>=m||// Mc   [7] SINHALA VOWEL SIGN GAETTA-PILLA..SINHALA VOWEL SIGN KOMBUVA HAA GAYANUKITTA
3570<=m&&3571>=m||// Mc   [2] SINHALA VOWEL SIGN DIGA GAETTA-PILLA..SINHALA VOWEL SIGN DIGA GAYANUKITTA
3635==m||// Lo       THAI CHARACTER SARA AM
3763==m||// Lo       LAO VOWEL SIGN AM
3902<=m&&3903>=m||// Mc   [2] TIBETAN SIGN YAR TSHES..TIBETAN SIGN MAR TSHES
3967==m||// Mc       TIBETAN SIGN RNAM BCAD
4145==m||// Mc       MYANMAR VOWEL SIGN E
4155<=m&&4156>=m||// Mc   [2] MYANMAR CONSONANT SIGN MEDIAL YA..MYANMAR CONSONANT SIGN MEDIAL RA
4182<=m&&4183>=m||// Mc   [2] MYANMAR VOWEL SIGN VOCALIC R..MYANMAR VOWEL SIGN VOCALIC RR
4228==m||// Mc       MYANMAR VOWEL SIGN SHAN E
6070==m||// Mc       KHMER VOWEL SIGN AA
6078<=m&&6085>=m||// Mc   [8] KHMER VOWEL SIGN OE..KHMER VOWEL SIGN AU
6087<=m&&6088>=m||// Mc   [2] KHMER SIGN REAHMUK..KHMER SIGN YUUKALEAPINTU
6435<=m&&6438>=m||// Mc   [4] LIMBU VOWEL SIGN EE..LIMBU VOWEL SIGN AU
6441<=m&&6443>=m||// Mc   [3] LIMBU SUBJOINED LETTER YA..LIMBU SUBJOINED LETTER WA
6448<=m&&6449>=m||// Mc   [2] LIMBU SMALL LETTER KA..LIMBU SMALL LETTER NGA
6451<=m&&6456>=m||// Mc   [6] LIMBU SMALL LETTER TA..LIMBU SMALL LETTER LA
6681<=m&&6682>=m||// Mc   [2] BUGINESE VOWEL SIGN E..BUGINESE VOWEL SIGN O
6741==m||// Mc       TAI THAM CONSONANT SIGN MEDIAL RA
6743==m||// Mc       TAI THAM CONSONANT SIGN LA TANG LAI
6765<=m&&6770>=m||// Mc   [6] TAI THAM VOWEL SIGN OY..TAI THAM VOWEL SIGN THAM AI
6916==m||// Mc       BALINESE SIGN BISAH
6965==m||// Mc       BALINESE VOWEL SIGN TEDUNG
6971==m||// Mc       BALINESE VOWEL SIGN RA REPA TEDUNG
6973<=m&&6977>=m||// Mc   [5] BALINESE VOWEL SIGN LA LENGA TEDUNG..BALINESE VOWEL SIGN TALING REPA TEDUNG
6979<=m&&6980>=m||// Mc   [2] BALINESE VOWEL SIGN PEPET TEDUNG..BALINESE ADEG ADEG
7042==m||// Mc       SUNDANESE SIGN PANGWISAD
7073==m||// Mc       SUNDANESE CONSONANT SIGN PAMINGKAL
7078<=m&&7079>=m||// Mc   [2] SUNDANESE VOWEL SIGN PANAELAENG..SUNDANESE VOWEL SIGN PANOLONG
7082==m||// Mc       SUNDANESE SIGN PAMAAEH
7143==m||// Mc       BATAK VOWEL SIGN E
7146<=m&&7148>=m||// Mc   [3] BATAK VOWEL SIGN I..BATAK VOWEL SIGN O
7150==m||// Mc       BATAK VOWEL SIGN U
7154<=m&&7155>=m||// Mc   [2] BATAK PANGOLAT..BATAK PANONGONAN
7204<=m&&7211>=m||// Mc   [8] LEPCHA SUBJOINED LETTER YA..LEPCHA VOWEL SIGN UU
7220<=m&&7221>=m||// Mc   [2] LEPCHA CONSONANT SIGN NYIN-DO..LEPCHA CONSONANT SIGN KANG
7393==m||// Mc       VEDIC TONE ATHARVAVEDIC INDEPENDENT SVARITA
7410<=m&&7411>=m||// Mc   [2] VEDIC SIGN ARDHAVISARGA..VEDIC SIGN ROTATED ARDHAVISARGA
7415==m||// Mc       VEDIC SIGN ATIKRAMA
43043<=m&&43044>=m||// Mc   [2] SYLOTI NAGRI VOWEL SIGN A..SYLOTI NAGRI VOWEL SIGN I
43047==m||// Mc       SYLOTI NAGRI VOWEL SIGN OO
43136<=m&&43137>=m||// Mc   [2] SAURASHTRA SIGN ANUSVARA..SAURASHTRA SIGN VISARGA
43188<=m&&43203>=m||// Mc  [16] SAURASHTRA CONSONANT SIGN HAARU..SAURASHTRA VOWEL SIGN AU
43346<=m&&43347>=m||// Mc   [2] REJANG CONSONANT SIGN H..REJANG VIRAMA
43395==m||// Mc       JAVANESE SIGN WIGNYAN
43444<=m&&43445>=m||// Mc   [2] JAVANESE VOWEL SIGN TARUNG..JAVANESE VOWEL SIGN TOLONG
43450<=m&&43451>=m||// Mc   [2] JAVANESE VOWEL SIGN TALING..JAVANESE VOWEL SIGN DIRGA MURE
43453<=m&&43456>=m||// Mc   [4] JAVANESE CONSONANT SIGN KERET..JAVANESE PANGKON
43567<=m&&43568>=m||// Mc   [2] CHAM VOWEL SIGN O..CHAM VOWEL SIGN AI
43571<=m&&43572>=m||// Mc   [2] CHAM CONSONANT SIGN YA..CHAM CONSONANT SIGN RA
43597==m||// Mc       CHAM CONSONANT SIGN FINAL H
43755==m||// Mc       MEETEI MAYEK VOWEL SIGN II
43758<=m&&43759>=m||// Mc   [2] MEETEI MAYEK VOWEL SIGN AU..MEETEI MAYEK VOWEL SIGN AAU
43765==m||// Mc       MEETEI MAYEK VOWEL SIGN VISARGA
44003<=m&&44004>=m||// Mc   [2] MEETEI MAYEK VOWEL SIGN ONAP..MEETEI MAYEK VOWEL SIGN INAP
44006<=m&&44007>=m||// Mc   [2] MEETEI MAYEK VOWEL SIGN YENAP..MEETEI MAYEK VOWEL SIGN SOUNAP
44009<=m&&44010>=m||// Mc   [2] MEETEI MAYEK VOWEL SIGN CHEINAP..MEETEI MAYEK VOWEL SIGN NUNG
44012==m||// Mc       MEETEI MAYEK LUM IYEK
69632==m||// Mc       BRAHMI SIGN CANDRABINDU
69634==m||// Mc       BRAHMI SIGN VISARGA
69762==m||// Mc       KAITHI SIGN VISARGA
69808<=m&&69810>=m||// Mc   [3] KAITHI VOWEL SIGN AA..KAITHI VOWEL SIGN II
69815<=m&&69816>=m||// Mc   [2] KAITHI VOWEL SIGN O..KAITHI VOWEL SIGN AU
69932==m||// Mc       CHAKMA VOWEL SIGN E
70018==m||// Mc       SHARADA SIGN VISARGA
70067<=m&&70069>=m||// Mc   [3] SHARADA VOWEL SIGN AA..SHARADA VOWEL SIGN II
70079<=m&&70080>=m||// Mc   [2] SHARADA VOWEL SIGN AU..SHARADA SIGN VIRAMA
70188<=m&&70190>=m||// Mc   [3] KHOJKI VOWEL SIGN AA..KHOJKI VOWEL SIGN II
70194<=m&&70195>=m||// Mc   [2] KHOJKI VOWEL SIGN O..KHOJKI VOWEL SIGN AU
70197==m||// Mc       KHOJKI SIGN VIRAMA
70368<=m&&70370>=m||// Mc   [3] KHUDAWADI VOWEL SIGN AA..KHUDAWADI VOWEL SIGN II
70402<=m&&70403>=m||// Mc   [2] GRANTHA SIGN ANUSVARA..GRANTHA SIGN VISARGA
70463==m||// Mc       GRANTHA VOWEL SIGN I
70465<=m&&70468>=m||// Mc   [4] GRANTHA VOWEL SIGN U..GRANTHA VOWEL SIGN VOCALIC RR
70471<=m&&70472>=m||// Mc   [2] GRANTHA VOWEL SIGN EE..GRANTHA VOWEL SIGN AI
70475<=m&&70477>=m||// Mc   [3] GRANTHA VOWEL SIGN OO..GRANTHA SIGN VIRAMA
70498<=m&&70499>=m||// Mc   [2] GRANTHA VOWEL SIGN VOCALIC L..GRANTHA VOWEL SIGN VOCALIC LL
70709<=m&&70711>=m||// Mc   [3] NEWA VOWEL SIGN AA..NEWA VOWEL SIGN II
70720<=m&&70721>=m||// Mc   [2] NEWA VOWEL SIGN O..NEWA VOWEL SIGN AU
70725==m||// Mc       NEWA SIGN VISARGA
70833<=m&&70834>=m||// Mc   [2] TIRHUTA VOWEL SIGN I..TIRHUTA VOWEL SIGN II
70841==m||// Mc       TIRHUTA VOWEL SIGN E
70843<=m&&70844>=m||// Mc   [2] TIRHUTA VOWEL SIGN AI..TIRHUTA VOWEL SIGN O
70846==m||// Mc       TIRHUTA VOWEL SIGN AU
70849==m||// Mc       TIRHUTA SIGN VISARGA
71088<=m&&71089>=m||// Mc   [2] SIDDHAM VOWEL SIGN I..SIDDHAM VOWEL SIGN II
71096<=m&&71099>=m||// Mc   [4] SIDDHAM VOWEL SIGN E..SIDDHAM VOWEL SIGN AU
71102==m||// Mc       SIDDHAM SIGN VISARGA
71216<=m&&71218>=m||// Mc   [3] MODI VOWEL SIGN AA..MODI VOWEL SIGN II
71227<=m&&71228>=m||// Mc   [2] MODI VOWEL SIGN O..MODI VOWEL SIGN AU
71230==m||// Mc       MODI SIGN VISARGA
71340==m||// Mc       TAKRI SIGN VISARGA
71342<=m&&71343>=m||// Mc   [2] TAKRI VOWEL SIGN I..TAKRI VOWEL SIGN II
71350==m||// Mc       TAKRI SIGN VIRAMA
71456<=m&&71457>=m||// Mc   [2] AHOM VOWEL SIGN A..AHOM VOWEL SIGN AA
71462==m||// Mc       AHOM VOWEL SIGN E
72199<=m&&72200>=m||// Mc   [2] ZANABAZAR SQUARE VOWEL SIGN AI..ZANABAZAR SQUARE VOWEL SIGN AU
72249==m||// Mc       ZANABAZAR SQUARE SIGN VISARGA
72279<=m&&72280>=m||// Mc   [2] SOYOMBO VOWEL SIGN AI..SOYOMBO VOWEL SIGN AU
72343==m||// Mc       SOYOMBO SIGN VISARGA
72751==m||// Mc       BHAIKSUKI VOWEL SIGN AA
72766==m||// Mc       BHAIKSUKI SIGN VISARGA
72873==m||// Mc       MARCHEN SUBJOINED LETTER YA
72881==m||// Mc       MARCHEN VOWEL SIGN I
72884==m||// Mc       MARCHEN VOWEL SIGN O
94033<=m&&94078>=m||// Mc  [46] MIAO SIGN ASPIRATION..MIAO VOWEL SIGN NG
119142==m||// Mc       MUSICAL SYMBOL COMBINING SPRECHGESANG STEM
119149==m// Mc       MUSICAL SYMBOL COMBINING AUGMENTATION DOT
?a:4352<=m&&4447>=m||// Lo  [96] HANGUL CHOSEONG KIYEOK..HANGUL CHOSEONG FILLER
43360<=m&&43388>=m// Lo  [29] HANGUL CHOSEONG TIKEUT-MIEUM..HANGUL CHOSEONG SSANGYEORINHIEUH
?s:4448<=m&&4519>=m||// Lo  [72] HANGUL JUNGSEONG FILLER..HANGUL JUNGSEONG O-YAE
55216<=m&&55238>=m// Lo  [23] HANGUL JUNGSEONG O-YEO..HANGUL JUNGSEONG ARAEA-E
?l:4520<=m&&4607>=m||// Lo  [88] HANGUL JONGSEONG KIYEOK..HANGUL JONGSEONG SSANGNIEUN
55243<=m&&55291>=m// Lo  [49] HANGUL JONGSEONG NIEUN-RIEUL..HANGUL JONGSEONG PHIEUPH-THIEUTH
?o:44032==m||// Lo       HANGUL SYLLABLE GA
44060==m||// Lo       HANGUL SYLLABLE GAE
44088==m||// Lo       HANGUL SYLLABLE GYA
44116==m||// Lo       HANGUL SYLLABLE GYAE
44144==m||// Lo       HANGUL SYLLABLE GEO
44172==m||// Lo       HANGUL SYLLABLE GE
44200==m||// Lo       HANGUL SYLLABLE GYEO
44228==m||// Lo       HANGUL SYLLABLE GYE
44256==m||// Lo       HANGUL SYLLABLE GO
44284==m||// Lo       HANGUL SYLLABLE GWA
44312==m||// Lo       HANGUL SYLLABLE GWAE
44340==m||// Lo       HANGUL SYLLABLE GOE
44368==m||// Lo       HANGUL SYLLABLE GYO
44396==m||// Lo       HANGUL SYLLABLE GU
44424==m||// Lo       HANGUL SYLLABLE GWEO
44452==m||// Lo       HANGUL SYLLABLE GWE
44480==m||// Lo       HANGUL SYLLABLE GWI
44508==m||// Lo       HANGUL SYLLABLE GYU
44536==m||// Lo       HANGUL SYLLABLE GEU
44564==m||// Lo       HANGUL SYLLABLE GYI
44592==m||// Lo       HANGUL SYLLABLE GI
44620==m||// Lo       HANGUL SYLLABLE GGA
44648==m||// Lo       HANGUL SYLLABLE GGAE
44676==m||// Lo       HANGUL SYLLABLE GGYA
44704==m||// Lo       HANGUL SYLLABLE GGYAE
44732==m||// Lo       HANGUL SYLLABLE GGEO
44760==m||// Lo       HANGUL SYLLABLE GGE
44788==m||// Lo       HANGUL SYLLABLE GGYEO
44816==m||// Lo       HANGUL SYLLABLE GGYE
44844==m||// Lo       HANGUL SYLLABLE GGO
44872==m||// Lo       HANGUL SYLLABLE GGWA
44900==m||// Lo       HANGUL SYLLABLE GGWAE
44928==m||// Lo       HANGUL SYLLABLE GGOE
44956==m||// Lo       HANGUL SYLLABLE GGYO
44984==m||// Lo       HANGUL SYLLABLE GGU
45012==m||// Lo       HANGUL SYLLABLE GGWEO
45040==m||// Lo       HANGUL SYLLABLE GGWE
45068==m||// Lo       HANGUL SYLLABLE GGWI
45096==m||// Lo       HANGUL SYLLABLE GGYU
45124==m||// Lo       HANGUL SYLLABLE GGEU
45152==m||// Lo       HANGUL SYLLABLE GGYI
45180==m||// Lo       HANGUL SYLLABLE GGI
45208==m||// Lo       HANGUL SYLLABLE NA
45236==m||// Lo       HANGUL SYLLABLE NAE
45264==m||// Lo       HANGUL SYLLABLE NYA
45292==m||// Lo       HANGUL SYLLABLE NYAE
45320==m||// Lo       HANGUL SYLLABLE NEO
45348==m||// Lo       HANGUL SYLLABLE NE
45376==m||// Lo       HANGUL SYLLABLE NYEO
45404==m||// Lo       HANGUL SYLLABLE NYE
45432==m||// Lo       HANGUL SYLLABLE NO
45460==m||// Lo       HANGUL SYLLABLE NWA
45488==m||// Lo       HANGUL SYLLABLE NWAE
45516==m||// Lo       HANGUL SYLLABLE NOE
45544==m||// Lo       HANGUL SYLLABLE NYO
45572==m||// Lo       HANGUL SYLLABLE NU
45600==m||// Lo       HANGUL SYLLABLE NWEO
45628==m||// Lo       HANGUL SYLLABLE NWE
45656==m||// Lo       HANGUL SYLLABLE NWI
45684==m||// Lo       HANGUL SYLLABLE NYU
45712==m||// Lo       HANGUL SYLLABLE NEU
45740==m||// Lo       HANGUL SYLLABLE NYI
45768==m||// Lo       HANGUL SYLLABLE NI
45796==m||// Lo       HANGUL SYLLABLE DA
45824==m||// Lo       HANGUL SYLLABLE DAE
45852==m||// Lo       HANGUL SYLLABLE DYA
45880==m||// Lo       HANGUL SYLLABLE DYAE
45908==m||// Lo       HANGUL SYLLABLE DEO
45936==m||// Lo       HANGUL SYLLABLE DE
45964==m||// Lo       HANGUL SYLLABLE DYEO
45992==m||// Lo       HANGUL SYLLABLE DYE
46020==m||// Lo       HANGUL SYLLABLE DO
46048==m||// Lo       HANGUL SYLLABLE DWA
46076==m||// Lo       HANGUL SYLLABLE DWAE
46104==m||// Lo       HANGUL SYLLABLE DOE
46132==m||// Lo       HANGUL SYLLABLE DYO
46160==m||// Lo       HANGUL SYLLABLE DU
46188==m||// Lo       HANGUL SYLLABLE DWEO
46216==m||// Lo       HANGUL SYLLABLE DWE
46244==m||// Lo       HANGUL SYLLABLE DWI
46272==m||// Lo       HANGUL SYLLABLE DYU
46300==m||// Lo       HANGUL SYLLABLE DEU
46328==m||// Lo       HANGUL SYLLABLE DYI
46356==m||// Lo       HANGUL SYLLABLE DI
46384==m||// Lo       HANGUL SYLLABLE DDA
46412==m||// Lo       HANGUL SYLLABLE DDAE
46440==m||// Lo       HANGUL SYLLABLE DDYA
46468==m||// Lo       HANGUL SYLLABLE DDYAE
46496==m||// Lo       HANGUL SYLLABLE DDEO
46524==m||// Lo       HANGUL SYLLABLE DDE
46552==m||// Lo       HANGUL SYLLABLE DDYEO
46580==m||// Lo       HANGUL SYLLABLE DDYE
46608==m||// Lo       HANGUL SYLLABLE DDO
46636==m||// Lo       HANGUL SYLLABLE DDWA
46664==m||// Lo       HANGUL SYLLABLE DDWAE
46692==m||// Lo       HANGUL SYLLABLE DDOE
46720==m||// Lo       HANGUL SYLLABLE DDYO
46748==m||// Lo       HANGUL SYLLABLE DDU
46776==m||// Lo       HANGUL SYLLABLE DDWEO
46804==m||// Lo       HANGUL SYLLABLE DDWE
46832==m||// Lo       HANGUL SYLLABLE DDWI
46860==m||// Lo       HANGUL SYLLABLE DDYU
46888==m||// Lo       HANGUL SYLLABLE DDEU
46916==m||// Lo       HANGUL SYLLABLE DDYI
46944==m||// Lo       HANGUL SYLLABLE DDI
46972==m||// Lo       HANGUL SYLLABLE RA
47000==m||// Lo       HANGUL SYLLABLE RAE
47028==m||// Lo       HANGUL SYLLABLE RYA
47056==m||// Lo       HANGUL SYLLABLE RYAE
47084==m||// Lo       HANGUL SYLLABLE REO
47112==m||// Lo       HANGUL SYLLABLE RE
47140==m||// Lo       HANGUL SYLLABLE RYEO
47168==m||// Lo       HANGUL SYLLABLE RYE
47196==m||// Lo       HANGUL SYLLABLE RO
47224==m||// Lo       HANGUL SYLLABLE RWA
47252==m||// Lo       HANGUL SYLLABLE RWAE
47280==m||// Lo       HANGUL SYLLABLE ROE
47308==m||// Lo       HANGUL SYLLABLE RYO
47336==m||// Lo       HANGUL SYLLABLE RU
47364==m||// Lo       HANGUL SYLLABLE RWEO
47392==m||// Lo       HANGUL SYLLABLE RWE
47420==m||// Lo       HANGUL SYLLABLE RWI
47448==m||// Lo       HANGUL SYLLABLE RYU
47476==m||// Lo       HANGUL SYLLABLE REU
47504==m||// Lo       HANGUL SYLLABLE RYI
47532==m||// Lo       HANGUL SYLLABLE RI
47560==m||// Lo       HANGUL SYLLABLE MA
47588==m||// Lo       HANGUL SYLLABLE MAE
47616==m||// Lo       HANGUL SYLLABLE MYA
47644==m||// Lo       HANGUL SYLLABLE MYAE
47672==m||// Lo       HANGUL SYLLABLE MEO
47700==m||// Lo       HANGUL SYLLABLE ME
47728==m||// Lo       HANGUL SYLLABLE MYEO
47756==m||// Lo       HANGUL SYLLABLE MYE
47784==m||// Lo       HANGUL SYLLABLE MO
47812==m||// Lo       HANGUL SYLLABLE MWA
47840==m||// Lo       HANGUL SYLLABLE MWAE
47868==m||// Lo       HANGUL SYLLABLE MOE
47896==m||// Lo       HANGUL SYLLABLE MYO
47924==m||// Lo       HANGUL SYLLABLE MU
47952==m||// Lo       HANGUL SYLLABLE MWEO
47980==m||// Lo       HANGUL SYLLABLE MWE
48008==m||// Lo       HANGUL SYLLABLE MWI
48036==m||// Lo       HANGUL SYLLABLE MYU
48064==m||// Lo       HANGUL SYLLABLE MEU
48092==m||// Lo       HANGUL SYLLABLE MYI
48120==m||// Lo       HANGUL SYLLABLE MI
48148==m||// Lo       HANGUL SYLLABLE BA
48176==m||// Lo       HANGUL SYLLABLE BAE
48204==m||// Lo       HANGUL SYLLABLE BYA
48232==m||// Lo       HANGUL SYLLABLE BYAE
48260==m||// Lo       HANGUL SYLLABLE BEO
48288==m||// Lo       HANGUL SYLLABLE BE
48316==m||// Lo       HANGUL SYLLABLE BYEO
48344==m||// Lo       HANGUL SYLLABLE BYE
48372==m||// Lo       HANGUL SYLLABLE BO
48400==m||// Lo       HANGUL SYLLABLE BWA
48428==m||// Lo       HANGUL SYLLABLE BWAE
48456==m||// Lo       HANGUL SYLLABLE BOE
48484==m||// Lo       HANGUL SYLLABLE BYO
48512==m||// Lo       HANGUL SYLLABLE BU
48540==m||// Lo       HANGUL SYLLABLE BWEO
48568==m||// Lo       HANGUL SYLLABLE BWE
48596==m||// Lo       HANGUL SYLLABLE BWI
48624==m||// Lo       HANGUL SYLLABLE BYU
48652==m||// Lo       HANGUL SYLLABLE BEU
48680==m||// Lo       HANGUL SYLLABLE BYI
48708==m||// Lo       HANGUL SYLLABLE BI
48736==m||// Lo       HANGUL SYLLABLE BBA
48764==m||// Lo       HANGUL SYLLABLE BBAE
48792==m||// Lo       HANGUL SYLLABLE BBYA
48820==m||// Lo       HANGUL SYLLABLE BBYAE
48848==m||// Lo       HANGUL SYLLABLE BBEO
48876==m||// Lo       HANGUL SYLLABLE BBE
48904==m||// Lo       HANGUL SYLLABLE BBYEO
48932==m||// Lo       HANGUL SYLLABLE BBYE
48960==m||// Lo       HANGUL SYLLABLE BBO
48988==m||// Lo       HANGUL SYLLABLE BBWA
49016==m||// Lo       HANGUL SYLLABLE BBWAE
49044==m||// Lo       HANGUL SYLLABLE BBOE
49072==m||// Lo       HANGUL SYLLABLE BBYO
49100==m||// Lo       HANGUL SYLLABLE BBU
49128==m||// Lo       HANGUL SYLLABLE BBWEO
49156==m||// Lo       HANGUL SYLLABLE BBWE
49184==m||// Lo       HANGUL SYLLABLE BBWI
49212==m||// Lo       HANGUL SYLLABLE BBYU
49240==m||// Lo       HANGUL SYLLABLE BBEU
49268==m||// Lo       HANGUL SYLLABLE BBYI
49296==m||// Lo       HANGUL SYLLABLE BBI
49324==m||// Lo       HANGUL SYLLABLE SA
49352==m||// Lo       HANGUL SYLLABLE SAE
49380==m||// Lo       HANGUL SYLLABLE SYA
49408==m||// Lo       HANGUL SYLLABLE SYAE
49436==m||// Lo       HANGUL SYLLABLE SEO
49464==m||// Lo       HANGUL SYLLABLE SE
49492==m||// Lo       HANGUL SYLLABLE SYEO
49520==m||// Lo       HANGUL SYLLABLE SYE
49548==m||// Lo       HANGUL SYLLABLE SO
49576==m||// Lo       HANGUL SYLLABLE SWA
49604==m||// Lo       HANGUL SYLLABLE SWAE
49632==m||// Lo       HANGUL SYLLABLE SOE
49660==m||// Lo       HANGUL SYLLABLE SYO
49688==m||// Lo       HANGUL SYLLABLE SU
49716==m||// Lo       HANGUL SYLLABLE SWEO
49744==m||// Lo       HANGUL SYLLABLE SWE
49772==m||// Lo       HANGUL SYLLABLE SWI
49800==m||// Lo       HANGUL SYLLABLE SYU
49828==m||// Lo       HANGUL SYLLABLE SEU
49856==m||// Lo       HANGUL SYLLABLE SYI
49884==m||// Lo       HANGUL SYLLABLE SI
49912==m||// Lo       HANGUL SYLLABLE SSA
49940==m||// Lo       HANGUL SYLLABLE SSAE
49968==m||// Lo       HANGUL SYLLABLE SSYA
49996==m||// Lo       HANGUL SYLLABLE SSYAE
50024==m||// Lo       HANGUL SYLLABLE SSEO
50052==m||// Lo       HANGUL SYLLABLE SSE
50080==m||// Lo       HANGUL SYLLABLE SSYEO
50108==m||// Lo       HANGUL SYLLABLE SSYE
50136==m||// Lo       HANGUL SYLLABLE SSO
50164==m||// Lo       HANGUL SYLLABLE SSWA
50192==m||// Lo       HANGUL SYLLABLE SSWAE
50220==m||// Lo       HANGUL SYLLABLE SSOE
50248==m||// Lo       HANGUL SYLLABLE SSYO
50276==m||// Lo       HANGUL SYLLABLE SSU
50304==m||// Lo       HANGUL SYLLABLE SSWEO
50332==m||// Lo       HANGUL SYLLABLE SSWE
50360==m||// Lo       HANGUL SYLLABLE SSWI
50388==m||// Lo       HANGUL SYLLABLE SSYU
50416==m||// Lo       HANGUL SYLLABLE SSEU
50444==m||// Lo       HANGUL SYLLABLE SSYI
50472==m||// Lo       HANGUL SYLLABLE SSI
50500==m||// Lo       HANGUL SYLLABLE A
50528==m||// Lo       HANGUL SYLLABLE AE
50556==m||// Lo       HANGUL SYLLABLE YA
50584==m||// Lo       HANGUL SYLLABLE YAE
50612==m||// Lo       HANGUL SYLLABLE EO
50640==m||// Lo       HANGUL SYLLABLE E
50668==m||// Lo       HANGUL SYLLABLE YEO
50696==m||// Lo       HANGUL SYLLABLE YE
50724==m||// Lo       HANGUL SYLLABLE O
50752==m||// Lo       HANGUL SYLLABLE WA
50780==m||// Lo       HANGUL SYLLABLE WAE
50808==m||// Lo       HANGUL SYLLABLE OE
50836==m||// Lo       HANGUL SYLLABLE YO
50864==m||// Lo       HANGUL SYLLABLE U
50892==m||// Lo       HANGUL SYLLABLE WEO
50920==m||// Lo       HANGUL SYLLABLE WE
50948==m||// Lo       HANGUL SYLLABLE WI
50976==m||// Lo       HANGUL SYLLABLE YU
51004==m||// Lo       HANGUL SYLLABLE EU
51032==m||// Lo       HANGUL SYLLABLE YI
51060==m||// Lo       HANGUL SYLLABLE I
51088==m||// Lo       HANGUL SYLLABLE JA
51116==m||// Lo       HANGUL SYLLABLE JAE
51144==m||// Lo       HANGUL SYLLABLE JYA
51172==m||// Lo       HANGUL SYLLABLE JYAE
51200==m||// Lo       HANGUL SYLLABLE JEO
51228==m||// Lo       HANGUL SYLLABLE JE
51256==m||// Lo       HANGUL SYLLABLE JYEO
51284==m||// Lo       HANGUL SYLLABLE JYE
51312==m||// Lo       HANGUL SYLLABLE JO
51340==m||// Lo       HANGUL SYLLABLE JWA
51368==m||// Lo       HANGUL SYLLABLE JWAE
51396==m||// Lo       HANGUL SYLLABLE JOE
51424==m||// Lo       HANGUL SYLLABLE JYO
51452==m||// Lo       HANGUL SYLLABLE JU
51480==m||// Lo       HANGUL SYLLABLE JWEO
51508==m||// Lo       HANGUL SYLLABLE JWE
51536==m||// Lo       HANGUL SYLLABLE JWI
51564==m||// Lo       HANGUL SYLLABLE JYU
51592==m||// Lo       HANGUL SYLLABLE JEU
51620==m||// Lo       HANGUL SYLLABLE JYI
51648==m||// Lo       HANGUL SYLLABLE JI
51676==m||// Lo       HANGUL SYLLABLE JJA
51704==m||// Lo       HANGUL SYLLABLE JJAE
51732==m||// Lo       HANGUL SYLLABLE JJYA
51760==m||// Lo       HANGUL SYLLABLE JJYAE
51788==m||// Lo       HANGUL SYLLABLE JJEO
51816==m||// Lo       HANGUL SYLLABLE JJE
51844==m||// Lo       HANGUL SYLLABLE JJYEO
51872==m||// Lo       HANGUL SYLLABLE JJYE
51900==m||// Lo       HANGUL SYLLABLE JJO
51928==m||// Lo       HANGUL SYLLABLE JJWA
51956==m||// Lo       HANGUL SYLLABLE JJWAE
51984==m||// Lo       HANGUL SYLLABLE JJOE
52012==m||// Lo       HANGUL SYLLABLE JJYO
52040==m||// Lo       HANGUL SYLLABLE JJU
52068==m||// Lo       HANGUL SYLLABLE JJWEO
52096==m||// Lo       HANGUL SYLLABLE JJWE
52124==m||// Lo       HANGUL SYLLABLE JJWI
52152==m||// Lo       HANGUL SYLLABLE JJYU
52180==m||// Lo       HANGUL SYLLABLE JJEU
52208==m||// Lo       HANGUL SYLLABLE JJYI
52236==m||// Lo       HANGUL SYLLABLE JJI
52264==m||// Lo       HANGUL SYLLABLE CA
52292==m||// Lo       HANGUL SYLLABLE CAE
52320==m||// Lo       HANGUL SYLLABLE CYA
52348==m||// Lo       HANGUL SYLLABLE CYAE
52376==m||// Lo       HANGUL SYLLABLE CEO
52404==m||// Lo       HANGUL SYLLABLE CE
52432==m||// Lo       HANGUL SYLLABLE CYEO
52460==m||// Lo       HANGUL SYLLABLE CYE
52488==m||// Lo       HANGUL SYLLABLE CO
52516==m||// Lo       HANGUL SYLLABLE CWA
52544==m||// Lo       HANGUL SYLLABLE CWAE
52572==m||// Lo       HANGUL SYLLABLE COE
52600==m||// Lo       HANGUL SYLLABLE CYO
52628==m||// Lo       HANGUL SYLLABLE CU
52656==m||// Lo       HANGUL SYLLABLE CWEO
52684==m||// Lo       HANGUL SYLLABLE CWE
52712==m||// Lo       HANGUL SYLLABLE CWI
52740==m||// Lo       HANGUL SYLLABLE CYU
52768==m||// Lo       HANGUL SYLLABLE CEU
52796==m||// Lo       HANGUL SYLLABLE CYI
52824==m||// Lo       HANGUL SYLLABLE CI
52852==m||// Lo       HANGUL SYLLABLE KA
52880==m||// Lo       HANGUL SYLLABLE KAE
52908==m||// Lo       HANGUL SYLLABLE KYA
52936==m||// Lo       HANGUL SYLLABLE KYAE
52964==m||// Lo       HANGUL SYLLABLE KEO
52992==m||// Lo       HANGUL SYLLABLE KE
53020==m||// Lo       HANGUL SYLLABLE KYEO
53048==m||// Lo       HANGUL SYLLABLE KYE
53076==m||// Lo       HANGUL SYLLABLE KO
53104==m||// Lo       HANGUL SYLLABLE KWA
53132==m||// Lo       HANGUL SYLLABLE KWAE
53160==m||// Lo       HANGUL SYLLABLE KOE
53188==m||// Lo       HANGUL SYLLABLE KYO
53216==m||// Lo       HANGUL SYLLABLE KU
53244==m||// Lo       HANGUL SYLLABLE KWEO
53272==m||// Lo       HANGUL SYLLABLE KWE
53300==m||// Lo       HANGUL SYLLABLE KWI
53328==m||// Lo       HANGUL SYLLABLE KYU
53356==m||// Lo       HANGUL SYLLABLE KEU
53384==m||// Lo       HANGUL SYLLABLE KYI
53412==m||// Lo       HANGUL SYLLABLE KI
53440==m||// Lo       HANGUL SYLLABLE TA
53468==m||// Lo       HANGUL SYLLABLE TAE
53496==m||// Lo       HANGUL SYLLABLE TYA
53524==m||// Lo       HANGUL SYLLABLE TYAE
53552==m||// Lo       HANGUL SYLLABLE TEO
53580==m||// Lo       HANGUL SYLLABLE TE
53608==m||// Lo       HANGUL SYLLABLE TYEO
53636==m||// Lo       HANGUL SYLLABLE TYE
53664==m||// Lo       HANGUL SYLLABLE TO
53692==m||// Lo       HANGUL SYLLABLE TWA
53720==m||// Lo       HANGUL SYLLABLE TWAE
53748==m||// Lo       HANGUL SYLLABLE TOE
53776==m||// Lo       HANGUL SYLLABLE TYO
53804==m||// Lo       HANGUL SYLLABLE TU
53832==m||// Lo       HANGUL SYLLABLE TWEO
53860==m||// Lo       HANGUL SYLLABLE TWE
53888==m||// Lo       HANGUL SYLLABLE TWI
53916==m||// Lo       HANGUL SYLLABLE TYU
53944==m||// Lo       HANGUL SYLLABLE TEU
53972==m||// Lo       HANGUL SYLLABLE TYI
54000==m||// Lo       HANGUL SYLLABLE TI
54028==m||// Lo       HANGUL SYLLABLE PA
54056==m||// Lo       HANGUL SYLLABLE PAE
54084==m||// Lo       HANGUL SYLLABLE PYA
54112==m||// Lo       HANGUL SYLLABLE PYAE
54140==m||// Lo       HANGUL SYLLABLE PEO
54168==m||// Lo       HANGUL SYLLABLE PE
54196==m||// Lo       HANGUL SYLLABLE PYEO
54224==m||// Lo       HANGUL SYLLABLE PYE
54252==m||// Lo       HANGUL SYLLABLE PO
54280==m||// Lo       HANGUL SYLLABLE PWA
54308==m||// Lo       HANGUL SYLLABLE PWAE
54336==m||// Lo       HANGUL SYLLABLE POE
54364==m||// Lo       HANGUL SYLLABLE PYO
54392==m||// Lo       HANGUL SYLLABLE PU
54420==m||// Lo       HANGUL SYLLABLE PWEO
54448==m||// Lo       HANGUL SYLLABLE PWE
54476==m||// Lo       HANGUL SYLLABLE PWI
54504==m||// Lo       HANGUL SYLLABLE PYU
54532==m||// Lo       HANGUL SYLLABLE PEU
54560==m||// Lo       HANGUL SYLLABLE PYI
54588==m||// Lo       HANGUL SYLLABLE PI
54616==m||// Lo       HANGUL SYLLABLE HA
54644==m||// Lo       HANGUL SYLLABLE HAE
54672==m||// Lo       HANGUL SYLLABLE HYA
54700==m||// Lo       HANGUL SYLLABLE HYAE
54728==m||// Lo       HANGUL SYLLABLE HEO
54756==m||// Lo       HANGUL SYLLABLE HE
54784==m||// Lo       HANGUL SYLLABLE HYEO
54812==m||// Lo       HANGUL SYLLABLE HYE
54840==m||// Lo       HANGUL SYLLABLE HO
54868==m||// Lo       HANGUL SYLLABLE HWA
54896==m||// Lo       HANGUL SYLLABLE HWAE
54924==m||// Lo       HANGUL SYLLABLE HOE
54952==m||// Lo       HANGUL SYLLABLE HYO
54980==m||// Lo       HANGUL SYLLABLE HU
55008==m||// Lo       HANGUL SYLLABLE HWEO
55036==m||// Lo       HANGUL SYLLABLE HWE
55064==m||// Lo       HANGUL SYLLABLE HWI
55092==m||// Lo       HANGUL SYLLABLE HYU
55120==m||// Lo       HANGUL SYLLABLE HEU
55148==m||// Lo       HANGUL SYLLABLE HYI
55176==m// Lo       HANGUL SYLLABLE HI
?u:44033<=m&&44059>=m||// Lo  [27] HANGUL SYLLABLE GAG..HANGUL SYLLABLE GAH
44061<=m&&44087>=m||// Lo  [27] HANGUL SYLLABLE GAEG..HANGUL SYLLABLE GAEH
44089<=m&&44115>=m||// Lo  [27] HANGUL SYLLABLE GYAG..HANGUL SYLLABLE GYAH
44117<=m&&44143>=m||// Lo  [27] HANGUL SYLLABLE GYAEG..HANGUL SYLLABLE GYAEH
44145<=m&&44171>=m||// Lo  [27] HANGUL SYLLABLE GEOG..HANGUL SYLLABLE GEOH
44173<=m&&44199>=m||// Lo  [27] HANGUL SYLLABLE GEG..HANGUL SYLLABLE GEH
44201<=m&&44227>=m||// Lo  [27] HANGUL SYLLABLE GYEOG..HANGUL SYLLABLE GYEOH
44229<=m&&44255>=m||// Lo  [27] HANGUL SYLLABLE GYEG..HANGUL SYLLABLE GYEH
44257<=m&&44283>=m||// Lo  [27] HANGUL SYLLABLE GOG..HANGUL SYLLABLE GOH
44285<=m&&44311>=m||// Lo  [27] HANGUL SYLLABLE GWAG..HANGUL SYLLABLE GWAH
44313<=m&&44339>=m||// Lo  [27] HANGUL SYLLABLE GWAEG..HANGUL SYLLABLE GWAEH
44341<=m&&44367>=m||// Lo  [27] HANGUL SYLLABLE GOEG..HANGUL SYLLABLE GOEH
44369<=m&&44395>=m||// Lo  [27] HANGUL SYLLABLE GYOG..HANGUL SYLLABLE GYOH
44397<=m&&44423>=m||// Lo  [27] HANGUL SYLLABLE GUG..HANGUL SYLLABLE GUH
44425<=m&&44451>=m||// Lo  [27] HANGUL SYLLABLE GWEOG..HANGUL SYLLABLE GWEOH
44453<=m&&44479>=m||// Lo  [27] HANGUL SYLLABLE GWEG..HANGUL SYLLABLE GWEH
44481<=m&&44507>=m||// Lo  [27] HANGUL SYLLABLE GWIG..HANGUL SYLLABLE GWIH
44509<=m&&44535>=m||// Lo  [27] HANGUL SYLLABLE GYUG..HANGUL SYLLABLE GYUH
44537<=m&&44563>=m||// Lo  [27] HANGUL SYLLABLE GEUG..HANGUL SYLLABLE GEUH
44565<=m&&44591>=m||// Lo  [27] HANGUL SYLLABLE GYIG..HANGUL SYLLABLE GYIH
44593<=m&&44619>=m||// Lo  [27] HANGUL SYLLABLE GIG..HANGUL SYLLABLE GIH
44621<=m&&44647>=m||// Lo  [27] HANGUL SYLLABLE GGAG..HANGUL SYLLABLE GGAH
44649<=m&&44675>=m||// Lo  [27] HANGUL SYLLABLE GGAEG..HANGUL SYLLABLE GGAEH
44677<=m&&44703>=m||// Lo  [27] HANGUL SYLLABLE GGYAG..HANGUL SYLLABLE GGYAH
44705<=m&&44731>=m||// Lo  [27] HANGUL SYLLABLE GGYAEG..HANGUL SYLLABLE GGYAEH
44733<=m&&44759>=m||// Lo  [27] HANGUL SYLLABLE GGEOG..HANGUL SYLLABLE GGEOH
44761<=m&&44787>=m||// Lo  [27] HANGUL SYLLABLE GGEG..HANGUL SYLLABLE GGEH
44789<=m&&44815>=m||// Lo  [27] HANGUL SYLLABLE GGYEOG..HANGUL SYLLABLE GGYEOH
44817<=m&&44843>=m||// Lo  [27] HANGUL SYLLABLE GGYEG..HANGUL SYLLABLE GGYEH
44845<=m&&44871>=m||// Lo  [27] HANGUL SYLLABLE GGOG..HANGUL SYLLABLE GGOH
44873<=m&&44899>=m||// Lo  [27] HANGUL SYLLABLE GGWAG..HANGUL SYLLABLE GGWAH
44901<=m&&44927>=m||// Lo  [27] HANGUL SYLLABLE GGWAEG..HANGUL SYLLABLE GGWAEH
44929<=m&&44955>=m||// Lo  [27] HANGUL SYLLABLE GGOEG..HANGUL SYLLABLE GGOEH
44957<=m&&44983>=m||// Lo  [27] HANGUL SYLLABLE GGYOG..HANGUL SYLLABLE GGYOH
44985<=m&&45011>=m||// Lo  [27] HANGUL SYLLABLE GGUG..HANGUL SYLLABLE GGUH
45013<=m&&45039>=m||// Lo  [27] HANGUL SYLLABLE GGWEOG..HANGUL SYLLABLE GGWEOH
45041<=m&&45067>=m||// Lo  [27] HANGUL SYLLABLE GGWEG..HANGUL SYLLABLE GGWEH
45069<=m&&45095>=m||// Lo  [27] HANGUL SYLLABLE GGWIG..HANGUL SYLLABLE GGWIH
45097<=m&&45123>=m||// Lo  [27] HANGUL SYLLABLE GGYUG..HANGUL SYLLABLE GGYUH
45125<=m&&45151>=m||// Lo  [27] HANGUL SYLLABLE GGEUG..HANGUL SYLLABLE GGEUH
45153<=m&&45179>=m||// Lo  [27] HANGUL SYLLABLE GGYIG..HANGUL SYLLABLE GGYIH
45181<=m&&45207>=m||// Lo  [27] HANGUL SYLLABLE GGIG..HANGUL SYLLABLE GGIH
45209<=m&&45235>=m||// Lo  [27] HANGUL SYLLABLE NAG..HANGUL SYLLABLE NAH
45237<=m&&45263>=m||// Lo  [27] HANGUL SYLLABLE NAEG..HANGUL SYLLABLE NAEH
45265<=m&&45291>=m||// Lo  [27] HANGUL SYLLABLE NYAG..HANGUL SYLLABLE NYAH
45293<=m&&45319>=m||// Lo  [27] HANGUL SYLLABLE NYAEG..HANGUL SYLLABLE NYAEH
45321<=m&&45347>=m||// Lo  [27] HANGUL SYLLABLE NEOG..HANGUL SYLLABLE NEOH
45349<=m&&45375>=m||// Lo  [27] HANGUL SYLLABLE NEG..HANGUL SYLLABLE NEH
45377<=m&&45403>=m||// Lo  [27] HANGUL SYLLABLE NYEOG..HANGUL SYLLABLE NYEOH
45405<=m&&45431>=m||// Lo  [27] HANGUL SYLLABLE NYEG..HANGUL SYLLABLE NYEH
45433<=m&&45459>=m||// Lo  [27] HANGUL SYLLABLE NOG..HANGUL SYLLABLE NOH
45461<=m&&45487>=m||// Lo  [27] HANGUL SYLLABLE NWAG..HANGUL SYLLABLE NWAH
45489<=m&&45515>=m||// Lo  [27] HANGUL SYLLABLE NWAEG..HANGUL SYLLABLE NWAEH
45517<=m&&45543>=m||// Lo  [27] HANGUL SYLLABLE NOEG..HANGUL SYLLABLE NOEH
45545<=m&&45571>=m||// Lo  [27] HANGUL SYLLABLE NYOG..HANGUL SYLLABLE NYOH
45573<=m&&45599>=m||// Lo  [27] HANGUL SYLLABLE NUG..HANGUL SYLLABLE NUH
45601<=m&&45627>=m||// Lo  [27] HANGUL SYLLABLE NWEOG..HANGUL SYLLABLE NWEOH
45629<=m&&45655>=m||// Lo  [27] HANGUL SYLLABLE NWEG..HANGUL SYLLABLE NWEH
45657<=m&&45683>=m||// Lo  [27] HANGUL SYLLABLE NWIG..HANGUL SYLLABLE NWIH
45685<=m&&45711>=m||// Lo  [27] HANGUL SYLLABLE NYUG..HANGUL SYLLABLE NYUH
45713<=m&&45739>=m||// Lo  [27] HANGUL SYLLABLE NEUG..HANGUL SYLLABLE NEUH
45741<=m&&45767>=m||// Lo  [27] HANGUL SYLLABLE NYIG..HANGUL SYLLABLE NYIH
45769<=m&&45795>=m||// Lo  [27] HANGUL SYLLABLE NIG..HANGUL SYLLABLE NIH
45797<=m&&45823>=m||// Lo  [27] HANGUL SYLLABLE DAG..HANGUL SYLLABLE DAH
45825<=m&&45851>=m||// Lo  [27] HANGUL SYLLABLE DAEG..HANGUL SYLLABLE DAEH
45853<=m&&45879>=m||// Lo  [27] HANGUL SYLLABLE DYAG..HANGUL SYLLABLE DYAH
45881<=m&&45907>=m||// Lo  [27] HANGUL SYLLABLE DYAEG..HANGUL SYLLABLE DYAEH
45909<=m&&45935>=m||// Lo  [27] HANGUL SYLLABLE DEOG..HANGUL SYLLABLE DEOH
45937<=m&&45963>=m||// Lo  [27] HANGUL SYLLABLE DEG..HANGUL SYLLABLE DEH
45965<=m&&45991>=m||// Lo  [27] HANGUL SYLLABLE DYEOG..HANGUL SYLLABLE DYEOH
45993<=m&&46019>=m||// Lo  [27] HANGUL SYLLABLE DYEG..HANGUL SYLLABLE DYEH
46021<=m&&46047>=m||// Lo  [27] HANGUL SYLLABLE DOG..HANGUL SYLLABLE DOH
46049<=m&&46075>=m||// Lo  [27] HANGUL SYLLABLE DWAG..HANGUL SYLLABLE DWAH
46077<=m&&46103>=m||// Lo  [27] HANGUL SYLLABLE DWAEG..HANGUL SYLLABLE DWAEH
46105<=m&&46131>=m||// Lo  [27] HANGUL SYLLABLE DOEG..HANGUL SYLLABLE DOEH
46133<=m&&46159>=m||// Lo  [27] HANGUL SYLLABLE DYOG..HANGUL SYLLABLE DYOH
46161<=m&&46187>=m||// Lo  [27] HANGUL SYLLABLE DUG..HANGUL SYLLABLE DUH
46189<=m&&46215>=m||// Lo  [27] HANGUL SYLLABLE DWEOG..HANGUL SYLLABLE DWEOH
46217<=m&&46243>=m||// Lo  [27] HANGUL SYLLABLE DWEG..HANGUL SYLLABLE DWEH
46245<=m&&46271>=m||// Lo  [27] HANGUL SYLLABLE DWIG..HANGUL SYLLABLE DWIH
46273<=m&&46299>=m||// Lo  [27] HANGUL SYLLABLE DYUG..HANGUL SYLLABLE DYUH
46301<=m&&46327>=m||// Lo  [27] HANGUL SYLLABLE DEUG..HANGUL SYLLABLE DEUH
46329<=m&&46355>=m||// Lo  [27] HANGUL SYLLABLE DYIG..HANGUL SYLLABLE DYIH
46357<=m&&46383>=m||// Lo  [27] HANGUL SYLLABLE DIG..HANGUL SYLLABLE DIH
46385<=m&&46411>=m||// Lo  [27] HANGUL SYLLABLE DDAG..HANGUL SYLLABLE DDAH
46413<=m&&46439>=m||// Lo  [27] HANGUL SYLLABLE DDAEG..HANGUL SYLLABLE DDAEH
46441<=m&&46467>=m||// Lo  [27] HANGUL SYLLABLE DDYAG..HANGUL SYLLABLE DDYAH
46469<=m&&46495>=m||// Lo  [27] HANGUL SYLLABLE DDYAEG..HANGUL SYLLABLE DDYAEH
46497<=m&&46523>=m||// Lo  [27] HANGUL SYLLABLE DDEOG..HANGUL SYLLABLE DDEOH
46525<=m&&46551>=m||// Lo  [27] HANGUL SYLLABLE DDEG..HANGUL SYLLABLE DDEH
46553<=m&&46579>=m||// Lo  [27] HANGUL SYLLABLE DDYEOG..HANGUL SYLLABLE DDYEOH
46581<=m&&46607>=m||// Lo  [27] HANGUL SYLLABLE DDYEG..HANGUL SYLLABLE DDYEH
46609<=m&&46635>=m||// Lo  [27] HANGUL SYLLABLE DDOG..HANGUL SYLLABLE DDOH
46637<=m&&46663>=m||// Lo  [27] HANGUL SYLLABLE DDWAG..HANGUL SYLLABLE DDWAH
46665<=m&&46691>=m||// Lo  [27] HANGUL SYLLABLE DDWAEG..HANGUL SYLLABLE DDWAEH
46693<=m&&46719>=m||// Lo  [27] HANGUL SYLLABLE DDOEG..HANGUL SYLLABLE DDOEH
46721<=m&&46747>=m||// Lo  [27] HANGUL SYLLABLE DDYOG..HANGUL SYLLABLE DDYOH
46749<=m&&46775>=m||// Lo  [27] HANGUL SYLLABLE DDUG..HANGUL SYLLABLE DDUH
46777<=m&&46803>=m||// Lo  [27] HANGUL SYLLABLE DDWEOG..HANGUL SYLLABLE DDWEOH
46805<=m&&46831>=m||// Lo  [27] HANGUL SYLLABLE DDWEG..HANGUL SYLLABLE DDWEH
46833<=m&&46859>=m||// Lo  [27] HANGUL SYLLABLE DDWIG..HANGUL SYLLABLE DDWIH
46861<=m&&46887>=m||// Lo  [27] HANGUL SYLLABLE DDYUG..HANGUL SYLLABLE DDYUH
46889<=m&&46915>=m||// Lo  [27] HANGUL SYLLABLE DDEUG..HANGUL SYLLABLE DDEUH
46917<=m&&46943>=m||// Lo  [27] HANGUL SYLLABLE DDYIG..HANGUL SYLLABLE DDYIH
46945<=m&&46971>=m||// Lo  [27] HANGUL SYLLABLE DDIG..HANGUL SYLLABLE DDIH
46973<=m&&46999>=m||// Lo  [27] HANGUL SYLLABLE RAG..HANGUL SYLLABLE RAH
47001<=m&&47027>=m||// Lo  [27] HANGUL SYLLABLE RAEG..HANGUL SYLLABLE RAEH
47029<=m&&47055>=m||// Lo  [27] HANGUL SYLLABLE RYAG..HANGUL SYLLABLE RYAH
47057<=m&&47083>=m||// Lo  [27] HANGUL SYLLABLE RYAEG..HANGUL SYLLABLE RYAEH
47085<=m&&47111>=m||// Lo  [27] HANGUL SYLLABLE REOG..HANGUL SYLLABLE REOH
47113<=m&&47139>=m||// Lo  [27] HANGUL SYLLABLE REG..HANGUL SYLLABLE REH
47141<=m&&47167>=m||// Lo  [27] HANGUL SYLLABLE RYEOG..HANGUL SYLLABLE RYEOH
47169<=m&&47195>=m||// Lo  [27] HANGUL SYLLABLE RYEG..HANGUL SYLLABLE RYEH
47197<=m&&47223>=m||// Lo  [27] HANGUL SYLLABLE ROG..HANGUL SYLLABLE ROH
47225<=m&&47251>=m||// Lo  [27] HANGUL SYLLABLE RWAG..HANGUL SYLLABLE RWAH
47253<=m&&47279>=m||// Lo  [27] HANGUL SYLLABLE RWAEG..HANGUL SYLLABLE RWAEH
47281<=m&&47307>=m||// Lo  [27] HANGUL SYLLABLE ROEG..HANGUL SYLLABLE ROEH
47309<=m&&47335>=m||// Lo  [27] HANGUL SYLLABLE RYOG..HANGUL SYLLABLE RYOH
47337<=m&&47363>=m||// Lo  [27] HANGUL SYLLABLE RUG..HANGUL SYLLABLE RUH
47365<=m&&47391>=m||// Lo  [27] HANGUL SYLLABLE RWEOG..HANGUL SYLLABLE RWEOH
47393<=m&&47419>=m||// Lo  [27] HANGUL SYLLABLE RWEG..HANGUL SYLLABLE RWEH
47421<=m&&47447>=m||// Lo  [27] HANGUL SYLLABLE RWIG..HANGUL SYLLABLE RWIH
47449<=m&&47475>=m||// Lo  [27] HANGUL SYLLABLE RYUG..HANGUL SYLLABLE RYUH
47477<=m&&47503>=m||// Lo  [27] HANGUL SYLLABLE REUG..HANGUL SYLLABLE REUH
47505<=m&&47531>=m||// Lo  [27] HANGUL SYLLABLE RYIG..HANGUL SYLLABLE RYIH
47533<=m&&47559>=m||// Lo  [27] HANGUL SYLLABLE RIG..HANGUL SYLLABLE RIH
47561<=m&&47587>=m||// Lo  [27] HANGUL SYLLABLE MAG..HANGUL SYLLABLE MAH
47589<=m&&47615>=m||// Lo  [27] HANGUL SYLLABLE MAEG..HANGUL SYLLABLE MAEH
47617<=m&&47643>=m||// Lo  [27] HANGUL SYLLABLE MYAG..HANGUL SYLLABLE MYAH
47645<=m&&47671>=m||// Lo  [27] HANGUL SYLLABLE MYAEG..HANGUL SYLLABLE MYAEH
47673<=m&&47699>=m||// Lo  [27] HANGUL SYLLABLE MEOG..HANGUL SYLLABLE MEOH
47701<=m&&47727>=m||// Lo  [27] HANGUL SYLLABLE MEG..HANGUL SYLLABLE MEH
47729<=m&&47755>=m||// Lo  [27] HANGUL SYLLABLE MYEOG..HANGUL SYLLABLE MYEOH
47757<=m&&47783>=m||// Lo  [27] HANGUL SYLLABLE MYEG..HANGUL SYLLABLE MYEH
47785<=m&&47811>=m||// Lo  [27] HANGUL SYLLABLE MOG..HANGUL SYLLABLE MOH
47813<=m&&47839>=m||// Lo  [27] HANGUL SYLLABLE MWAG..HANGUL SYLLABLE MWAH
47841<=m&&47867>=m||// Lo  [27] HANGUL SYLLABLE MWAEG..HANGUL SYLLABLE MWAEH
47869<=m&&47895>=m||// Lo  [27] HANGUL SYLLABLE MOEG..HANGUL SYLLABLE MOEH
47897<=m&&47923>=m||// Lo  [27] HANGUL SYLLABLE MYOG..HANGUL SYLLABLE MYOH
47925<=m&&47951>=m||// Lo  [27] HANGUL SYLLABLE MUG..HANGUL SYLLABLE MUH
47953<=m&&47979>=m||// Lo  [27] HANGUL SYLLABLE MWEOG..HANGUL SYLLABLE MWEOH
47981<=m&&48007>=m||// Lo  [27] HANGUL SYLLABLE MWEG..HANGUL SYLLABLE MWEH
48009<=m&&48035>=m||// Lo  [27] HANGUL SYLLABLE MWIG..HANGUL SYLLABLE MWIH
48037<=m&&48063>=m||// Lo  [27] HANGUL SYLLABLE MYUG..HANGUL SYLLABLE MYUH
48065<=m&&48091>=m||// Lo  [27] HANGUL SYLLABLE MEUG..HANGUL SYLLABLE MEUH
48093<=m&&48119>=m||// Lo  [27] HANGUL SYLLABLE MYIG..HANGUL SYLLABLE MYIH
48121<=m&&48147>=m||// Lo  [27] HANGUL SYLLABLE MIG..HANGUL SYLLABLE MIH
48149<=m&&48175>=m||// Lo  [27] HANGUL SYLLABLE BAG..HANGUL SYLLABLE BAH
48177<=m&&48203>=m||// Lo  [27] HANGUL SYLLABLE BAEG..HANGUL SYLLABLE BAEH
48205<=m&&48231>=m||// Lo  [27] HANGUL SYLLABLE BYAG..HANGUL SYLLABLE BYAH
48233<=m&&48259>=m||// Lo  [27] HANGUL SYLLABLE BYAEG..HANGUL SYLLABLE BYAEH
48261<=m&&48287>=m||// Lo  [27] HANGUL SYLLABLE BEOG..HANGUL SYLLABLE BEOH
48289<=m&&48315>=m||// Lo  [27] HANGUL SYLLABLE BEG..HANGUL SYLLABLE BEH
48317<=m&&48343>=m||// Lo  [27] HANGUL SYLLABLE BYEOG..HANGUL SYLLABLE BYEOH
48345<=m&&48371>=m||// Lo  [27] HANGUL SYLLABLE BYEG..HANGUL SYLLABLE BYEH
48373<=m&&48399>=m||// Lo  [27] HANGUL SYLLABLE BOG..HANGUL SYLLABLE BOH
48401<=m&&48427>=m||// Lo  [27] HANGUL SYLLABLE BWAG..HANGUL SYLLABLE BWAH
48429<=m&&48455>=m||// Lo  [27] HANGUL SYLLABLE BWAEG..HANGUL SYLLABLE BWAEH
48457<=m&&48483>=m||// Lo  [27] HANGUL SYLLABLE BOEG..HANGUL SYLLABLE BOEH
48485<=m&&48511>=m||// Lo  [27] HANGUL SYLLABLE BYOG..HANGUL SYLLABLE BYOH
48513<=m&&48539>=m||// Lo  [27] HANGUL SYLLABLE BUG..HANGUL SYLLABLE BUH
48541<=m&&48567>=m||// Lo  [27] HANGUL SYLLABLE BWEOG..HANGUL SYLLABLE BWEOH
48569<=m&&48595>=m||// Lo  [27] HANGUL SYLLABLE BWEG..HANGUL SYLLABLE BWEH
48597<=m&&48623>=m||// Lo  [27] HANGUL SYLLABLE BWIG..HANGUL SYLLABLE BWIH
48625<=m&&48651>=m||// Lo  [27] HANGUL SYLLABLE BYUG..HANGUL SYLLABLE BYUH
48653<=m&&48679>=m||// Lo  [27] HANGUL SYLLABLE BEUG..HANGUL SYLLABLE BEUH
48681<=m&&48707>=m||// Lo  [27] HANGUL SYLLABLE BYIG..HANGUL SYLLABLE BYIH
48709<=m&&48735>=m||// Lo  [27] HANGUL SYLLABLE BIG..HANGUL SYLLABLE BIH
48737<=m&&48763>=m||// Lo  [27] HANGUL SYLLABLE BBAG..HANGUL SYLLABLE BBAH
48765<=m&&48791>=m||// Lo  [27] HANGUL SYLLABLE BBAEG..HANGUL SYLLABLE BBAEH
48793<=m&&48819>=m||// Lo  [27] HANGUL SYLLABLE BBYAG..HANGUL SYLLABLE BBYAH
48821<=m&&48847>=m||// Lo  [27] HANGUL SYLLABLE BBYAEG..HANGUL SYLLABLE BBYAEH
48849<=m&&48875>=m||// Lo  [27] HANGUL SYLLABLE BBEOG..HANGUL SYLLABLE BBEOH
48877<=m&&48903>=m||// Lo  [27] HANGUL SYLLABLE BBEG..HANGUL SYLLABLE BBEH
48905<=m&&48931>=m||// Lo  [27] HANGUL SYLLABLE BBYEOG..HANGUL SYLLABLE BBYEOH
48933<=m&&48959>=m||// Lo  [27] HANGUL SYLLABLE BBYEG..HANGUL SYLLABLE BBYEH
48961<=m&&48987>=m||// Lo  [27] HANGUL SYLLABLE BBOG..HANGUL SYLLABLE BBOH
48989<=m&&49015>=m||// Lo  [27] HANGUL SYLLABLE BBWAG..HANGUL SYLLABLE BBWAH
49017<=m&&49043>=m||// Lo  [27] HANGUL SYLLABLE BBWAEG..HANGUL SYLLABLE BBWAEH
49045<=m&&49071>=m||// Lo  [27] HANGUL SYLLABLE BBOEG..HANGUL SYLLABLE BBOEH
49073<=m&&49099>=m||// Lo  [27] HANGUL SYLLABLE BBYOG..HANGUL SYLLABLE BBYOH
49101<=m&&49127>=m||// Lo  [27] HANGUL SYLLABLE BBUG..HANGUL SYLLABLE BBUH
49129<=m&&49155>=m||// Lo  [27] HANGUL SYLLABLE BBWEOG..HANGUL SYLLABLE BBWEOH
49157<=m&&49183>=m||// Lo  [27] HANGUL SYLLABLE BBWEG..HANGUL SYLLABLE BBWEH
49185<=m&&49211>=m||// Lo  [27] HANGUL SYLLABLE BBWIG..HANGUL SYLLABLE BBWIH
49213<=m&&49239>=m||// Lo  [27] HANGUL SYLLABLE BBYUG..HANGUL SYLLABLE BBYUH
49241<=m&&49267>=m||// Lo  [27] HANGUL SYLLABLE BBEUG..HANGUL SYLLABLE BBEUH
49269<=m&&49295>=m||// Lo  [27] HANGUL SYLLABLE BBYIG..HANGUL SYLLABLE BBYIH
49297<=m&&49323>=m||// Lo  [27] HANGUL SYLLABLE BBIG..HANGUL SYLLABLE BBIH
49325<=m&&49351>=m||// Lo  [27] HANGUL SYLLABLE SAG..HANGUL SYLLABLE SAH
49353<=m&&49379>=m||// Lo  [27] HANGUL SYLLABLE SAEG..HANGUL SYLLABLE SAEH
49381<=m&&49407>=m||// Lo  [27] HANGUL SYLLABLE SYAG..HANGUL SYLLABLE SYAH
49409<=m&&49435>=m||// Lo  [27] HANGUL SYLLABLE SYAEG..HANGUL SYLLABLE SYAEH
49437<=m&&49463>=m||// Lo  [27] HANGUL SYLLABLE SEOG..HANGUL SYLLABLE SEOH
49465<=m&&49491>=m||// Lo  [27] HANGUL SYLLABLE SEG..HANGUL SYLLABLE SEH
49493<=m&&49519>=m||// Lo  [27] HANGUL SYLLABLE SYEOG..HANGUL SYLLABLE SYEOH
49521<=m&&49547>=m||// Lo  [27] HANGUL SYLLABLE SYEG..HANGUL SYLLABLE SYEH
49549<=m&&49575>=m||// Lo  [27] HANGUL SYLLABLE SOG..HANGUL SYLLABLE SOH
49577<=m&&49603>=m||// Lo  [27] HANGUL SYLLABLE SWAG..HANGUL SYLLABLE SWAH
49605<=m&&49631>=m||// Lo  [27] HANGUL SYLLABLE SWAEG..HANGUL SYLLABLE SWAEH
49633<=m&&49659>=m||// Lo  [27] HANGUL SYLLABLE SOEG..HANGUL SYLLABLE SOEH
49661<=m&&49687>=m||// Lo  [27] HANGUL SYLLABLE SYOG..HANGUL SYLLABLE SYOH
49689<=m&&49715>=m||// Lo  [27] HANGUL SYLLABLE SUG..HANGUL SYLLABLE SUH
49717<=m&&49743>=m||// Lo  [27] HANGUL SYLLABLE SWEOG..HANGUL SYLLABLE SWEOH
49745<=m&&49771>=m||// Lo  [27] HANGUL SYLLABLE SWEG..HANGUL SYLLABLE SWEH
49773<=m&&49799>=m||// Lo  [27] HANGUL SYLLABLE SWIG..HANGUL SYLLABLE SWIH
49801<=m&&49827>=m||// Lo  [27] HANGUL SYLLABLE SYUG..HANGUL SYLLABLE SYUH
49829<=m&&49855>=m||// Lo  [27] HANGUL SYLLABLE SEUG..HANGUL SYLLABLE SEUH
49857<=m&&49883>=m||// Lo  [27] HANGUL SYLLABLE SYIG..HANGUL SYLLABLE SYIH
49885<=m&&49911>=m||// Lo  [27] HANGUL SYLLABLE SIG..HANGUL SYLLABLE SIH
49913<=m&&49939>=m||// Lo  [27] HANGUL SYLLABLE SSAG..HANGUL SYLLABLE SSAH
49941<=m&&49967>=m||// Lo  [27] HANGUL SYLLABLE SSAEG..HANGUL SYLLABLE SSAEH
49969<=m&&49995>=m||// Lo  [27] HANGUL SYLLABLE SSYAG..HANGUL SYLLABLE SSYAH
49997<=m&&50023>=m||// Lo  [27] HANGUL SYLLABLE SSYAEG..HANGUL SYLLABLE SSYAEH
50025<=m&&50051>=m||// Lo  [27] HANGUL SYLLABLE SSEOG..HANGUL SYLLABLE SSEOH
50053<=m&&50079>=m||// Lo  [27] HANGUL SYLLABLE SSEG..HANGUL SYLLABLE SSEH
50081<=m&&50107>=m||// Lo  [27] HANGUL SYLLABLE SSYEOG..HANGUL SYLLABLE SSYEOH
50109<=m&&50135>=m||// Lo  [27] HANGUL SYLLABLE SSYEG..HANGUL SYLLABLE SSYEH
50137<=m&&50163>=m||// Lo  [27] HANGUL SYLLABLE SSOG..HANGUL SYLLABLE SSOH
50165<=m&&50191>=m||// Lo  [27] HANGUL SYLLABLE SSWAG..HANGUL SYLLABLE SSWAH
50193<=m&&50219>=m||// Lo  [27] HANGUL SYLLABLE SSWAEG..HANGUL SYLLABLE SSWAEH
50221<=m&&50247>=m||// Lo  [27] HANGUL SYLLABLE SSOEG..HANGUL SYLLABLE SSOEH
50249<=m&&50275>=m||// Lo  [27] HANGUL SYLLABLE SSYOG..HANGUL SYLLABLE SSYOH
50277<=m&&50303>=m||// Lo  [27] HANGUL SYLLABLE SSUG..HANGUL SYLLABLE SSUH
50305<=m&&50331>=m||// Lo  [27] HANGUL SYLLABLE SSWEOG..HANGUL SYLLABLE SSWEOH
50333<=m&&50359>=m||// Lo  [27] HANGUL SYLLABLE SSWEG..HANGUL SYLLABLE SSWEH
50361<=m&&50387>=m||// Lo  [27] HANGUL SYLLABLE SSWIG..HANGUL SYLLABLE SSWIH
50389<=m&&50415>=m||// Lo  [27] HANGUL SYLLABLE SSYUG..HANGUL SYLLABLE SSYUH
50417<=m&&50443>=m||// Lo  [27] HANGUL SYLLABLE SSEUG..HANGUL SYLLABLE SSEUH
50445<=m&&50471>=m||// Lo  [27] HANGUL SYLLABLE SSYIG..HANGUL SYLLABLE SSYIH
50473<=m&&50499>=m||// Lo  [27] HANGUL SYLLABLE SSIG..HANGUL SYLLABLE SSIH
50501<=m&&50527>=m||// Lo  [27] HANGUL SYLLABLE AG..HANGUL SYLLABLE AH
50529<=m&&50555>=m||// Lo  [27] HANGUL SYLLABLE AEG..HANGUL SYLLABLE AEH
50557<=m&&50583>=m||// Lo  [27] HANGUL SYLLABLE YAG..HANGUL SYLLABLE YAH
50585<=m&&50611>=m||// Lo  [27] HANGUL SYLLABLE YAEG..HANGUL SYLLABLE YAEH
50613<=m&&50639>=m||// Lo  [27] HANGUL SYLLABLE EOG..HANGUL SYLLABLE EOH
50641<=m&&50667>=m||// Lo  [27] HANGUL SYLLABLE EG..HANGUL SYLLABLE EH
50669<=m&&50695>=m||// Lo  [27] HANGUL SYLLABLE YEOG..HANGUL SYLLABLE YEOH
50697<=m&&50723>=m||// Lo  [27] HANGUL SYLLABLE YEG..HANGUL SYLLABLE YEH
50725<=m&&50751>=m||// Lo  [27] HANGUL SYLLABLE OG..HANGUL SYLLABLE OH
50753<=m&&50779>=m||// Lo  [27] HANGUL SYLLABLE WAG..HANGUL SYLLABLE WAH
50781<=m&&50807>=m||// Lo  [27] HANGUL SYLLABLE WAEG..HANGUL SYLLABLE WAEH
50809<=m&&50835>=m||// Lo  [27] HANGUL SYLLABLE OEG..HANGUL SYLLABLE OEH
50837<=m&&50863>=m||// Lo  [27] HANGUL SYLLABLE YOG..HANGUL SYLLABLE YOH
50865<=m&&50891>=m||// Lo  [27] HANGUL SYLLABLE UG..HANGUL SYLLABLE UH
50893<=m&&50919>=m||// Lo  [27] HANGUL SYLLABLE WEOG..HANGUL SYLLABLE WEOH
50921<=m&&50947>=m||// Lo  [27] HANGUL SYLLABLE WEG..HANGUL SYLLABLE WEH
50949<=m&&50975>=m||// Lo  [27] HANGUL SYLLABLE WIG..HANGUL SYLLABLE WIH
50977<=m&&51003>=m||// Lo  [27] HANGUL SYLLABLE YUG..HANGUL SYLLABLE YUH
51005<=m&&51031>=m||// Lo  [27] HANGUL SYLLABLE EUG..HANGUL SYLLABLE EUH
51033<=m&&51059>=m||// Lo  [27] HANGUL SYLLABLE YIG..HANGUL SYLLABLE YIH
51061<=m&&51087>=m||// Lo  [27] HANGUL SYLLABLE IG..HANGUL SYLLABLE IH
51089<=m&&51115>=m||// Lo  [27] HANGUL SYLLABLE JAG..HANGUL SYLLABLE JAH
51117<=m&&51143>=m||// Lo  [27] HANGUL SYLLABLE JAEG..HANGUL SYLLABLE JAEH
51145<=m&&51171>=m||// Lo  [27] HANGUL SYLLABLE JYAG..HANGUL SYLLABLE JYAH
51173<=m&&51199>=m||// Lo  [27] HANGUL SYLLABLE JYAEG..HANGUL SYLLABLE JYAEH
51201<=m&&51227>=m||// Lo  [27] HANGUL SYLLABLE JEOG..HANGUL SYLLABLE JEOH
51229<=m&&51255>=m||// Lo  [27] HANGUL SYLLABLE JEG..HANGUL SYLLABLE JEH
51257<=m&&51283>=m||// Lo  [27] HANGUL SYLLABLE JYEOG..HANGUL SYLLABLE JYEOH
51285<=m&&51311>=m||// Lo  [27] HANGUL SYLLABLE JYEG..HANGUL SYLLABLE JYEH
51313<=m&&51339>=m||// Lo  [27] HANGUL SYLLABLE JOG..HANGUL SYLLABLE JOH
51341<=m&&51367>=m||// Lo  [27] HANGUL SYLLABLE JWAG..HANGUL SYLLABLE JWAH
51369<=m&&51395>=m||// Lo  [27] HANGUL SYLLABLE JWAEG..HANGUL SYLLABLE JWAEH
51397<=m&&51423>=m||// Lo  [27] HANGUL SYLLABLE JOEG..HANGUL SYLLABLE JOEH
51425<=m&&51451>=m||// Lo  [27] HANGUL SYLLABLE JYOG..HANGUL SYLLABLE JYOH
51453<=m&&51479>=m||// Lo  [27] HANGUL SYLLABLE JUG..HANGUL SYLLABLE JUH
51481<=m&&51507>=m||// Lo  [27] HANGUL SYLLABLE JWEOG..HANGUL SYLLABLE JWEOH
51509<=m&&51535>=m||// Lo  [27] HANGUL SYLLABLE JWEG..HANGUL SYLLABLE JWEH
51537<=m&&51563>=m||// Lo  [27] HANGUL SYLLABLE JWIG..HANGUL SYLLABLE JWIH
51565<=m&&51591>=m||// Lo  [27] HANGUL SYLLABLE JYUG..HANGUL SYLLABLE JYUH
51593<=m&&51619>=m||// Lo  [27] HANGUL SYLLABLE JEUG..HANGUL SYLLABLE JEUH
51621<=m&&51647>=m||// Lo  [27] HANGUL SYLLABLE JYIG..HANGUL SYLLABLE JYIH
51649<=m&&51675>=m||// Lo  [27] HANGUL SYLLABLE JIG..HANGUL SYLLABLE JIH
51677<=m&&51703>=m||// Lo  [27] HANGUL SYLLABLE JJAG..HANGUL SYLLABLE JJAH
51705<=m&&51731>=m||// Lo  [27] HANGUL SYLLABLE JJAEG..HANGUL SYLLABLE JJAEH
51733<=m&&51759>=m||// Lo  [27] HANGUL SYLLABLE JJYAG..HANGUL SYLLABLE JJYAH
51761<=m&&51787>=m||// Lo  [27] HANGUL SYLLABLE JJYAEG..HANGUL SYLLABLE JJYAEH
51789<=m&&51815>=m||// Lo  [27] HANGUL SYLLABLE JJEOG..HANGUL SYLLABLE JJEOH
51817<=m&&51843>=m||// Lo  [27] HANGUL SYLLABLE JJEG..HANGUL SYLLABLE JJEH
51845<=m&&51871>=m||// Lo  [27] HANGUL SYLLABLE JJYEOG..HANGUL SYLLABLE JJYEOH
51873<=m&&51899>=m||// Lo  [27] HANGUL SYLLABLE JJYEG..HANGUL SYLLABLE JJYEH
51901<=m&&51927>=m||// Lo  [27] HANGUL SYLLABLE JJOG..HANGUL SYLLABLE JJOH
51929<=m&&51955>=m||// Lo  [27] HANGUL SYLLABLE JJWAG..HANGUL SYLLABLE JJWAH
51957<=m&&51983>=m||// Lo  [27] HANGUL SYLLABLE JJWAEG..HANGUL SYLLABLE JJWAEH
51985<=m&&52011>=m||// Lo  [27] HANGUL SYLLABLE JJOEG..HANGUL SYLLABLE JJOEH
52013<=m&&52039>=m||// Lo  [27] HANGUL SYLLABLE JJYOG..HANGUL SYLLABLE JJYOH
52041<=m&&52067>=m||// Lo  [27] HANGUL SYLLABLE JJUG..HANGUL SYLLABLE JJUH
52069<=m&&52095>=m||// Lo  [27] HANGUL SYLLABLE JJWEOG..HANGUL SYLLABLE JJWEOH
52097<=m&&52123>=m||// Lo  [27] HANGUL SYLLABLE JJWEG..HANGUL SYLLABLE JJWEH
52125<=m&&52151>=m||// Lo  [27] HANGUL SYLLABLE JJWIG..HANGUL SYLLABLE JJWIH
52153<=m&&52179>=m||// Lo  [27] HANGUL SYLLABLE JJYUG..HANGUL SYLLABLE JJYUH
52181<=m&&52207>=m||// Lo  [27] HANGUL SYLLABLE JJEUG..HANGUL SYLLABLE JJEUH
52209<=m&&52235>=m||// Lo  [27] HANGUL SYLLABLE JJYIG..HANGUL SYLLABLE JJYIH
52237<=m&&52263>=m||// Lo  [27] HANGUL SYLLABLE JJIG..HANGUL SYLLABLE JJIH
52265<=m&&52291>=m||// Lo  [27] HANGUL SYLLABLE CAG..HANGUL SYLLABLE CAH
52293<=m&&52319>=m||// Lo  [27] HANGUL SYLLABLE CAEG..HANGUL SYLLABLE CAEH
52321<=m&&52347>=m||// Lo  [27] HANGUL SYLLABLE CYAG..HANGUL SYLLABLE CYAH
52349<=m&&52375>=m||// Lo  [27] HANGUL SYLLABLE CYAEG..HANGUL SYLLABLE CYAEH
52377<=m&&52403>=m||// Lo  [27] HANGUL SYLLABLE CEOG..HANGUL SYLLABLE CEOH
52405<=m&&52431>=m||// Lo  [27] HANGUL SYLLABLE CEG..HANGUL SYLLABLE CEH
52433<=m&&52459>=m||// Lo  [27] HANGUL SYLLABLE CYEOG..HANGUL SYLLABLE CYEOH
52461<=m&&52487>=m||// Lo  [27] HANGUL SYLLABLE CYEG..HANGUL SYLLABLE CYEH
52489<=m&&52515>=m||// Lo  [27] HANGUL SYLLABLE COG..HANGUL SYLLABLE COH
52517<=m&&52543>=m||// Lo  [27] HANGUL SYLLABLE CWAG..HANGUL SYLLABLE CWAH
52545<=m&&52571>=m||// Lo  [27] HANGUL SYLLABLE CWAEG..HANGUL SYLLABLE CWAEH
52573<=m&&52599>=m||// Lo  [27] HANGUL SYLLABLE COEG..HANGUL SYLLABLE COEH
52601<=m&&52627>=m||// Lo  [27] HANGUL SYLLABLE CYOG..HANGUL SYLLABLE CYOH
52629<=m&&52655>=m||// Lo  [27] HANGUL SYLLABLE CUG..HANGUL SYLLABLE CUH
52657<=m&&52683>=m||// Lo  [27] HANGUL SYLLABLE CWEOG..HANGUL SYLLABLE CWEOH
52685<=m&&52711>=m||// Lo  [27] HANGUL SYLLABLE CWEG..HANGUL SYLLABLE CWEH
52713<=m&&52739>=m||// Lo  [27] HANGUL SYLLABLE CWIG..HANGUL SYLLABLE CWIH
52741<=m&&52767>=m||// Lo  [27] HANGUL SYLLABLE CYUG..HANGUL SYLLABLE CYUH
52769<=m&&52795>=m||// Lo  [27] HANGUL SYLLABLE CEUG..HANGUL SYLLABLE CEUH
52797<=m&&52823>=m||// Lo  [27] HANGUL SYLLABLE CYIG..HANGUL SYLLABLE CYIH
52825<=m&&52851>=m||// Lo  [27] HANGUL SYLLABLE CIG..HANGUL SYLLABLE CIH
52853<=m&&52879>=m||// Lo  [27] HANGUL SYLLABLE KAG..HANGUL SYLLABLE KAH
52881<=m&&52907>=m||// Lo  [27] HANGUL SYLLABLE KAEG..HANGUL SYLLABLE KAEH
52909<=m&&52935>=m||// Lo  [27] HANGUL SYLLABLE KYAG..HANGUL SYLLABLE KYAH
52937<=m&&52963>=m||// Lo  [27] HANGUL SYLLABLE KYAEG..HANGUL SYLLABLE KYAEH
52965<=m&&52991>=m||// Lo  [27] HANGUL SYLLABLE KEOG..HANGUL SYLLABLE KEOH
52993<=m&&53019>=m||// Lo  [27] HANGUL SYLLABLE KEG..HANGUL SYLLABLE KEH
53021<=m&&53047>=m||// Lo  [27] HANGUL SYLLABLE KYEOG..HANGUL SYLLABLE KYEOH
53049<=m&&53075>=m||// Lo  [27] HANGUL SYLLABLE KYEG..HANGUL SYLLABLE KYEH
53077<=m&&53103>=m||// Lo  [27] HANGUL SYLLABLE KOG..HANGUL SYLLABLE KOH
53105<=m&&53131>=m||// Lo  [27] HANGUL SYLLABLE KWAG..HANGUL SYLLABLE KWAH
53133<=m&&53159>=m||// Lo  [27] HANGUL SYLLABLE KWAEG..HANGUL SYLLABLE KWAEH
53161<=m&&53187>=m||// Lo  [27] HANGUL SYLLABLE KOEG..HANGUL SYLLABLE KOEH
53189<=m&&53215>=m||// Lo  [27] HANGUL SYLLABLE KYOG..HANGUL SYLLABLE KYOH
53217<=m&&53243>=m||// Lo  [27] HANGUL SYLLABLE KUG..HANGUL SYLLABLE KUH
53245<=m&&53271>=m||// Lo  [27] HANGUL SYLLABLE KWEOG..HANGUL SYLLABLE KWEOH
53273<=m&&53299>=m||// Lo  [27] HANGUL SYLLABLE KWEG..HANGUL SYLLABLE KWEH
53301<=m&&53327>=m||// Lo  [27] HANGUL SYLLABLE KWIG..HANGUL SYLLABLE KWIH
53329<=m&&53355>=m||// Lo  [27] HANGUL SYLLABLE KYUG..HANGUL SYLLABLE KYUH
53357<=m&&53383>=m||// Lo  [27] HANGUL SYLLABLE KEUG..HANGUL SYLLABLE KEUH
53385<=m&&53411>=m||// Lo  [27] HANGUL SYLLABLE KYIG..HANGUL SYLLABLE KYIH
53413<=m&&53439>=m||// Lo  [27] HANGUL SYLLABLE KIG..HANGUL SYLLABLE KIH
53441<=m&&53467>=m||// Lo  [27] HANGUL SYLLABLE TAG..HANGUL SYLLABLE TAH
53469<=m&&53495>=m||// Lo  [27] HANGUL SYLLABLE TAEG..HANGUL SYLLABLE TAEH
53497<=m&&53523>=m||// Lo  [27] HANGUL SYLLABLE TYAG..HANGUL SYLLABLE TYAH
53525<=m&&53551>=m||// Lo  [27] HANGUL SYLLABLE TYAEG..HANGUL SYLLABLE TYAEH
53553<=m&&53579>=m||// Lo  [27] HANGUL SYLLABLE TEOG..HANGUL SYLLABLE TEOH
53581<=m&&53607>=m||// Lo  [27] HANGUL SYLLABLE TEG..HANGUL SYLLABLE TEH
53609<=m&&53635>=m||// Lo  [27] HANGUL SYLLABLE TYEOG..HANGUL SYLLABLE TYEOH
53637<=m&&53663>=m||// Lo  [27] HANGUL SYLLABLE TYEG..HANGUL SYLLABLE TYEH
53665<=m&&53691>=m||// Lo  [27] HANGUL SYLLABLE TOG..HANGUL SYLLABLE TOH
53693<=m&&53719>=m||// Lo  [27] HANGUL SYLLABLE TWAG..HANGUL SYLLABLE TWAH
53721<=m&&53747>=m||// Lo  [27] HANGUL SYLLABLE TWAEG..HANGUL SYLLABLE TWAEH
53749<=m&&53775>=m||// Lo  [27] HANGUL SYLLABLE TOEG..HANGUL SYLLABLE TOEH
53777<=m&&53803>=m||// Lo  [27] HANGUL SYLLABLE TYOG..HANGUL SYLLABLE TYOH
53805<=m&&53831>=m||// Lo  [27] HANGUL SYLLABLE TUG..HANGUL SYLLABLE TUH
53833<=m&&53859>=m||// Lo  [27] HANGUL SYLLABLE TWEOG..HANGUL SYLLABLE TWEOH
53861<=m&&53887>=m||// Lo  [27] HANGUL SYLLABLE TWEG..HANGUL SYLLABLE TWEH
53889<=m&&53915>=m||// Lo  [27] HANGUL SYLLABLE TWIG..HANGUL SYLLABLE TWIH
53917<=m&&53943>=m||// Lo  [27] HANGUL SYLLABLE TYUG..HANGUL SYLLABLE TYUH
53945<=m&&53971>=m||// Lo  [27] HANGUL SYLLABLE TEUG..HANGUL SYLLABLE TEUH
53973<=m&&53999>=m||// Lo  [27] HANGUL SYLLABLE TYIG..HANGUL SYLLABLE TYIH
54001<=m&&54027>=m||// Lo  [27] HANGUL SYLLABLE TIG..HANGUL SYLLABLE TIH
54029<=m&&54055>=m||// Lo  [27] HANGUL SYLLABLE PAG..HANGUL SYLLABLE PAH
54057<=m&&54083>=m||// Lo  [27] HANGUL SYLLABLE PAEG..HANGUL SYLLABLE PAEH
54085<=m&&54111>=m||// Lo  [27] HANGUL SYLLABLE PYAG..HANGUL SYLLABLE PYAH
54113<=m&&54139>=m||// Lo  [27] HANGUL SYLLABLE PYAEG..HANGUL SYLLABLE PYAEH
54141<=m&&54167>=m||// Lo  [27] HANGUL SYLLABLE PEOG..HANGUL SYLLABLE PEOH
54169<=m&&54195>=m||// Lo  [27] HANGUL SYLLABLE PEG..HANGUL SYLLABLE PEH
54197<=m&&54223>=m||// Lo  [27] HANGUL SYLLABLE PYEOG..HANGUL SYLLABLE PYEOH
54225<=m&&54251>=m||// Lo  [27] HANGUL SYLLABLE PYEG..HANGUL SYLLABLE PYEH
54253<=m&&54279>=m||// Lo  [27] HANGUL SYLLABLE POG..HANGUL SYLLABLE POH
54281<=m&&54307>=m||// Lo  [27] HANGUL SYLLABLE PWAG..HANGUL SYLLABLE PWAH
54309<=m&&54335>=m||// Lo  [27] HANGUL SYLLABLE PWAEG..HANGUL SYLLABLE PWAEH
54337<=m&&54363>=m||// Lo  [27] HANGUL SYLLABLE POEG..HANGUL SYLLABLE POEH
54365<=m&&54391>=m||// Lo  [27] HANGUL SYLLABLE PYOG..HANGUL SYLLABLE PYOH
54393<=m&&54419>=m||// Lo  [27] HANGUL SYLLABLE PUG..HANGUL SYLLABLE PUH
54421<=m&&54447>=m||// Lo  [27] HANGUL SYLLABLE PWEOG..HANGUL SYLLABLE PWEOH
54449<=m&&54475>=m||// Lo  [27] HANGUL SYLLABLE PWEG..HANGUL SYLLABLE PWEH
54477<=m&&54503>=m||// Lo  [27] HANGUL SYLLABLE PWIG..HANGUL SYLLABLE PWIH
54505<=m&&54531>=m||// Lo  [27] HANGUL SYLLABLE PYUG..HANGUL SYLLABLE PYUH
54533<=m&&54559>=m||// Lo  [27] HANGUL SYLLABLE PEUG..HANGUL SYLLABLE PEUH
54561<=m&&54587>=m||// Lo  [27] HANGUL SYLLABLE PYIG..HANGUL SYLLABLE PYIH
54589<=m&&54615>=m||// Lo  [27] HANGUL SYLLABLE PIG..HANGUL SYLLABLE PIH
54617<=m&&54643>=m||// Lo  [27] HANGUL SYLLABLE HAG..HANGUL SYLLABLE HAH
54645<=m&&54671>=m||// Lo  [27] HANGUL SYLLABLE HAEG..HANGUL SYLLABLE HAEH
54673<=m&&54699>=m||// Lo  [27] HANGUL SYLLABLE HYAG..HANGUL SYLLABLE HYAH
54701<=m&&54727>=m||// Lo  [27] HANGUL SYLLABLE HYAEG..HANGUL SYLLABLE HYAEH
54729<=m&&54755>=m||// Lo  [27] HANGUL SYLLABLE HEOG..HANGUL SYLLABLE HEOH
54757<=m&&54783>=m||// Lo  [27] HANGUL SYLLABLE HEG..HANGUL SYLLABLE HEH
54785<=m&&54811>=m||// Lo  [27] HANGUL SYLLABLE HYEOG..HANGUL SYLLABLE HYEOH
54813<=m&&54839>=m||// Lo  [27] HANGUL SYLLABLE HYEG..HANGUL SYLLABLE HYEH
54841<=m&&54867>=m||// Lo  [27] HANGUL SYLLABLE HOG..HANGUL SYLLABLE HOH
54869<=m&&54895>=m||// Lo  [27] HANGUL SYLLABLE HWAG..HANGUL SYLLABLE HWAH
54897<=m&&54923>=m||// Lo  [27] HANGUL SYLLABLE HWAEG..HANGUL SYLLABLE HWAEH
54925<=m&&54951>=m||// Lo  [27] HANGUL SYLLABLE HOEG..HANGUL SYLLABLE HOEH
54953<=m&&54979>=m||// Lo  [27] HANGUL SYLLABLE HYOG..HANGUL SYLLABLE HYOH
54981<=m&&55007>=m||// Lo  [27] HANGUL SYLLABLE HUG..HANGUL SYLLABLE HUH
55009<=m&&55035>=m||// Lo  [27] HANGUL SYLLABLE HWEOG..HANGUL SYLLABLE HWEOH
55037<=m&&55063>=m||// Lo  [27] HANGUL SYLLABLE HWEG..HANGUL SYLLABLE HWEH
55065<=m&&55091>=m||// Lo  [27] HANGUL SYLLABLE HWIG..HANGUL SYLLABLE HWIH
55093<=m&&55119>=m||// Lo  [27] HANGUL SYLLABLE HYUG..HANGUL SYLLABLE HYUH
55121<=m&&55147>=m||// Lo  [27] HANGUL SYLLABLE HEUG..HANGUL SYLLABLE HEUH
55149<=m&&55175>=m||// Lo  [27] HANGUL SYLLABLE HYIG..HANGUL SYLLABLE HYIH
55177<=m&&55203>=m// Lo  [27] HANGUL SYLLABLE HIG..HANGUL SYLLABLE HIH
?p:9757==m||// So       WHITE UP POINTING INDEX
9977==m||// So       PERSON WITH BALL
9994<=m&&9997>=m||// So   [4] RAISED FIST..WRITING HAND
127877==m||// So       FATHER CHRISTMAS
127938<=m&&127940>=m||// So   [3] SNOWBOARDER..SURFER
127943==m||// So       HORSE RACING
127946<=m&&127948>=m||// So   [3] SWIMMER..GOLFER
128066<=m&&128067>=m||// So   [2] EAR..NOSE
128070<=m&&128080>=m||// So  [11] WHITE UP POINTING BACKHAND INDEX..OPEN HANDS SIGN
128110==m||// So       POLICE OFFICER
128112<=m&&128120>=m||// So   [9] BRIDE WITH VEIL..PRINCESS
128124==m||// So       BABY ANGEL
128129<=m&&128131>=m||// So   [3] INFORMATION DESK PERSON..DANCER
128133<=m&&128135>=m||// So   [3] NAIL POLISH..HAIRCUT
128170==m||// So       FLEXED BICEPS
128372<=m&&128373>=m||// So   [2] MAN IN BUSINESS SUIT LEVITATING..SLEUTH OR SPY
128378==m||// So       MAN DANCING
128400==m||// So       RAISED HAND WITH FINGERS SPLAYED
128405<=m&&128406>=m||// So   [2] REVERSED HAND WITH MIDDLE FINGER EXTENDED..RAISED HAND WITH PART BETWEEN MIDDLE AND RING FINGERS
128581<=m&&128583>=m||// So   [3] FACE WITH NO GOOD GESTURE..PERSON BOWING DEEPLY
128587<=m&&128591>=m||// So   [5] HAPPY PERSON RAISING ONE HAND..PERSON WITH FOLDED HANDS
128675==m||// So       ROWBOAT
128692<=m&&128694>=m||// So   [3] BICYCLIST..PEDESTRIAN
128704==m||// So       BATH
128716==m||// So       SLEEPING ACCOMMODATION
129304<=m&&129308>=m||// So   [5] SIGN OF THE HORNS..RIGHT-FACING FIST
129310<=m&&129311>=m||// So   [2] HAND WITH INDEX AND MIDDLE FINGERS CROSSED..I LOVE YOU HAND SIGN
129318==m||// So       FACE PALM
129328<=m&&129337>=m||// So  [10] PREGNANT WOMAN..JUGGLING
129341<=m&&129342>=m||// So   [2] WATER POLO..HANDBALL
129489<=m&&129501>=m// So  [13] ADULT..ELF
?g:127995<=m&&127999>=m?_:8205==m// Cf       ZERO WIDTH JOINER
?h:9792==m||// So       FEMALE SIGN
9794==m||// So       MALE SIGN
9877<=m&&9878>=m||// So   [2] STAFF OF AESCULAPIUS..SCALES
9992==m||// So       AIRPLANE
10084==m||// So       HEAVY BLACK HEART
127752==m||// So       RAINBOW
127806==m||// So       EAR OF RICE
127859==m||// So       COOKING
127891==m||// So       GRADUATION CAP
127908==m||// So       MICROPHONE
127912==m||// So       ARTIST PALETTE
127979==m||// So       SCHOOL
127981==m||// So       FACTORY
128139==m||// So       KISS MARK
128187<=m&&128188>=m||// So   [2] PERSONAL COMPUTER..BRIEFCASE
128295==m||// So       WRENCH
128300==m||// So       MICROSCOPE
128488==m||// So       LEFT SPEECH BUBBLE
128640==m||// So       ROCKET
128658==m// So       FIRE ENGINE
?c:128102<=m&&128105>=m?y:d;//all unlisted characters have a grapheme break property of "Other"
}var e=0,t=1,n=2,r=3,i=4,a=5,s=6,l=7,o=8,u=9,p=10,d=11,f=12,g=13,_=14,h=15,c=16,y=17,m=0,b=1,v=2,k=3,x=4;// BreakTypes
return this.nextBreak=function(e,t){if(void 0===t&&(t=0),0>t)return 0;if(t>=e.length-1)return e.length;for(var n=getGraphemeBreakProperty(codePointAt(e,t)),r=[],a=t+1;a<e.length;a++)// check for already processed low surrogates
if(!isSurrogate(e,a-1)){var i=getGraphemeBreakProperty(codePointAt(e,a));if(shouldBreak(n,r,i))return a;r.push(i)}return e.length},this.splitGraphemes=function(e){for(var t,n=[],r=0;(t=this.nextBreak(e,r))<e.length;)n.push(e.slice(r,t)),r=t;return r<e.length&&n.push(e.slice(r)),n},this.countGraphemes=function(e){for(var t,n=0,r=0;(t=this.nextBreak(e,r))<e.length;)r=t,n++;return r<e.length&&n++,n},this};// https://github.com/airportyh/protomorphism
class Protocol{constructor(e){function createFun(e){return function(...n){const r=n[0];let i=null;if(null===r&&this.hasImplementation(Symbol('null'))?i=this.registry.get(Symbol)[e]:t(r)&&this.hasImplementation(k.Integer)?i=this.registry.get(k.Integer)[e]:'number'==typeof r&&!t(r)&&this.hasImplementation(k.Float)?i=this.registry.get(k.Float)[e]:'string'==typeof r&&this.hasImplementation(k.BitString)?i=this.registry.get(k.BitString)[e]:r&&r instanceof Map&&r.has(Symbol.for('__struct__'))&&this.hasImplementation(r)?i=this.registry.get(r.get(Symbol.for('__struct__')).__MODULE__)[e]:null!==r&&this.hasImplementation(r)?i=this.registry.get(r.constructor)[e]:this.fallback&&(i=this.fallback[e]),null!=i){const e=i.apply(this,n);return e}throw new Error(`No implementation found for ${r}`)}}for(const t in this.registry=new Map,this.fallback=null,e)this[t]=createFun(t).bind(this)}implementation(e,t){null===e?this.fallback=t:this.registry.set(e,t)}hasImplementation(e){if(e===k.Integer||e===k.Float||e===k.BitString)return this.registry.has(e);return e&&e instanceof Map&&e.has(Symbol.for('__struct__'))?this.registry.has(e.get(Symbol.for('__struct__')).__MODULE__):this.registry.has(e.constructor)}}var p={reverse,foreach:function foreach(e,t){return t.forEach((t)=>e(t)),Symbol.for('ok')},duplicate:function duplicate(e,t){const n=[];for(;n.length<e;)n.push(t);return n},flatten,foldl,foldr:function foldr(e,t,n){return foldl(e,t,reverse(n))},keydelete,keyfind,keymember:function keymember(e,t,n){return!1!==keyfind(e,t,n)},keyreplace:function keyreplace(e,t,n,r){const i=[...n];for(let a=0;a<i.length;a++)if(i[a].get(t-1)===e)return i[a]=r,i;return i},keysort:function keysort(e,t){const n=[...t];return n.sort((t,n)=>{if(t.get(e-1)<n.get(e-1))return-1;return t.get(e-1)>n.get(e-1)?1:0})},keystore:function keystore(e,t,n,r){const i=[...n];for(let a=0;a<i.length;a++)if(i[a].get(t-1)===e)return i[a]=r,i;return i.concat(r)},keytake:function keytake(e,t,n){const r=keyfind(e,t,n);return!1!==r&&new i.Tuple(r.get(t-1),r,keydelete(e,t,n))},mapfoldl:function mapfoldl(e,t,n){const r=[];let a=t;for(const i of n){const t=e(i,a);r.push(t.get(0)),a=t.get(1)}return new i.Tuple(r,a)},concat:function concat$1(e){return e.map((e)=>e.toString()).join()},map:function map(e,t){return t.map((t)=>e(t))},filter:function filter(e,t){return t.filter((t)=>e(t))},filtermap:function filtermap(e,t){const n=[];for(const r of t){const t=e(r);!0===t?n.push(r):t instanceof i.Tuple&&!0===t.get(0)&&n.push(t.get(1))}return n},member:function member(e,t){for(const n of t)if(n===e)return!0;return!1},all:function all(e,t){for(const n of t)if(!1===e(n))return!1;return!0},any:function any(e,t){for(const n of t)if(!0===e(n))return!0;return!1},splitwith:function splitwith(e,t){let n=!1;const r=[],a=[];for(const i of t)!0==n?a.push(i):!0===e(i)?r.push(i):(n=!0,a.push(i));return new i.Tuple(r,a)},sort:function sort(...e){if(1===e.length){const t=[...e[0]];return t.sort()}const t=e[0],n=[...e[1]];return n.sort((e,n)=>{const r=t(e,n);return!0===r?-1:1})}},d={get_value:function get_value(e,t,n=Symbol.for('undefined')){const r=p.keyfind(e,1,t);if(r){const[,e]=r.values;return e}return!!p.member(e,t)||n},is_defined:function is_defined(e,t){const n=p.keyfind(e,1,t);return!!n}};// http://erlang.org/doc/man/erlang.html
const f=new i.PID;var g={atom_to_binary,binary_to_atom,binary_to_existing_atom:function binary_to_existing_atom(e,t=Symbol.for('utf8')){return binary_to_atom(e,t)},list_concatenation:function list_concatenation(e,t){return e.concat(t)},list_subtraction:function list_subtraction(e,t){const n=[...e];for(const r of t){const e=n.indexOf(r);-1<e&&n.splice(e,1)}return n},div:function div(e,t){return e/t},not:function not(e){return!e},rem:function rem(e,t){return e%t},band:function band(e,t){return e&t},bor:function bor(e,t){return e|t},bsl:function bsl(e,t){return e<<t},bsr:function bsr(e,t){return e>>t},bxor:function bxor(e,t){return e^t},bnot:function bnot(e){return~e},is_bitstring:is_bitstring$1,is_boolean:is_boolean$1,is_float:function is_float(e){return is_number$1(e)&&!t(e)},is_function:function is_function$1(e){return'function'==typeof e||e instanceof Function},is_integer,is_list:function is_list(e){return Array.isArray(e)},is_map:function is_map$1(e){return e instanceof Map},is_number:is_number$1,is_pid:function is_pid$1(e){return e instanceof i.PID},is_port:function is_port(){return!1},is_reference:function is_reference$1(e){return e instanceof i.Reference},is_tuple:function is_tuple$1(e){return e instanceof i.Tuple},is_atom:function is_atom(e){if(null===e)return!0;return!!is_boolean$1(e)||'symbol'==typeof e||e instanceof Symbol||null!=e.__MODULE__},is_binary,element:function element(e,t){return t.get(e-1)},setelement:function setelement(e,t,n){const r=[...t.values];return r[e-1]=n,new i.Tuple(...r)},make_tuple:function make_tuple(e,t){const n=[];for(let r=0;r<e;r++)n.push(t);return new i.Tuple(...n)},insert_element:function insert_element(e,t,n){const r=[...t.values];return r.splice(e-1,0,n),new i.Tuple(...r)},append_element:function append_element(e,t){const n=[...e.values,t];return new i.Tuple(...n)},delete_element:function delete_element(e,t){const n=[...t.values];return n.splice(e-1,1),new i.Tuple(...n)},tuple_to_list:function tuple_to_list(e){const t=[...e.values];return t},abs:function abs(e){return Math.abs(e)},apply:function apply(...e){return 2===e.length?e[0].apply(this,...e[1]):e[0][atom_to_binary(e[1])].apply(this,...e[2])},binary_part:function binary_part(e,t,n){return e.substring(t,t+n)},bit_size:function bit_size(e){return e.bit_size},byte_size:function byte_size(e){return'string'==typeof e||e instanceof String?e.length:e.byte_size},hd:function hd(e){return e[0]},length:function length(e){return e.length},make_ref:function make_ref(){return new i.Reference},map_size:function map_size(e){return e.size},max:function max(e,t){return Math.max(e,t)},min:function min(e,t){return Math.min(e,t)},round:function round(e){return Math.round(e)},tl:function tl(e){return e.slice(1)},trunc:function trunc(e){return Math.trunc(e)},tuple_size:function tuple_size(e){return e.length},binary_to_float:function binary_to_float(e){return parseFloat(e)},binary_to_integer:function binary_to_integer(e,t=10){return parseInt(e,t)},process_info:function process_info(e,t){return t?t===Symbol.for('current_stacktrace')?new i.Tuple(t,[]):new i.Tuple(t,null):[]},iolist_to_binary,io_size:function io_size(e){return iolist_to_binary(e).length},integer_to_binary:function integer_to_binary(e,t=10){return e.toString(t)},atom_to_list:function atom_to_list(e){return atom_to_binary(e)},node:function node(){return Symbol.for('nonode@nohost')},self:function self$1(){return f},throw:_throw,error,exit,raise:function raise(e,t){e===Symbol.for('throw')?_throw(t):e===Symbol.for('error')?error(t):exit(t)},list_to_binary:function list_to_binary(t){const n=p.flatten(t),r=n.reduce((t,n)=>{if(null===n)return t;return is_integer(n)?t+e(n):is_bitstring$1(n)?t+e(...n.value):t+n},'');return r},nodes:function nodes(e=[]){const t=Array.isArray(e)?e:[e],n=[];for(const r of t)r===Symbol.for('this')&&(n.push(Symbol.for('nonode@nohost')),console.log(n));return n},function_exported:function function_exported(e,t){return null!=e[t]},equals:equals$1};class Recurse{constructor(e){this.func=e}}// http://erlang.org/doc/man/maps.html
const _=Symbol.for('ok'),h=Symbol.for('error'),c=Symbol.for('badmap'),y=Symbol.for('badkey');const m=Symbol.for('elixir_config'),b=new Map;const v=function get_global(){return'undefined'==typeof self?'undefined'==typeof window?'undefined'==typeof global?(console.warn('No global state found'),null):global:window:self}();v.__elixirscript_store__=new Map,v.__elixirscript_names__=new Map;var k={Tuple:i.Tuple,PID:i.PID,BitString:i.BitString,Reference:i.Reference,Patterns:{defmatch:function defmatch(...e){const t=getArityMap(e);return function(...e){let[n,r]=findMatchingFunction(e,t);return n.apply(this,r)}},match:function match(e,t,n=()=>!0){let r=[],i=buildMatch(e);const a=i(t,r),[s,l]=checkNamedVariables(r);if(a&&l&&n.apply(this,s))return s;throw console.error('No match for:',t),new MatchError(t)},MatchError,variable:function variable(e=null,t=Symbol.for('tailored.no_value')){return new Variable(e,t)},wildcard:function wildcard(){return new Wildcard},startsWith:function startsWith(e){return new StartsWith(e)},capture:function capture(e){return new Capture(e)},headTail:function headTail(e,t){return new HeadTail(e,t)},type,bound:function bound(e){return new Bound(e)},Clause,clause:function clause(e,t,n=()=>!0){return new Clause(e,t,n)},bitStringMatch:function bitStringMatch(...e){return new BitStringMatch(...e)},match_or_default,match_or_default_gen:function*match_or_default_gen(e,t,n=function*(){return!0},r=null){let i=[],a=buildMatch(e);const s=a(t,i),[l,o]=checkNamedVariables(i);return s&&o&&(yield*n.apply(this,l))?l:r},match_or_default_async:async function match_or_default_async(e,t,n=async()=>!0,r=null){let i=[],a=buildMatch(e);const s=a(t,i),[l,o]=checkNamedVariables(i);return s&&o&&(await n.apply(this,l))?l:r},defmatchgen,list_comprehension:function list_comprehension(e,t){const n=run_generators(t.pop()(),t);let r=[];for(let i of n)e.guard.apply(this,i)&&r.push(e.fn.apply(this,i));return r},list_generator:function list_generator(e,t){return function(){let n=[];for(let r of t){const t=match_or_default(e,r,()=>!0,o);if(t!=o){const[e]=t;n.push(e)}}return n}},bitstring_generator:function bitstring_generator(e,t){return function(){let n=[],r=t.slice(0,e.byte_size()),a=1;for(;r.byte_size==e.byte_size();){const i=match_or_default(e,r,()=>!0,o);i!=o&&n.push(i),r=t.slice(e.byte_size()*a,e.byte_size()*(a+1)),a++}return n}},bitstring_comprehension:function bitstring_comprehension(e,t){const n=run_generators(t.pop()(),t);let r=[];for(let i of n)e.guard.apply(this,i)&&r.push(e.fn.apply(this,i));return r=r.map((e)=>i.BitString.integer(e)),new i.BitString(...r)},defmatchGen:function defmatchGen(...e){return defmatchgen(...e)},defmatchAsync:function defmatchAsync(...e){const t=getArityMap(e);return async function(...e){if(t.has(e.length)){const n=t.get(e.length);let r=null,i=null;for(let t of n){let n=[];e=fillInOptionalValues(e,t.arity,t.optionals);const a=t.pattern(e,n),[s,l]=checkNamedVariables(n);if(a&&l&&(await t.guard.apply(this,s))){r=t.fn,i=s;break}}if(!r)throw console.error('No match for:',e),new MatchError(e);return r.apply(this,i)}throw console.error('Arity of',e.length,'not found. No match for:',e),new MatchError(e)}}},Integer:class Integer{},Float:class Float{},Functions:{call_property:function call_property(e,t){if(!t)return e instanceof Function||'function'==typeof e?e():e;if(e instanceof Map){let n=null;if(e.has(t)?n=t:e.has(Symbol.for(t))&&(n=Symbol.for(t)),null===n)throw new Error(`Property ${t} not found in ${e}`);return e.get(n)}let n=null;if('number'==typeof e||'symbol'==typeof e||'boolean'==typeof e||'string'==typeof e?void 0===e[t]?void 0!==e[Symbol.for(t)]&&(n=Symbol.for(t)):n=t:t in e?n=t:Symbol.for(t)in e&&(n=Symbol.for(t)),null===n)throw new Error(`Property ${t} not found in ${e}`);return e[n]instanceof Function||'function'==typeof e[n]?e[n]():e[n]},defprotocol:function defprotocol(e){return new Protocol(e)},defimpl:function defimpl(e,t,n){e.implementation(t,n)},build_namespace:function build_namespace(e,t){let n=t.split('.');const r=e;let i=e;'Elixir'===n[0]&&(n=n.slice(1));for(const r of n)'undefined'==typeof i[r]&&(i[r]={}),i=i[r];return r.__table__=e.__table__||{},r.__table__[Symbol.for(t)]=i,i},map_to_object,object_to_map,trampoline:function trampoline$1(e){let t=e;for(;t&&t instanceof Recurse;)t=t.func();return t},Recurse,split_at,graphemes:function graphemes(e){const t=new u;return t.splitGraphemes(e)},concat:function concat(e,t){return[e].concat(t)}},SpecialForms:{_case:function _case(e,t){return k.Patterns.defmatch(...t)(e)},cond:function cond(...e){for(const t of e)if(t[0])return t[1]();throw new Error},_for:function _for(e,t,n,r=[]){const[i,a]=n.into(r);let s=i;const l=run_list_generators(t.pop()(),t);for(const i of l)e.guard.apply(this,i)&&(s=a(s,new k.Tuple(Symbol.for('cont'),e.fn.apply(this,i))));return a(s,Symbol.for('done'))},_try:function _try(e,t,n,r,i){let a=null;try{a=e()}catch(r){let e=null;if(t)try{return e=t(r),e}catch(e){if(e instanceof k.Patterns.MatchError)throw e}if(n)try{return e=n(r),e}catch(e){if(e instanceof k.Patterns.MatchError)throw e}throw r}finally{i&&i()}if(r)try{return r(a)}catch(e){if(e instanceof k.Patterns.MatchError)throw new Error('No Match Found in Else');throw e}else return a},_with:function _with(...e){let t=[],n=null,r=null;'function'==typeof e[e.length-2]?[n,r]=e.splice(-2):n=e.pop();for(let n=0;n<e.length;n++){const[i,a]=e[n],s=a(...t),l=k.Patterns.match_or_default(i,s);if(null==l)return r?r.call(null,s):s;t=t.concat(l)}return n(...t)},receive:function receive(e,t=0,n=()=>!0){console.warn('Receive not supported');const r=[],a=Symbol('NOMATCH');// this.mailbox.get();
for(let s=0;s<r.length;s++)for(const t of e){const e=k.Patterns.match_or_default(t.pattern,r[s],t.guard,a);if(e!==a)return this.mailbox.removeAt(s),t.fn.apply(null,e)}return null}},Store:{create:function create(e,t=null){const n=new k.PID;return null!==t&&k.global.__elixirscript_names__.set(t,n),k.global.__elixirscript_store__.set(n,e)},update:function update$2(e,t){const n=get_key(e);return k.global.__elixirscript_store__.set(n,t)},read:function read(e){const t=get_key(e);return k.global.__elixirscript_store__.get(t)},remove:function remove$1(e){const t=get_key(e);return k.global.__elixirscript_store__.delete(t)}},global:v,erlang:g,maps:{find:function find(e,t){if(!1===g.is_map(t))return new i.Tuple(c,t);const n=__get(t,e);return'undefined'==typeof n?h:new i.Tuple(_,n)},fold:function fold(e,t,n){let r=t;for(const[i,a]of n.entries())r=e(i,a,r);return r},remove:function remove(e,t){if(!1===g.is_map(t))return new i.Tuple(c,t);const n=new Map(t);return __delete(n,e),n},to_list:function to_list(e){if(!1===g.is_map(e))return new i.Tuple(c,e);const t=[];for(const[n,r]of e.entries())t.push(new i.Tuple(n,r));return t},from_list:function from_list(e){return e.reduce((e,t)=>{const[n,r]=t;return e.set(n,r),e},new Map)},keys:function keys(e){return!1===g.is_map(e)?new i.Tuple(c,e):Array.from(e.keys())},values:function values$1(e){return!1===g.is_map(e)?new i.Tuple(c,e):Array.from(e.values())},is_key,put:function put(e,t,n){return!1===g.is_map(n)?new i.Tuple(c,n):__put(n,e,t)},merge:function merge(e,t){return!1===g.is_map(e)?new i.Tuple(c,e):!1===g.is_map(t)?new i.Tuple(c,t):new Map([...e,...t])},update:function update(e,t,n){return!1===g.is_map(n)?new i.Tuple(c,n):!1===is_key(e,n)?new i.Tuple(y,e):new Map([...n,[e,t]])},get:function get$1(...e){const t=e[0],n=e[1];return!1===g.is_map(n)?new i.Tuple(c,n):is_key(t,n)?__get(n,t):3===e.length?e[2]:new i.Tuple(y,t)},take:function take(e,t){if(!1===g.is_map(t))return new i.Tuple(c,t);if(!is_key(e,t))return h;const n=__get(t,e),r=new Map(t);return __delete(r,e),new i.Tuple(n,r)},__has},lists:p,elixir_errors:{warn:function warn(e){const t=e.join('');return console.warn(`warning: ${t}`),Symbol.for('ok')}},io:{put_chars:function put_chars(e,t){const n=g.iolist_to_binary(t);return e===Symbol.for('stderr')?console.error(n):console.log(n),Symbol.for('ok')}},binary:{at,copy:function copy(e,t=1){return e.repeat(t)},first:function first(e){if(0===e.length)throw new Error('Binary is of length 0');return at(e,0)},last:function last(e){if(0===e.length)throw new Error('Binary is of length 0');return e.slice(-1)},list_to_bin:function list_to_bin(e){return g.list_to_binary(e)},part:function part(e,t,n=null){if(null===n){const[n,r]=t.values;return e.substr(n,r)}return e.substr(t,n)},replace:function replace(e,t,n,r=[]){const i=d.get_value(Symbol.for('global'),r);let a;return a=i===Symbol.for('undefined')?new RegExp(t,''):new RegExp(t,'g'),e.replace(a,n)},split:function split(e,t,n=[]){return e.split(t)}},unicode:{characters_to_list,characters_to_binary:function characters_to_binary(t){const n=characters_to_list(t);return e(...n)}},elixir_config:{new:function _new(e){return b.set(m,new Map),b.get(m).set(m,e),m},delete:function _delete(e){return b.delete(e),!0},put:put$1,get:get$2,update:function update$1(e,t){const n=t(b.get(m).get(e));return put$1(e,n),n},get_and_put:function get_and_put(e,t){const n=get$2(e);return put$1(e,t),n}},math:{log2:function log2(e){return Math.log2(e)}},proplists:d};return{Core:k}}();

const Elixir = {};
Elixir.__table__ = {}
Elixir.start = function(app, args) {
    app.__load(Elixir).start(Symbol.for('normal'), args)
}
Elixir.load = function(module) {
    return module.__load(Elixir);
}
import Node from './node.js';
ElixirScript.Core.Functions.build_namespace(Elixir, 'Elixir.HashSet').__load = function(Elixir) {
    if (Elixir.HashSet.__exports)
        return Elixir.HashSet.__exports;

    function __info__(kind) {
        const __info__map__ = new Map([[Symbol.for('functions'), [new ElixirScript.Core.Tuple(Symbol.for('__struct__'), 0), new ElixirScript.Core.Tuple(Symbol.for('__struct__'), 1), new ElixirScript.Core.Tuple(Symbol.for('delete'), 2), new ElixirScript.Core.Tuple(Symbol.for('difference'), 2), new ElixirScript.Core.Tuple(Symbol.for('disjoint?'), 2), new ElixirScript.Core.Tuple(Symbol.for('equal?'), 2), new ElixirScript.Core.Tuple(Symbol.for('intersection'), 2), new ElixirScript.Core.Tuple(Symbol.for('member?'), 2), new ElixirScript.Core.Tuple(Symbol.for('new'), 0), new ElixirScript.Core.Tuple(Symbol.for('put'), 2), new ElixirScript.Core.Tuple(Symbol.for('reduce'), 3), new ElixirScript.Core.Tuple(Symbol.for('size'), 1), new ElixirScript.Core.Tuple(Symbol.for('subset?'), 2), new ElixirScript.Core.Tuple(Symbol.for('to_list'), 1), new ElixirScript.Core.Tuple(Symbol.for('union'), 2)]], [Symbol.for('macros'), []], [Symbol.for('attributes'), [new ElixirScript.Core.Tuple(Symbol.for('vsn'), [247817948271052815450478924538344731853])]], [Symbol.for('compile'), [new ElixirScript.Core.Tuple(Symbol.for('options'), []), new ElixirScript.Core.Tuple(Symbol.for('version'), [55, 46, 49, 46, 50]), new ElixirScript.Core.Tuple(Symbol.for('source'), '/private/tmp/elixir-20170929-51947-wgj4qu/elixir-1.5.2/lib/elixir/lib/hash_set.ex')]], [Symbol.for('md5'), new ElixirScript.Core.BitString(ElixirScript.Core.BitString.integer(186), ElixirScript.Core.BitString.integer(112), ElixirScript.Core.BitString.integer(0), ElixirScript.Core.BitString.integer(48), ElixirScript.Core.BitString.integer(12), ElixirScript.Core.BitString.integer(195), ElixirScript.Core.BitString.integer(254), ElixirScript.Core.BitString.integer(85), ElixirScript.Core.BitString.integer(132), ElixirScript.Core.BitString.integer(123), ElixirScript.Core.BitString.integer(71), ElixirScript.Core.BitString.integer(157), ElixirScript.Core.BitString.integer(207), ElixirScript.Core.BitString.integer(105), ElixirScript.Core.BitString.integer(116), ElixirScript.Core.BitString.integer(205))], [Symbol.for('module'), Symbol.for('Elixir.HashSet')]]);

        const value = __info__map__.get(kind);

        if (value !== null) {
            return value;
        }

        throw new ElixirScript.Core.Patterns.MatchError(kind);
    }

    function __struct__(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return new Map([[Symbol.for('__struct__'), Elixir.HashSet.__load(Elixir)], [Symbol.for('root'), new ElixirScript.Core.Tuple([], [], [], [], [], [], [], [])], [Symbol.for('size'), 0]]);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('kv576460752303377950')], __function_args__, (kv5764607523033779500) => {
                return true;
            })) !== null) {
                let [kv5764607523033779500] = __arg_matches__;

                const [map5764607523033779500, keys5764607523033779500] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                    values: [ElixirScript.Core.Patterns.variable('map576460752303377950'), ElixirScript.Core.Patterns.variable('keys576460752303377950')]
                }), Elixir.Enum.__load(Elixir).reduce(kv5764607523033779500, new ElixirScript.Core.Tuple(__struct__(), []), (...__function_args__) => {
                    function recur(...__function_args__) {
                        let __arg_matches__ = null;

                        if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                            values: [ElixirScript.Core.Patterns.variable('key576460752303377950'), ElixirScript.Core.Patterns.variable('val576460752303377950')]
                        }), ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                            values: [ElixirScript.Core.Patterns.variable('map576460752303377950'), ElixirScript.Core.Patterns.variable('keys576460752303377950')]
                        })], __function_args__, (key5764607523033779500, val5764607523033779500, map5764607523033779500, keys5764607523033779500) => {
                            return true;
                        })) !== null) {
                            let [key5764607523033779500, val5764607523033779500, map5764607523033779500, keys5764607523033779500] = __arg_matches__;

                            return new ElixirScript.Core.Tuple(ElixirScript.Core.maps.update(key5764607523033779500, val5764607523033779500, map5764607523033779500), Elixir.List.__load(Elixir).__delete__(keys5764607523033779500, key5764607523033779500));
                        }

                        throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
                    }

                    return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
                }));

                const _ref1173554 = new ElixirScript.Core.Tuple(map5764607523033779500, keys5764607523033779500);

                return ElixirScript.Core.Patterns.defmatch(ElixirScript.Core.Patterns.clause([[]], () => {
                    return map5764607523033779500;
                }, () => {
                    return true;
                }), ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.variable('_')], () => {
                    return ElixirScript.Core.erlang.error(Elixir.ArgumentError.__load(Elixir).exception('the following keys must also be given when building ' + ('struct ' + (Elixir.String.Chars.__load(Elixir).to_string(Elixir.Kernel.__load(Elixir).inspect(Elixir.HashSet.__load(Elixir))) + (': ' + Elixir.String.Chars.__load(Elixir).to_string(Elixir.Kernel.__load(Elixir).inspect(keys5764607523033779500)))))));
                }, () => {
                    return true;
                })).call(this, keys5764607523033779500);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    const __exports = {
        __struct__,
        __MODULE__: Symbol.for('Elixir.HashSet'),
        __info__
    };

    Elixir.HashSet.__exports = __exports

    return __exports;
}
ElixirScript.Core.Functions.build_namespace(Elixir, 'Elixir.HashDict').__load = function(Elixir) {
    if (Elixir.HashDict.__exports)
        return Elixir.HashDict.__exports;

    function __info__(kind) {
        const __info__map__ = new Map([[Symbol.for('functions'), [new ElixirScript.Core.Tuple(Symbol.for('__struct__'), 0), new ElixirScript.Core.Tuple(Symbol.for('__struct__'), 1), new ElixirScript.Core.Tuple(Symbol.for('delete'), 2), new ElixirScript.Core.Tuple(Symbol.for('dict_delete'), 2), new ElixirScript.Core.Tuple(Symbol.for('drop'), 2), new ElixirScript.Core.Tuple(Symbol.for('equal?'), 2), new ElixirScript.Core.Tuple(Symbol.for('fetch'), 2), new ElixirScript.Core.Tuple(Symbol.for('fetch!'), 2), new ElixirScript.Core.Tuple(Symbol.for('get'), 2), new ElixirScript.Core.Tuple(Symbol.for('get'), 3), new ElixirScript.Core.Tuple(Symbol.for('get_and_update'), 3), new ElixirScript.Core.Tuple(Symbol.for('get_lazy'), 3), new ElixirScript.Core.Tuple(Symbol.for('has_key?'), 2), new ElixirScript.Core.Tuple(Symbol.for('keys'), 1), new ElixirScript.Core.Tuple(Symbol.for('merge'), 2), new ElixirScript.Core.Tuple(Symbol.for('merge'), 3), new ElixirScript.Core.Tuple(Symbol.for('new'), 0), new ElixirScript.Core.Tuple(Symbol.for('pop'), 2), new ElixirScript.Core.Tuple(Symbol.for('pop'), 3), new ElixirScript.Core.Tuple(Symbol.for('pop_lazy'), 3), new ElixirScript.Core.Tuple(Symbol.for('put'), 3), new ElixirScript.Core.Tuple(Symbol.for('put_new'), 3), new ElixirScript.Core.Tuple(Symbol.for('put_new_lazy'), 3), new ElixirScript.Core.Tuple(Symbol.for('reduce'), 3), new ElixirScript.Core.Tuple(Symbol.for('size'), 1), new ElixirScript.Core.Tuple(Symbol.for('split'), 2), new ElixirScript.Core.Tuple(Symbol.for('take'), 2), new ElixirScript.Core.Tuple(Symbol.for('to_list'), 1), new ElixirScript.Core.Tuple(Symbol.for('update'), 4), new ElixirScript.Core.Tuple(Symbol.for('update!'), 3), new ElixirScript.Core.Tuple(Symbol.for('values'), 1)]], [Symbol.for('macros'), []], [Symbol.for('attributes'), [new ElixirScript.Core.Tuple(Symbol.for('vsn'), [92084567288157847480482332163625428246])]], [Symbol.for('compile'), [new ElixirScript.Core.Tuple(Symbol.for('options'), []), new ElixirScript.Core.Tuple(Symbol.for('version'), [55, 46, 49, 46, 50]), new ElixirScript.Core.Tuple(Symbol.for('source'), '/private/tmp/elixir-20170929-51947-wgj4qu/elixir-1.5.2/lib/elixir/lib/hash_dict.ex')]], [Symbol.for('md5'), new ElixirScript.Core.BitString(ElixirScript.Core.BitString.integer(69), ElixirScript.Core.BitString.integer(70), ElixirScript.Core.BitString.integer(215), ElixirScript.Core.BitString.integer(177), ElixirScript.Core.BitString.integer(185), ElixirScript.Core.BitString.integer(162), ElixirScript.Core.BitString.integer(231), ElixirScript.Core.BitString.integer(27), ElixirScript.Core.BitString.integer(246), ElixirScript.Core.BitString.integer(76), ElixirScript.Core.BitString.integer(6), ElixirScript.Core.BitString.integer(46), ElixirScript.Core.BitString.integer(8), ElixirScript.Core.BitString.integer(131), ElixirScript.Core.BitString.integer(165), ElixirScript.Core.BitString.integer(22))], [Symbol.for('module'), Symbol.for('Elixir.HashDict')]]);

        const value = __info__map__.get(kind);

        if (value !== null) {
            return value;
        }

        throw new ElixirScript.Core.Patterns.MatchError(kind);
    }

    function __struct__(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return new Map([[Symbol.for('__struct__'), Elixir.HashDict.__load(Elixir)], [Symbol.for('root'), new ElixirScript.Core.Tuple([], [], [], [], [], [], [], [])], [Symbol.for('size'), 0]]);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('kv576460752303378687')], __function_args__, (kv5764607523033786870) => {
                return true;
            })) !== null) {
                let [kv5764607523033786870] = __arg_matches__;

                const [map5764607523033786870, keys5764607523033786870] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                    values: [ElixirScript.Core.Patterns.variable('map576460752303378687'), ElixirScript.Core.Patterns.variable('keys576460752303378687')]
                }), Elixir.Enum.__load(Elixir).reduce(kv5764607523033786870, new ElixirScript.Core.Tuple(__struct__(), []), (...__function_args__) => {
                    function recur(...__function_args__) {
                        let __arg_matches__ = null;

                        if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                            values: [ElixirScript.Core.Patterns.variable('key576460752303378687'), ElixirScript.Core.Patterns.variable('val576460752303378687')]
                        }), ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                            values: [ElixirScript.Core.Patterns.variable('map576460752303378687'), ElixirScript.Core.Patterns.variable('keys576460752303378687')]
                        })], __function_args__, (key5764607523033786870, val5764607523033786870, map5764607523033786870, keys5764607523033786870) => {
                            return true;
                        })) !== null) {
                            let [key5764607523033786870, val5764607523033786870, map5764607523033786870, keys5764607523033786870] = __arg_matches__;

                            return new ElixirScript.Core.Tuple(ElixirScript.Core.maps.update(key5764607523033786870, val5764607523033786870, map5764607523033786870), Elixir.List.__load(Elixir).__delete__(keys5764607523033786870, key5764607523033786870));
                        }

                        throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
                    }

                    return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
                }));

                const _ref5317876 = new ElixirScript.Core.Tuple(map5764607523033786870, keys5764607523033786870);

                return ElixirScript.Core.Patterns.defmatch(ElixirScript.Core.Patterns.clause([[]], () => {
                    return map5764607523033786870;
                }, () => {
                    return true;
                }), ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.variable('_')], () => {
                    return ElixirScript.Core.erlang.error(Elixir.ArgumentError.__load(Elixir).exception('the following keys must also be given when building ' + ('struct ' + (Elixir.String.Chars.__load(Elixir).to_string(Elixir.Kernel.__load(Elixir).inspect(Elixir.HashDict.__load(Elixir))) + (': ' + Elixir.String.Chars.__load(Elixir).to_string(Elixir.Kernel.__load(Elixir).inspect(keys5764607523033786870)))))));
                }, () => {
                    return true;
                })).call(this, keys5764607523033786870);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    const __exports = {
        __struct__,
        __MODULE__: Symbol.for('Elixir.HashDict'),
        __info__
    };

    Elixir.HashDict.__exports = __exports

    return __exports;
}
ElixirScript.Core.Functions.build_namespace(Elixir, 'Elixir.File.Stream').__load = function(Elixir) {
    if (Elixir.File.Stream.__exports)
        return Elixir.File.Stream.__exports;

    function __info__(kind) {
        const __info__map__ = new Map([[Symbol.for('functions'), [new ElixirScript.Core.Tuple(Symbol.for('__build__'), 3), new ElixirScript.Core.Tuple(Symbol.for('__struct__'), 0), new ElixirScript.Core.Tuple(Symbol.for('__struct__'), 1)]], [Symbol.for('macros'), []], [Symbol.for('attributes'), [new ElixirScript.Core.Tuple(Symbol.for('vsn'), [158273546373132296677247289802743319200])]], [Symbol.for('compile'), [new ElixirScript.Core.Tuple(Symbol.for('options'), []), new ElixirScript.Core.Tuple(Symbol.for('version'), [55, 46, 49, 46, 50]), new ElixirScript.Core.Tuple(Symbol.for('source'), '/private/tmp/elixir-20170929-51947-wgj4qu/elixir-1.5.2/lib/elixir/lib/file/stream.ex')]], [Symbol.for('md5'), new ElixirScript.Core.BitString(ElixirScript.Core.BitString.integer(119), ElixirScript.Core.BitString.integer(18), ElixirScript.Core.BitString.integer(96), ElixirScript.Core.BitString.integer(81), ElixirScript.Core.BitString.integer(7), ElixirScript.Core.BitString.integer(251), ElixirScript.Core.BitString.integer(154), ElixirScript.Core.BitString.integer(216), ElixirScript.Core.BitString.integer(141), ElixirScript.Core.BitString.integer(144), ElixirScript.Core.BitString.integer(213), ElixirScript.Core.BitString.integer(18), ElixirScript.Core.BitString.integer(145), ElixirScript.Core.BitString.integer(139), ElixirScript.Core.BitString.integer(138), ElixirScript.Core.BitString.integer(160))], [Symbol.for('module'), Symbol.for('Elixir.File.Stream')]]);

        const value = __info__map__.get(kind);

        if (value !== null) {
            return value;
        }

        throw new ElixirScript.Core.Patterns.MatchError(kind);
    }

    function __struct__(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return new Map([[Symbol.for('__struct__'), Elixir.File.Stream.__load(Elixir)], [Symbol.for('line_or_bytes'), Symbol.for('line')], [Symbol.for('modes'), []], [Symbol.for('path'), null], [Symbol.for('raw'), true]]);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('kv576460752303403295')], __function_args__, (kv5764607523034032950) => {
                return true;
            })) !== null) {
                let [kv5764607523034032950] = __arg_matches__;

                const [map5764607523034032950, keys5764607523034032950] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                    values: [ElixirScript.Core.Patterns.variable('map576460752303403295'), ElixirScript.Core.Patterns.variable('keys576460752303403295')]
                }), Elixir.Enum.__load(Elixir).reduce(kv5764607523034032950, new ElixirScript.Core.Tuple(__struct__(), []), (...__function_args__) => {
                    function recur(...__function_args__) {
                        let __arg_matches__ = null;

                        if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                            values: [ElixirScript.Core.Patterns.variable('key576460752303403295'), ElixirScript.Core.Patterns.variable('val576460752303403295')]
                        }), ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                            values: [ElixirScript.Core.Patterns.variable('map576460752303403295'), ElixirScript.Core.Patterns.variable('keys576460752303403295')]
                        })], __function_args__, (key5764607523034032950, val5764607523034032950, map5764607523034032950, keys5764607523034032950) => {
                            return true;
                        })) !== null) {
                            let [key5764607523034032950, val5764607523034032950, map5764607523034032950, keys5764607523034032950] = __arg_matches__;

                            return new ElixirScript.Core.Tuple(ElixirScript.Core.maps.update(key5764607523034032950, val5764607523034032950, map5764607523034032950), Elixir.List.__load(Elixir).__delete__(keys5764607523034032950, key5764607523034032950));
                        }

                        throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
                    }

                    return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
                }));

                const _ref8893917 = new ElixirScript.Core.Tuple(map5764607523034032950, keys5764607523034032950);

                return ElixirScript.Core.Patterns.defmatch(ElixirScript.Core.Patterns.clause([[]], () => {
                    return map5764607523034032950;
                }, () => {
                    return true;
                }), ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.variable('_')], () => {
                    return ElixirScript.Core.erlang.error(Elixir.ArgumentError.__load(Elixir).exception('the following keys must also be given when building ' + ('struct ' + (Elixir.String.Chars.__load(Elixir).to_string(Elixir.Kernel.__load(Elixir).inspect(Elixir.File.Stream.__load(Elixir))) + (': ' + Elixir.String.Chars.__load(Elixir).to_string(Elixir.Kernel.__load(Elixir).inspect(keys5764607523034032950)))))));
                }, () => {
                    return true;
                })).call(this, keys5764607523034032950);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    const __exports = {
        __struct__,
        __MODULE__: Symbol.for('Elixir.File.Stream'),
        __info__
    };

    Elixir.File.Stream.__exports = __exports

    return __exports;
}
ElixirScript.Core.Functions.build_namespace(Elixir, 'Elixir.Enumerable').__load = function(Elixir) {
    if (Elixir.Enumerable.__exports)
        return Elixir.Enumerable.__exports;

    const protocol = ElixirScript.Core.Functions.defprotocol({
        reduce: function() {},
        reduce: function() {},
        member__qmark__: function() {},
        date_from_iso_days_days: function() {},
        count: function() {},
        __impl__: function() {}
    });

    ElixirScript.Core.Functions.defimpl(protocol, Symbol.for('Elixir.Date.Range'), Elixir.Enumerable.Date.Range.__load(Elixir))

    ElixirScript.Core.Functions.defimpl(protocol, Symbol.for('Elixir.File.Stream'), Elixir.Enumerable.File.Stream.__load(Elixir))

    ElixirScript.Core.Functions.defimpl(protocol, Symbol.for('Elixir.Function'), Elixir.Enumerable.Function.__load(Elixir))

    ElixirScript.Core.Functions.defimpl(protocol, Symbol.for('Elixir.GenEvent.Stream'), Elixir.Enumerable.GenEvent.Stream.__load(Elixir))

    ElixirScript.Core.Functions.defimpl(protocol, Symbol.for('Elixir.HashDict'), Elixir.Enumerable.HashDict.__load(Elixir))

    ElixirScript.Core.Functions.defimpl(protocol, Symbol.for('Elixir.HashSet'), Elixir.Enumerable.HashSet.__load(Elixir))

    ElixirScript.Core.Functions.defimpl(protocol, Symbol.for('Elixir.IO.Stream'), Elixir.Enumerable.IO.Stream.__load(Elixir))

    ElixirScript.Core.Functions.defimpl(protocol, Array, Elixir.Enumerable.List.__load(Elixir))

    ElixirScript.Core.Functions.defimpl(protocol, Map, Elixir.Enumerable.Map.__load(Elixir))

    ElixirScript.Core.Functions.defimpl(protocol, Symbol.for('Elixir.MapSet'), Elixir.Enumerable.MapSet.__load(Elixir))

    ElixirScript.Core.Functions.defimpl(protocol, Symbol.for('Elixir.Range'), Elixir.Enumerable.Range.__load(Elixir))

    ElixirScript.Core.Functions.defimpl(protocol, Symbol.for('Elixir.Stream'), Elixir.Enumerable.Stream.__load(Elixir))

    const __exports = protocol;

    Elixir.Enumerable.__exports = __exports

    return __exports;
}
ElixirScript.Core.Functions.build_namespace(Elixir, 'Elixir.IO.Stream').__load = function(Elixir) {
    if (Elixir.IO.Stream.__exports)
        return Elixir.IO.Stream.__exports;

    function __info__(kind) {
        const __info__map__ = new Map([[Symbol.for('functions'), [new ElixirScript.Core.Tuple(Symbol.for('__build__'), 3), new ElixirScript.Core.Tuple(Symbol.for('__struct__'), 0), new ElixirScript.Core.Tuple(Symbol.for('__struct__'), 1)]], [Symbol.for('macros'), []], [Symbol.for('attributes'), [new ElixirScript.Core.Tuple(Symbol.for('vsn'), [37630496852656492041441033625927873379])]], [Symbol.for('compile'), [new ElixirScript.Core.Tuple(Symbol.for('options'), []), new ElixirScript.Core.Tuple(Symbol.for('version'), [55, 46, 49, 46, 50]), new ElixirScript.Core.Tuple(Symbol.for('source'), '/private/tmp/elixir-20170929-51947-wgj4qu/elixir-1.5.2/lib/elixir/lib/io/stream.ex')]], [Symbol.for('md5'), new ElixirScript.Core.BitString(ElixirScript.Core.BitString.integer(28), ElixirScript.Core.BitString.integer(79), ElixirScript.Core.BitString.integer(94), ElixirScript.Core.BitString.integer(188), ElixirScript.Core.BitString.integer(250), ElixirScript.Core.BitString.integer(71), ElixirScript.Core.BitString.integer(45), ElixirScript.Core.BitString.integer(85), ElixirScript.Core.BitString.integer(218), ElixirScript.Core.BitString.integer(223), ElixirScript.Core.BitString.integer(2), ElixirScript.Core.BitString.integer(53), ElixirScript.Core.BitString.integer(89), ElixirScript.Core.BitString.integer(242), ElixirScript.Core.BitString.integer(243), ElixirScript.Core.BitString.integer(99))], [Symbol.for('module'), Symbol.for('Elixir.IO.Stream')]]);

        const value = __info__map__.get(kind);

        if (value !== null) {
            return value;
        }

        throw new ElixirScript.Core.Patterns.MatchError(kind);
    }

    function __struct__(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return new Map([[Symbol.for('__struct__'), Elixir.IO.Stream.__load(Elixir)], [Symbol.for('device'), null], [Symbol.for('line_or_bytes'), Symbol.for('line')], [Symbol.for('raw'), true]]);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('kv576460752303356255')], __function_args__, (kv5764607523033562550) => {
                return true;
            })) !== null) {
                let [kv5764607523033562550] = __arg_matches__;

                const [map5764607523033562550, keys5764607523033562550] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                    values: [ElixirScript.Core.Patterns.variable('map576460752303356255'), ElixirScript.Core.Patterns.variable('keys576460752303356255')]
                }), Elixir.Enum.__load(Elixir).reduce(kv5764607523033562550, new ElixirScript.Core.Tuple(__struct__(), []), (...__function_args__) => {
                    function recur(...__function_args__) {
                        let __arg_matches__ = null;

                        if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                            values: [ElixirScript.Core.Patterns.variable('key576460752303356255'), ElixirScript.Core.Patterns.variable('val576460752303356255')]
                        }), ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                            values: [ElixirScript.Core.Patterns.variable('map576460752303356255'), ElixirScript.Core.Patterns.variable('keys576460752303356255')]
                        })], __function_args__, (key5764607523033562550, val5764607523033562550, map5764607523033562550, keys5764607523033562550) => {
                            return true;
                        })) !== null) {
                            let [key5764607523033562550, val5764607523033562550, map5764607523033562550, keys5764607523033562550] = __arg_matches__;

                            return new ElixirScript.Core.Tuple(ElixirScript.Core.maps.update(key5764607523033562550, val5764607523033562550, map5764607523033562550), Elixir.List.__load(Elixir).__delete__(keys5764607523033562550, key5764607523033562550));
                        }

                        throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
                    }

                    return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
                }));

                const _ref254081 = new ElixirScript.Core.Tuple(map5764607523033562550, keys5764607523033562550);

                return ElixirScript.Core.Patterns.defmatch(ElixirScript.Core.Patterns.clause([[]], () => {
                    return map5764607523033562550;
                }, () => {
                    return true;
                }), ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.variable('_')], () => {
                    return ElixirScript.Core.erlang.error(Elixir.ArgumentError.__load(Elixir).exception('the following keys must also be given when building ' + ('struct ' + (Elixir.String.Chars.__load(Elixir).to_string(Elixir.Kernel.__load(Elixir).inspect(Elixir.IO.Stream.__load(Elixir))) + (': ' + Elixir.String.Chars.__load(Elixir).to_string(Elixir.Kernel.__load(Elixir).inspect(keys5764607523033562550)))))));
                }, () => {
                    return true;
                })).call(this, keys5764607523033562550);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    const __exports = {
        __struct__,
        __MODULE__: Symbol.for('Elixir.IO.Stream'),
        __info__
    };

    Elixir.IO.Stream.__exports = __exports

    return __exports;
}
ElixirScript.Core.Functions.build_namespace(Elixir, 'Elixir.String.Chars').__load = function(Elixir) {
    if (Elixir.String.Chars.__exports)
        return Elixir.String.Chars.__exports;

    const protocol = ElixirScript.Core.Functions.defprotocol({
        to_string: function() {},
        __impl__: function() {}
    });

    ElixirScript.Core.Functions.defimpl(protocol, Symbol, Elixir.String.Chars.Atom.__load(Elixir))

    ElixirScript.Core.Functions.defimpl(protocol, ElixirScript.Core.BitString, Elixir.String.Chars.BitString.__load(Elixir))

    ElixirScript.Core.Functions.defimpl(protocol, Symbol.for('Elixir.Date'), Elixir.String.Chars.Date.__load(Elixir))

    ElixirScript.Core.Functions.defimpl(protocol, Symbol.for('Elixir.DateTime'), Elixir.String.Chars.DateTime.__load(Elixir))

    ElixirScript.Core.Functions.defimpl(protocol, ElixirScript.Core.Float, Elixir.String.Chars.Float.__load(Elixir))

    ElixirScript.Core.Functions.defimpl(protocol, ElixirScript.Core.Integer, Elixir.String.Chars.Integer.__load(Elixir))

    ElixirScript.Core.Functions.defimpl(protocol, Array, Elixir.String.Chars.List.__load(Elixir))

    ElixirScript.Core.Functions.defimpl(protocol, Symbol.for('Elixir.NaiveDateTime'), Elixir.String.Chars.NaiveDateTime.__load(Elixir))

    ElixirScript.Core.Functions.defimpl(protocol, Symbol.for('Elixir.Time'), Elixir.String.Chars.Time.__load(Elixir))

    ElixirScript.Core.Functions.defimpl(protocol, Symbol.for('Elixir.URI'), Elixir.String.Chars.URI.__load(Elixir))

    ElixirScript.Core.Functions.defimpl(protocol, Symbol.for('Elixir.Version'), Elixir.String.Chars.Version.__load(Elixir))

    ElixirScript.Core.Functions.defimpl(protocol, Symbol.for('Elixir.Version.Requirement'), Elixir.String.Chars.Version.Requirement.__load(Elixir))

    const __exports = protocol;

    Elixir.String.Chars.__exports = __exports

    return __exports;
}
ElixirScript.Core.Functions.build_namespace(Elixir, 'Elixir.Collectable').__load = function(Elixir) {
    if (Elixir.Collectable.__exports)
        return Elixir.Collectable.__exports;

    const protocol = ElixirScript.Core.Functions.defprotocol({
        into: function() {},
        __impl__: function() {}
    });

    ElixirScript.Core.Functions.defimpl(protocol, ElixirScript.Core.BitString, Elixir.Collectable.BitString.__load(Elixir))

    ElixirScript.Core.Functions.defimpl(protocol, Symbol.for('Elixir.File.Stream'), Elixir.Collectable.File.Stream.__load(Elixir))

    ElixirScript.Core.Functions.defimpl(protocol, Symbol.for('Elixir.HashDict'), Elixir.Collectable.HashDict.__load(Elixir))

    ElixirScript.Core.Functions.defimpl(protocol, Symbol.for('Elixir.HashSet'), Elixir.Collectable.HashSet.__load(Elixir))

    ElixirScript.Core.Functions.defimpl(protocol, Symbol.for('Elixir.IO.Stream'), Elixir.Collectable.IO.Stream.__load(Elixir))

    ElixirScript.Core.Functions.defimpl(protocol, Array, Elixir.Collectable.List.__load(Elixir))

    ElixirScript.Core.Functions.defimpl(protocol, Map, Elixir.Collectable.Map.__load(Elixir))

    ElixirScript.Core.Functions.defimpl(protocol, Symbol.for('Elixir.MapSet'), Elixir.Collectable.MapSet.__load(Elixir))

    const __exports = protocol;

    Elixir.Collectable.__exports = __exports

    return __exports;
}
ElixirScript.Core.Functions.build_namespace(Elixir, 'Elixir.IO.ANSI').__load = function(Elixir) {
    if (Elixir.IO.ANSI.__exports)
        return Elixir.IO.ANSI.__exports;

    function __info__(kind) {
        const __info__map__ = new Map([[Symbol.for('functions'), [new ElixirScript.Core.Tuple(Symbol.for('black'), 0), new ElixirScript.Core.Tuple(Symbol.for('black_background'), 0), new ElixirScript.Core.Tuple(Symbol.for('blink_off'), 0), new ElixirScript.Core.Tuple(Symbol.for('blink_rapid'), 0), new ElixirScript.Core.Tuple(Symbol.for('blink_slow'), 0), new ElixirScript.Core.Tuple(Symbol.for('blue'), 0), new ElixirScript.Core.Tuple(Symbol.for('blue_background'), 0), new ElixirScript.Core.Tuple(Symbol.for('bright'), 0), new ElixirScript.Core.Tuple(Symbol.for('clear'), 0), new ElixirScript.Core.Tuple(Symbol.for('clear_line'), 0), new ElixirScript.Core.Tuple(Symbol.for('color'), 1), new ElixirScript.Core.Tuple(Symbol.for('color'), 3), new ElixirScript.Core.Tuple(Symbol.for('color_background'), 1), new ElixirScript.Core.Tuple(Symbol.for('color_background'), 3), new ElixirScript.Core.Tuple(Symbol.for('conceal'), 0), new ElixirScript.Core.Tuple(Symbol.for('crossed_out'), 0), new ElixirScript.Core.Tuple(Symbol.for('cyan'), 0), new ElixirScript.Core.Tuple(Symbol.for('cyan_background'), 0), new ElixirScript.Core.Tuple(Symbol.for('default_background'), 0), new ElixirScript.Core.Tuple(Symbol.for('default_color'), 0), new ElixirScript.Core.Tuple(Symbol.for('enabled?'), 0), new ElixirScript.Core.Tuple(Symbol.for('encircled'), 0), new ElixirScript.Core.Tuple(Symbol.for('faint'), 0), new ElixirScript.Core.Tuple(Symbol.for('font_1'), 0), new ElixirScript.Core.Tuple(Symbol.for('font_2'), 0), new ElixirScript.Core.Tuple(Symbol.for('font_3'), 0), new ElixirScript.Core.Tuple(Symbol.for('font_4'), 0), new ElixirScript.Core.Tuple(Symbol.for('font_5'), 0), new ElixirScript.Core.Tuple(Symbol.for('font_6'), 0), new ElixirScript.Core.Tuple(Symbol.for('font_7'), 0), new ElixirScript.Core.Tuple(Symbol.for('font_8'), 0), new ElixirScript.Core.Tuple(Symbol.for('font_9'), 0), new ElixirScript.Core.Tuple(Symbol.for('format'), 1), new ElixirScript.Core.Tuple(Symbol.for('format'), 2), new ElixirScript.Core.Tuple(Symbol.for('format_fragment'), 1), new ElixirScript.Core.Tuple(Symbol.for('format_fragment'), 2), new ElixirScript.Core.Tuple(Symbol.for('framed'), 0), new ElixirScript.Core.Tuple(Symbol.for('green'), 0), new ElixirScript.Core.Tuple(Symbol.for('green_background'), 0), new ElixirScript.Core.Tuple(Symbol.for('home'), 0), new ElixirScript.Core.Tuple(Symbol.for('inverse'), 0), new ElixirScript.Core.Tuple(Symbol.for('inverse_off'), 0), new ElixirScript.Core.Tuple(Symbol.for('italic'), 0), new ElixirScript.Core.Tuple(Symbol.for('light_black'), 0), new ElixirScript.Core.Tuple(Symbol.for('light_black_background'), 0), new ElixirScript.Core.Tuple(Symbol.for('light_blue'), 0), new ElixirScript.Core.Tuple(Symbol.for('light_blue_background'), 0), new ElixirScript.Core.Tuple(Symbol.for('light_cyan'), 0), new ElixirScript.Core.Tuple(Symbol.for('light_cyan_background'), 0), new ElixirScript.Core.Tuple(Symbol.for('light_green'), 0), new ElixirScript.Core.Tuple(Symbol.for('light_green_background'), 0), new ElixirScript.Core.Tuple(Symbol.for('light_magenta'), 0), new ElixirScript.Core.Tuple(Symbol.for('light_magenta_background'), 0), new ElixirScript.Core.Tuple(Symbol.for('light_red'), 0), new ElixirScript.Core.Tuple(Symbol.for('light_red_background'), 0), new ElixirScript.Core.Tuple(Symbol.for('light_white'), 0), new ElixirScript.Core.Tuple(Symbol.for('light_white_background'), 0), new ElixirScript.Core.Tuple(Symbol.for('light_yellow'), 0), new ElixirScript.Core.Tuple(Symbol.for('light_yellow_background'), 0), new ElixirScript.Core.Tuple(Symbol.for('magenta'), 0), new ElixirScript.Core.Tuple(Symbol.for('magenta_background'), 0), new ElixirScript.Core.Tuple(Symbol.for('no_underline'), 0), new ElixirScript.Core.Tuple(Symbol.for('normal'), 0), new ElixirScript.Core.Tuple(Symbol.for('not_framed_encircled'), 0), new ElixirScript.Core.Tuple(Symbol.for('not_italic'), 0), new ElixirScript.Core.Tuple(Symbol.for('not_overlined'), 0), new ElixirScript.Core.Tuple(Symbol.for('overlined'), 0), new ElixirScript.Core.Tuple(Symbol.for('primary_font'), 0), new ElixirScript.Core.Tuple(Symbol.for('red'), 0), new ElixirScript.Core.Tuple(Symbol.for('red_background'), 0), new ElixirScript.Core.Tuple(Symbol.for('reset'), 0), new ElixirScript.Core.Tuple(Symbol.for('reverse'), 0), new ElixirScript.Core.Tuple(Symbol.for('reverse_off'), 0), new ElixirScript.Core.Tuple(Symbol.for('underline'), 0), new ElixirScript.Core.Tuple(Symbol.for('white'), 0), new ElixirScript.Core.Tuple(Symbol.for('white_background'), 0), new ElixirScript.Core.Tuple(Symbol.for('yellow'), 0), new ElixirScript.Core.Tuple(Symbol.for('yellow_background'), 0)]], [Symbol.for('macros'), []], [Symbol.for('attributes'), [new ElixirScript.Core.Tuple(Symbol.for('vsn'), [158029167479977175486042718696550944668])]], [Symbol.for('compile'), [new ElixirScript.Core.Tuple(Symbol.for('options'), []), new ElixirScript.Core.Tuple(Symbol.for('version'), [55, 46, 49, 46, 50]), new ElixirScript.Core.Tuple(Symbol.for('source'), '/private/tmp/elixir-20170929-51947-wgj4qu/elixir-1.5.2/lib/elixir/lib/io/ansi.ex')]], [Symbol.for('md5'), new ElixirScript.Core.BitString(ElixirScript.Core.BitString.integer(118), ElixirScript.Core.BitString.integer(227), ElixirScript.Core.BitString.integer(79), ElixirScript.Core.BitString.integer(129), ElixirScript.Core.BitString.integer(192), ElixirScript.Core.BitString.integer(212), ElixirScript.Core.BitString.integer(133), ElixirScript.Core.BitString.integer(84), ElixirScript.Core.BitString.integer(82), ElixirScript.Core.BitString.integer(71), ElixirScript.Core.BitString.integer(32), ElixirScript.Core.BitString.integer(107), ElixirScript.Core.BitString.integer(221), ElixirScript.Core.BitString.integer(103), ElixirScript.Core.BitString.integer(207), ElixirScript.Core.BitString.integer(156))], [Symbol.for('module'), Symbol.for('Elixir.IO.ANSI')]]);

        const value = __info__map__.get(kind);

        if (value !== null) {
            return value;
        }

        throw new ElixirScript.Core.Patterns.MatchError(kind);
    }

    function conceal(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return '[' + (Elixir.String.Chars.__load(Elixir).to_string(8) + 'm');
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function not_italic(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return '[' + (Elixir.String.Chars.__load(Elixir).to_string(23) + 'm');
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function clear_line(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return '[' + ('2' + 'K');
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function light_red_background(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return '[' + (Elixir.String.Chars.__load(Elixir).to_string(101) + 'm');
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function do_format(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.headTail(ElixirScript.Core.Patterns.variable('term'), ElixirScript.Core.Patterns.variable('rest')), ElixirScript.Core.Patterns.variable('rem'), ElixirScript.Core.Patterns.variable('acc'), ElixirScript.Core.Patterns.variable('emit?'), ElixirScript.Core.Patterns.variable('append_reset')], __function_args__, (term0, rest0, rem0, acc0, emit__qmark__0, append_reset0) => {
                return true;
            })) !== null) {
                let [term0, rest0, rem0, acc0, emit__qmark__0, append_reset0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, term0, ElixirScript.Core.Functions.concat(rest0, rem0), acc0, emit__qmark__0, append_reset0));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('term'), ElixirScript.Core.Patterns.variable('rem'), ElixirScript.Core.Patterns.variable('acc'), true, ElixirScript.Core.Patterns.variable('append_reset')], __function_args__, (term0, rem0, acc0, append_reset0) => {
                return ElixirScript.Core.erlang.is_atom(term0);
            })) !== null) {
                let [term0, rem0, acc0, append_reset0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, [], rem0, ElixirScript.Core.Functions.concat(acc0, format_sequence(term0)), true, ElixirScript.Core.Patterns.defmatch(ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.variable('x576460752303367900')], (x5764607523033679000) => {
                    return false;
                }, (x5764607523033679000) => {
                    return x5764607523033679000 === null || x5764607523033679000 === false;
                }), ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.variable('_')], () => {
                    return true;
                }, () => {
                    return true;
                })).call(this, append_reset0)));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('term'), ElixirScript.Core.Patterns.variable('rem'), ElixirScript.Core.Patterns.variable('acc'), false, ElixirScript.Core.Patterns.variable('append_reset')], __function_args__, (term0, rem0, acc0, append_reset0) => {
                return ElixirScript.Core.erlang.is_atom(term0);
            })) !== null) {
                let [term0, rem0, acc0, append_reset0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, [], rem0, acc0, false, append_reset0));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('term'), ElixirScript.Core.Patterns.variable('rem'), ElixirScript.Core.Patterns.variable('acc'), ElixirScript.Core.Patterns.variable('emit?'), ElixirScript.Core.Patterns.variable('append_reset')], __function_args__, (term0, rem0, acc0, emit__qmark__0, append_reset0) => {
                return ElixirScript.Core.erlang.not(ElixirScript.Core.erlang.is_list(term0));
            })) !== null) {
                let [term0, rem0, acc0, emit__qmark__0, append_reset0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, [], rem0, [acc0, term0], emit__qmark__0, append_reset0));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([[], ElixirScript.Core.Patterns.headTail(ElixirScript.Core.Patterns.variable('next'), ElixirScript.Core.Patterns.variable('rest')), ElixirScript.Core.Patterns.variable('acc'), ElixirScript.Core.Patterns.variable('emit?'), ElixirScript.Core.Patterns.variable('append_reset')], __function_args__, (next0, rest0, acc0, emit__qmark__0, append_reset0) => {
                return true;
            })) !== null) {
                let [next0, rest0, acc0, emit__qmark__0, append_reset0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, next0, rest0, acc0, emit__qmark__0, append_reset0));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([[], [], ElixirScript.Core.Patterns.variable('acc'), true, true], __function_args__, (acc0) => {
                return true;
            })) !== null) {
                let [acc0] = __arg_matches__;

                return ElixirScript.Core.Functions.concat(acc0, ElixirScript.Core.Functions.call_property(Elixir.IO.ANSI.__load(Elixir).reset));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([[], [], ElixirScript.Core.Patterns.variable('acc'), ElixirScript.Core.Patterns.variable('_emit?'), ElixirScript.Core.Patterns.variable('_append_reset')], __function_args__, (acc0, _emit__qmark__0, _append_reset0) => {
                return true;
            })) !== null) {
                let [acc0, _emit__qmark__0, _append_reset0] = __arg_matches__;

                return acc0;
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function reverse(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return '[' + (Elixir.String.Chars.__load(Elixir).to_string(7) + 'm');
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function default_background(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return '[' + (Elixir.String.Chars.__load(Elixir).to_string(49) + 'm');
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function red(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return '[' + (Elixir.String.Chars.__load(Elixir).to_string(31) + 'm');
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function black(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return '[' + (Elixir.String.Chars.__load(Elixir).to_string(30) + 'm');
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function light_cyan(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return '[' + (Elixir.String.Chars.__load(Elixir).to_string(96) + 'm');
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function light_red(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return '[' + (Elixir.String.Chars.__load(Elixir).to_string(91) + 'm');
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function font_8(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return '[' + (Elixir.String.Chars.__load(Elixir).to_string(18) + 'm');
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function font_2(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return '[' + (Elixir.String.Chars.__load(Elixir).to_string(12) + 'm');
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function light_green_background(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return '[' + (Elixir.String.Chars.__load(Elixir).to_string(102) + 'm');
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function light_cyan_background(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return '[' + (Elixir.String.Chars.__load(Elixir).to_string(106) + 'm');
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function font_9(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return '[' + (Elixir.String.Chars.__load(Elixir).to_string(19) + 'm');
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function default_color(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return '[' + (Elixir.String.Chars.__load(Elixir).to_string(39) + 'm');
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function not_overlined(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return '[' + (Elixir.String.Chars.__load(Elixir).to_string(55) + 'm');
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function italic(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return '[' + (Elixir.String.Chars.__load(Elixir).to_string(3) + 'm');
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function light_black(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return '[' + (Elixir.String.Chars.__load(Elixir).to_string(90) + 'm');
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function light_blue_background(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return '[' + (Elixir.String.Chars.__load(Elixir).to_string(104) + 'm');
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function font_7(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return '[' + (Elixir.String.Chars.__load(Elixir).to_string(17) + 'm');
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function light_magenta(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return '[' + (Elixir.String.Chars.__load(Elixir).to_string(95) + 'm');
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function white_background(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return '[' + (Elixir.String.Chars.__load(Elixir).to_string(47) + 'm');
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function blue(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return '[' + (Elixir.String.Chars.__load(Elixir).to_string(34) + 'm');
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function green(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return '[' + (Elixir.String.Chars.__load(Elixir).to_string(32) + 'm');
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function underline(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return '[' + (Elixir.String.Chars.__load(Elixir).to_string(4) + 'm');
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function primary_font(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return '[' + (Elixir.String.Chars.__load(Elixir).to_string(10) + 'm');
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function reset(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return '[' + (Elixir.String.Chars.__load(Elixir).to_string(0) + 'm');
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function inverse(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return '[' + (Elixir.String.Chars.__load(Elixir).to_string(7) + 'm');
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function clear(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return '[' + ('2' + 'J');
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function font_6(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return '[' + (Elixir.String.Chars.__load(Elixir).to_string(16) + 'm');
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function inverse_off(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return '[' + (Elixir.String.Chars.__load(Elixir).to_string(27) + 'm');
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function blink_off(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return '[' + (Elixir.String.Chars.__load(Elixir).to_string(25) + 'm');
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function green_background(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return '[' + (Elixir.String.Chars.__load(Elixir).to_string(42) + 'm');
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function framed(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return '[' + (Elixir.String.Chars.__load(Elixir).to_string(51) + 'm');
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function faint(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return '[' + (Elixir.String.Chars.__load(Elixir).to_string(2) + 'm');
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function overlined(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return '[' + (Elixir.String.Chars.__load(Elixir).to_string(53) + 'm');
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function font_5(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return '[' + (Elixir.String.Chars.__load(Elixir).to_string(15) + 'm');
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function bright(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return '[' + (Elixir.String.Chars.__load(Elixir).to_string(1) + 'm');
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function font_1(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return '[' + (Elixir.String.Chars.__load(Elixir).to_string(11) + 'm');
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function yellow_background(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return '[' + (Elixir.String.Chars.__load(Elixir).to_string(43) + 'm');
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function light_yellow_background(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return '[' + (Elixir.String.Chars.__load(Elixir).to_string(103) + 'm');
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function reverse_off(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return '[' + (Elixir.String.Chars.__load(Elixir).to_string(27) + 'm');
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function light_green(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return '[' + (Elixir.String.Chars.__load(Elixir).to_string(92) + 'm');
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function red_background(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return '[' + (Elixir.String.Chars.__load(Elixir).to_string(41) + 'm');
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function light_yellow(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return '[' + (Elixir.String.Chars.__load(Elixir).to_string(93) + 'm');
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function normal(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return '[' + (Elixir.String.Chars.__load(Elixir).to_string(22) + 'm');
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function font_3(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return '[' + (Elixir.String.Chars.__load(Elixir).to_string(13) + 'm');
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function cyan(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return '[' + (Elixir.String.Chars.__load(Elixir).to_string(36) + 'm');
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function crossed_out(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return '[' + (Elixir.String.Chars.__load(Elixir).to_string(9) + 'm');
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function blink_slow(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return '[' + (Elixir.String.Chars.__load(Elixir).to_string(5) + 'm');
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function blink_rapid(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return '[' + (Elixir.String.Chars.__load(Elixir).to_string(6) + 'm');
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function light_magenta_background(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return '[' + (Elixir.String.Chars.__load(Elixir).to_string(105) + 'm');
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function font_4(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return '[' + (Elixir.String.Chars.__load(Elixir).to_string(14) + 'm');
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function cyan_background(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return '[' + (Elixir.String.Chars.__load(Elixir).to_string(46) + 'm');
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function black_background(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return '[' + (Elixir.String.Chars.__load(Elixir).to_string(40) + 'm');
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function yellow(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return '[' + (Elixir.String.Chars.__load(Elixir).to_string(33) + 'm');
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function encircled(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return '[' + (Elixir.String.Chars.__load(Elixir).to_string(52) + 'm');
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function blue_background(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return '[' + (Elixir.String.Chars.__load(Elixir).to_string(44) + 'm');
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function home(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return '[' + ('' + 'H');
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function light_black_background(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return '[' + (Elixir.String.Chars.__load(Elixir).to_string(100) + 'm');
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function magenta_background(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return '[' + (Elixir.String.Chars.__load(Elixir).to_string(45) + 'm');
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function magenta(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return '[' + (Elixir.String.Chars.__load(Elixir).to_string(35) + 'm');
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function format_sequence(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('reset')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return reset();
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('bright')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return bright();
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('faint')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return faint();
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('italic')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return italic();
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('underline')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return underline();
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('blink_slow')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return blink_slow();
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('blink_rapid')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return blink_rapid();
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('inverse')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return inverse();
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('reverse')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return reverse();
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('conceal')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return conceal();
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('crossed_out')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return crossed_out();
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('primary_font')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return primary_font();
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('font_1')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return font_1();
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('font_2')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return font_2();
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('font_3')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return font_3();
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('font_4')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return font_4();
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('font_5')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return font_5();
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('font_6')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return font_6();
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('font_7')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return font_7();
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('font_8')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return font_8();
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('font_9')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return font_9();
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('normal')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return normal();
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('not_italic')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return not_italic();
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('no_underline')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return no_underline();
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('blink_off')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return blink_off();
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('inverse_off')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return inverse_off();
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('reverse_off')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return reverse_off();
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('black')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return black();
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('light_black')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return light_black();
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('black_background')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return black_background();
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('light_black_background')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return light_black_background();
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('red')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return red();
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('light_red')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return light_red();
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('red_background')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return red_background();
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('light_red_background')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return light_red_background();
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('green')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return green();
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('light_green')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return light_green();
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('green_background')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return green_background();
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('light_green_background')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return light_green_background();
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('yellow')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return yellow();
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('light_yellow')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return light_yellow();
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('yellow_background')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return yellow_background();
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('light_yellow_background')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return light_yellow_background();
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('blue')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return blue();
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('light_blue')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return light_blue();
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('blue_background')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return blue_background();
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('light_blue_background')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return light_blue_background();
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('magenta')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return magenta();
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('light_magenta')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return light_magenta();
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('magenta_background')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return magenta_background();
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('light_magenta_background')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return light_magenta_background();
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('cyan')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return cyan();
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('light_cyan')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return light_cyan();
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('cyan_background')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return cyan_background();
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('light_cyan_background')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return light_cyan_background();
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('white')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return white();
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('light_white')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return light_white();
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('white_background')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return white_background();
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('light_white_background')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return light_white_background();
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('default_color')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return default_color();
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('default_background')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return default_background();
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('framed')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return framed();
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('encircled')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return encircled();
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('overlined')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return overlined();
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('not_framed_encircled')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return not_framed_encircled();
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('not_overlined')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return not_overlined();
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('home')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return home();
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('clear')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return clear();
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('clear_line')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return clear_line();
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('other')], __function_args__, (other0) => {
                return true;
            })) !== null) {
                let [other0] = __arg_matches__;

                return ElixirScript.Core.erlang.error(Elixir.ArgumentError.__load(Elixir).exception('invalid ANSI sequence specification: ' + Elixir.String.Chars.__load(Elixir).to_string(Elixir.Kernel.__load(Elixir).inspect(other0))));
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function no_underline(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return '[' + (Elixir.String.Chars.__load(Elixir).to_string(24) + 'm');
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function not_framed_encircled(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return '[' + (Elixir.String.Chars.__load(Elixir).to_string(54) + 'm');
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function light_white(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return '[' + (Elixir.String.Chars.__load(Elixir).to_string(97) + 'm');
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function format_fragment(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('chardata'), ElixirScript.Core.Patterns.variable('emit?')], __function_args__, (chardata0, emit__qmark__0) => {
                return ElixirScript.Core.erlang.is_boolean(emit__qmark__0);
            })) !== null) {
                let [chardata0, emit__qmark__0] = __arg_matches__;

                return do_format(chardata0, [], [], emit__qmark__0, false);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function white(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return '[' + (Elixir.String.Chars.__load(Elixir).to_string(37) + 'm');
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function light_white_background(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return '[' + (Elixir.String.Chars.__load(Elixir).to_string(107) + 'm');
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function light_blue(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return '[' + (Elixir.String.Chars.__load(Elixir).to_string(94) + 'm');
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    const __exports = {
        conceal,
        not_italic,
        clear_line,
        light_red_background,
        reverse,
        default_background,
        red,
        black,
        light_cyan,
        light_red,
        font_8,
        font_2,
        light_green_background,
        light_cyan_background,
        font_9,
        default_color,
        not_overlined,
        italic,
        light_black,
        light_blue_background,
        font_7,
        light_magenta,
        white_background,
        blue,
        green,
        underline,
        primary_font,
        reset,
        inverse,
        clear,
        font_6,
        inverse_off,
        blink_off,
        green_background,
        framed,
        faint,
        overlined,
        font_5,
        bright,
        font_1,
        yellow_background,
        light_yellow_background,
        reverse_off,
        light_green,
        red_background,
        light_yellow,
        normal,
        font_3,
        cyan,
        crossed_out,
        blink_slow,
        blink_rapid,
        light_magenta_background,
        font_4,
        cyan_background,
        black_background,
        yellow,
        encircled,
        blue_background,
        home,
        light_black_background,
        magenta_background,
        magenta,
        no_underline,
        not_framed_encircled,
        light_white,
        format_fragment,
        white,
        light_white_background,
        light_blue,
        __MODULE__: Symbol.for('Elixir.IO.ANSI'),
        __info__
    };

    Elixir.IO.ANSI.__exports = __exports

    return __exports;
}
ElixirScript.Core.Functions.build_namespace(Elixir, 'Elixir.Regex').__load = function(Elixir) {
    if (Elixir.Regex.__exports)
        return Elixir.Regex.__exports;

    function __info__(kind) {
        const __info__map__ = new Map([[Symbol.for('functions'), [new ElixirScript.Core.Tuple(Symbol.for('__struct__'), 0), new ElixirScript.Core.Tuple(Symbol.for('__struct__'), 1), new ElixirScript.Core.Tuple(Symbol.for('compile'), 1), new ElixirScript.Core.Tuple(Symbol.for('compile'), 2), new ElixirScript.Core.Tuple(Symbol.for('compile!'), 1), new ElixirScript.Core.Tuple(Symbol.for('compile!'), 2), new ElixirScript.Core.Tuple(Symbol.for('escape'), 1), new ElixirScript.Core.Tuple(Symbol.for('match?'), 2), new ElixirScript.Core.Tuple(Symbol.for('named_captures'), 2), new ElixirScript.Core.Tuple(Symbol.for('named_captures'), 3), new ElixirScript.Core.Tuple(Symbol.for('names'), 1), new ElixirScript.Core.Tuple(Symbol.for('opts'), 1), new ElixirScript.Core.Tuple(Symbol.for('re_pattern'), 1), new ElixirScript.Core.Tuple(Symbol.for('recompile'), 1), new ElixirScript.Core.Tuple(Symbol.for('recompile!'), 1), new ElixirScript.Core.Tuple(Symbol.for('regex?'), 1), new ElixirScript.Core.Tuple(Symbol.for('replace'), 3), new ElixirScript.Core.Tuple(Symbol.for('replace'), 4), new ElixirScript.Core.Tuple(Symbol.for('run'), 2), new ElixirScript.Core.Tuple(Symbol.for('run'), 3), new ElixirScript.Core.Tuple(Symbol.for('scan'), 2), new ElixirScript.Core.Tuple(Symbol.for('scan'), 3), new ElixirScript.Core.Tuple(Symbol.for('source'), 1), new ElixirScript.Core.Tuple(Symbol.for('split'), 2), new ElixirScript.Core.Tuple(Symbol.for('split'), 3), new ElixirScript.Core.Tuple(Symbol.for('unescape_map'), 1), new ElixirScript.Core.Tuple(Symbol.for('version'), 0)]], [Symbol.for('macros'), []], [Symbol.for('attributes'), [new ElixirScript.Core.Tuple(Symbol.for('vsn'), [235365269208965702288519754308221016813])]], [Symbol.for('compile'), [new ElixirScript.Core.Tuple(Symbol.for('options'), []), new ElixirScript.Core.Tuple(Symbol.for('version'), [55, 46, 49, 46, 50]), new ElixirScript.Core.Tuple(Symbol.for('source'), '/private/tmp/elixir-20170929-51947-wgj4qu/elixir-1.5.2/lib/elixir/lib/regex.ex')]], [Symbol.for('md5'), new ElixirScript.Core.BitString(ElixirScript.Core.BitString.integer(177), ElixirScript.Core.BitString.integer(17), ElixirScript.Core.BitString.integer(179), ElixirScript.Core.BitString.integer(181), ElixirScript.Core.BitString.integer(54), ElixirScript.Core.BitString.integer(92), ElixirScript.Core.BitString.integer(131), ElixirScript.Core.BitString.integer(89), ElixirScript.Core.BitString.integer(89), ElixirScript.Core.BitString.integer(249), ElixirScript.Core.BitString.integer(21), ElixirScript.Core.BitString.integer(210), ElixirScript.Core.BitString.integer(144), ElixirScript.Core.BitString.integer(62), ElixirScript.Core.BitString.integer(26), ElixirScript.Core.BitString.integer(237))], [Symbol.for('module'), Symbol.for('Elixir.Regex')]]);

        const value = __info__map__.get(kind);

        if (value !== null) {
            return value;
        }

        throw new ElixirScript.Core.Patterns.MatchError(kind);
    }

    function __struct__(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return new Map([[Symbol.for('__struct__'), Elixir.Regex.__load(Elixir)], [Symbol.for('opts'), ''], [Symbol.for('re_pattern'), null], [Symbol.for('re_version'), ''], [Symbol.for('source'), '']]);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('kv576460752303306845')], __function_args__, (kv5764607523033068450) => {
                return true;
            })) !== null) {
                let [kv5764607523033068450] = __arg_matches__;

                const [map5764607523033068450, keys5764607523033068450] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                    values: [ElixirScript.Core.Patterns.variable('map576460752303306845'), ElixirScript.Core.Patterns.variable('keys576460752303306845')]
                }), Elixir.Enum.__load(Elixir).reduce(kv5764607523033068450, new ElixirScript.Core.Tuple(__struct__(), []), (...__function_args__) => {
                    function recur(...__function_args__) {
                        let __arg_matches__ = null;

                        if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                            values: [ElixirScript.Core.Patterns.variable('key576460752303306845'), ElixirScript.Core.Patterns.variable('val576460752303306845')]
                        }), ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                            values: [ElixirScript.Core.Patterns.variable('map576460752303306845'), ElixirScript.Core.Patterns.variable('keys576460752303306845')]
                        })], __function_args__, (key5764607523033068450, val5764607523033068450, map5764607523033068450, keys5764607523033068450) => {
                            return true;
                        })) !== null) {
                            let [key5764607523033068450, val5764607523033068450, map5764607523033068450, keys5764607523033068450] = __arg_matches__;

                            return new ElixirScript.Core.Tuple(ElixirScript.Core.maps.update(key5764607523033068450, val5764607523033068450, map5764607523033068450), Elixir.List.__load(Elixir).__delete__(keys5764607523033068450, key5764607523033068450));
                        }

                        throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
                    }

                    return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
                }));

                const _ref4618449 = new ElixirScript.Core.Tuple(map5764607523033068450, keys5764607523033068450);

                return ElixirScript.Core.Patterns.defmatch(ElixirScript.Core.Patterns.clause([[]], () => {
                    return map5764607523033068450;
                }, () => {
                    return true;
                }), ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.variable('_')], () => {
                    return ElixirScript.Core.erlang.error(Elixir.ArgumentError.__load(Elixir).exception('the following keys must also be given when building ' + ('struct ' + (Elixir.String.Chars.__load(Elixir).to_string(Elixir.Kernel.__load(Elixir).inspect(Elixir.Regex.__load(Elixir))) + (': ' + Elixir.String.Chars.__load(Elixir).to_string(Elixir.Kernel.__load(Elixir).inspect(keys5764607523033068450)))))));
                }, () => {
                    return true;
                })).call(this, keys5764607523033068450);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    const __exports = {
        __struct__,
        __MODULE__: Symbol.for('Elixir.Regex'),
        __info__
    };

    Elixir.Regex.__exports = __exports

    return __exports;
}
ElixirScript.Core.Functions.build_namespace(Elixir, 'Elixir.Regex.CompileError').__load = function(Elixir) {
    if (Elixir.Regex.CompileError.__exports)
        return Elixir.Regex.CompileError.__exports;

    function __info__(kind) {
        const __info__map__ = new Map([[Symbol.for('functions'), [new ElixirScript.Core.Tuple(Symbol.for('__struct__'), 0), new ElixirScript.Core.Tuple(Symbol.for('__struct__'), 1), new ElixirScript.Core.Tuple(Symbol.for('exception'), 1), new ElixirScript.Core.Tuple(Symbol.for('message'), 1)]], [Symbol.for('macros'), []], [Symbol.for('attributes'), [new ElixirScript.Core.Tuple(Symbol.for('vsn'), [86161642181568589937742131466076747498]), new ElixirScript.Core.Tuple(Symbol.for('behaviour'), [Elixir.Exception.__load(Elixir)])]], [Symbol.for('compile'), [new ElixirScript.Core.Tuple(Symbol.for('options'), []), new ElixirScript.Core.Tuple(Symbol.for('version'), [55, 46, 49, 46, 50]), new ElixirScript.Core.Tuple(Symbol.for('source'), '/private/tmp/elixir-20170929-51947-wgj4qu/elixir-1.5.2/lib/elixir/lib/regex.ex')]], [Symbol.for('md5'), new ElixirScript.Core.BitString(ElixirScript.Core.BitString.integer(64), ElixirScript.Core.BitString.integer(210), ElixirScript.Core.BitString.integer(32), ElixirScript.Core.BitString.integer(240), ElixirScript.Core.BitString.integer(191), ElixirScript.Core.BitString.integer(52), ElixirScript.Core.BitString.integer(177), ElixirScript.Core.BitString.integer(168), ElixirScript.Core.BitString.integer(230), ElixirScript.Core.BitString.integer(77), ElixirScript.Core.BitString.integer(204), ElixirScript.Core.BitString.integer(223), ElixirScript.Core.BitString.integer(143), ElixirScript.Core.BitString.integer(72), ElixirScript.Core.BitString.integer(246), ElixirScript.Core.BitString.integer(234))], [Symbol.for('module'), Symbol.for('Elixir.Regex.CompileError')]]);

        const value = __info__map__.get(kind);

        if (value !== null) {
            return value;
        }

        throw new ElixirScript.Core.Patterns.MatchError(kind);
    }

    function __struct__(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return new Map([[Symbol.for('__exception__'), true], [Symbol.for('__struct__'), Elixir.Regex.CompileError.__load(Elixir)], [Symbol.for('message'), 'regex could not be compiled']]);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('kv576460752303314108')], __function_args__, (kv5764607523033141080) => {
                return true;
            })) !== null) {
                let [kv5764607523033141080] = __arg_matches__;

                const [map5764607523033141080, keys5764607523033141080] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                    values: [ElixirScript.Core.Patterns.variable('map576460752303314108'), ElixirScript.Core.Patterns.variable('keys576460752303314108')]
                }), Elixir.Enum.__load(Elixir).reduce(kv5764607523033141080, new ElixirScript.Core.Tuple(__struct__(), []), (...__function_args__) => {
                    function recur(...__function_args__) {
                        let __arg_matches__ = null;

                        if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                            values: [ElixirScript.Core.Patterns.variable('key576460752303314108'), ElixirScript.Core.Patterns.variable('val576460752303314108')]
                        }), ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                            values: [ElixirScript.Core.Patterns.variable('map576460752303314108'), ElixirScript.Core.Patterns.variable('keys576460752303314108')]
                        })], __function_args__, (key5764607523033141080, val5764607523033141080, map5764607523033141080, keys5764607523033141080) => {
                            return true;
                        })) !== null) {
                            let [key5764607523033141080, val5764607523033141080, map5764607523033141080, keys5764607523033141080] = __arg_matches__;

                            return new ElixirScript.Core.Tuple(ElixirScript.Core.maps.update(key5764607523033141080, val5764607523033141080, map5764607523033141080), Elixir.List.__load(Elixir).__delete__(keys5764607523033141080, key5764607523033141080));
                        }

                        throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
                    }

                    return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
                }));

                const _ref8075028 = new ElixirScript.Core.Tuple(map5764607523033141080, keys5764607523033141080);

                return ElixirScript.Core.Patterns.defmatch(ElixirScript.Core.Patterns.clause([[]], () => {
                    return map5764607523033141080;
                }, () => {
                    return true;
                }), ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.variable('_')], () => {
                    return ElixirScript.Core.erlang.error(Elixir.ArgumentError.__load(Elixir).exception('the following keys must also be given when building ' + ('struct ' + (Elixir.String.Chars.__load(Elixir).to_string(Elixir.Kernel.__load(Elixir).inspect(Elixir.Regex.CompileError.__load(Elixir))) + (': ' + Elixir.String.Chars.__load(Elixir).to_string(Elixir.Kernel.__load(Elixir).inspect(keys5764607523033141080)))))));
                }, () => {
                    return true;
                })).call(this, keys5764607523033141080);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    const __exports = {
        __struct__,
        __MODULE__: Symbol.for('Elixir.Regex.CompileError'),
        __info__
    };

    Elixir.Regex.CompileError.__exports = __exports

    return __exports;
}
ElixirScript.Core.Functions.build_namespace(Elixir, 'Elixir.DateTime').__load = function(Elixir) {
    if (Elixir.DateTime.__exports)
        return Elixir.DateTime.__exports;

    function __info__(kind) {
        const __info__map__ = new Map([[Symbol.for('functions'), [new ElixirScript.Core.Tuple(Symbol.for('__struct__'), 0), new ElixirScript.Core.Tuple(Symbol.for('__struct__'), 1), new ElixirScript.Core.Tuple(Symbol.for('compare'), 2), new ElixirScript.Core.Tuple(Symbol.for('convert'), 2), new ElixirScript.Core.Tuple(Symbol.for('convert!'), 2), new ElixirScript.Core.Tuple(Symbol.for('diff'), 2), new ElixirScript.Core.Tuple(Symbol.for('diff'), 3), new ElixirScript.Core.Tuple(Symbol.for('from_iso8601'), 1), new ElixirScript.Core.Tuple(Symbol.for('from_iso8601'), 2), new ElixirScript.Core.Tuple(Symbol.for('from_naive'), 2), new ElixirScript.Core.Tuple(Symbol.for('from_naive!'), 2), new ElixirScript.Core.Tuple(Symbol.for('from_unix'), 1), new ElixirScript.Core.Tuple(Symbol.for('from_unix'), 2), new ElixirScript.Core.Tuple(Symbol.for('from_unix'), 3), new ElixirScript.Core.Tuple(Symbol.for('from_unix!'), 1), new ElixirScript.Core.Tuple(Symbol.for('from_unix!'), 2), new ElixirScript.Core.Tuple(Symbol.for('from_unix!'), 3), new ElixirScript.Core.Tuple(Symbol.for('to_date'), 1), new ElixirScript.Core.Tuple(Symbol.for('to_iso8601'), 1), new ElixirScript.Core.Tuple(Symbol.for('to_iso8601'), 2), new ElixirScript.Core.Tuple(Symbol.for('to_naive'), 1), new ElixirScript.Core.Tuple(Symbol.for('to_string'), 1), new ElixirScript.Core.Tuple(Symbol.for('to_time'), 1), new ElixirScript.Core.Tuple(Symbol.for('to_unix'), 1), new ElixirScript.Core.Tuple(Symbol.for('to_unix'), 2), new ElixirScript.Core.Tuple(Symbol.for('utc_now'), 0), new ElixirScript.Core.Tuple(Symbol.for('utc_now'), 1)]], [Symbol.for('macros'), []], [Symbol.for('attributes'), [new ElixirScript.Core.Tuple(Symbol.for('vsn'), [82431050013217002526186618840882955981])]], [Symbol.for('compile'), [new ElixirScript.Core.Tuple(Symbol.for('options'), []), new ElixirScript.Core.Tuple(Symbol.for('version'), [55, 46, 49, 46, 50]), new ElixirScript.Core.Tuple(Symbol.for('source'), '/private/tmp/elixir-20170929-51947-wgj4qu/elixir-1.5.2/lib/elixir/lib/calendar/datetime.ex')]], [Symbol.for('md5'), new ElixirScript.Core.BitString(ElixirScript.Core.BitString.integer(62), ElixirScript.Core.BitString.integer(3), ElixirScript.Core.BitString.integer(164), ElixirScript.Core.BitString.integer(139), ElixirScript.Core.BitString.integer(181), ElixirScript.Core.BitString.integer(58), ElixirScript.Core.BitString.integer(25), ElixirScript.Core.BitString.integer(164), ElixirScript.Core.BitString.integer(96), ElixirScript.Core.BitString.integer(91), ElixirScript.Core.BitString.integer(170), ElixirScript.Core.BitString.integer(194), ElixirScript.Core.BitString.integer(68), ElixirScript.Core.BitString.integer(241), ElixirScript.Core.BitString.integer(70), ElixirScript.Core.BitString.integer(205))], [Symbol.for('module'), Symbol.for('Elixir.DateTime')]]);

        const value = __info__map__.get(kind);

        if (value !== null) {
            return value;
        }

        throw new ElixirScript.Core.Patterns.MatchError(kind);
    }

    function __struct__(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return new Map([[Symbol.for('__struct__'), Elixir.DateTime.__load(Elixir)], [Symbol.for('calendar'), Elixir.Calendar.ISO.__load(Elixir)], [Symbol.for('day'), null], [Symbol.for('hour'), null], [Symbol.for('microsecond'), new ElixirScript.Core.Tuple(0, 0)], [Symbol.for('minute'), null], [Symbol.for('month'), null], [Symbol.for('second'), null], [Symbol.for('std_offset'), null], [Symbol.for('time_zone'), null], [Symbol.for('utc_offset'), null], [Symbol.for('year'), null], [Symbol.for('zone_abbr'), null]]);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('kv576460752303413693')], __function_args__, (kv5764607523034136930) => {
                return true;
            })) !== null) {
                let [kv5764607523034136930] = __arg_matches__;

                const [map5764607523034136930, keys5764607523034136930] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                    values: [ElixirScript.Core.Patterns.variable('map576460752303413693'), ElixirScript.Core.Patterns.variable('keys576460752303413693')]
                }), Elixir.Enum.__load(Elixir).reduce(kv5764607523034136930, new ElixirScript.Core.Tuple(__struct__(), [Symbol.for('year'), Symbol.for('month'), Symbol.for('day'), Symbol.for('hour'), Symbol.for('minute'), Symbol.for('second'), Symbol.for('time_zone'), Symbol.for('zone_abbr'), Symbol.for('utc_offset'), Symbol.for('std_offset')]), (...__function_args__) => {
                    function recur(...__function_args__) {
                        let __arg_matches__ = null;

                        if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                            values: [ElixirScript.Core.Patterns.variable('key576460752303413693'), ElixirScript.Core.Patterns.variable('val576460752303413693')]
                        }), ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                            values: [ElixirScript.Core.Patterns.variable('map576460752303413693'), ElixirScript.Core.Patterns.variable('keys576460752303413693')]
                        })], __function_args__, (key5764607523034136930, val5764607523034136930, map5764607523034136930, keys5764607523034136930) => {
                            return true;
                        })) !== null) {
                            let [key5764607523034136930, val5764607523034136930, map5764607523034136930, keys5764607523034136930] = __arg_matches__;

                            return new ElixirScript.Core.Tuple(ElixirScript.Core.maps.update(key5764607523034136930, val5764607523034136930, map5764607523034136930), Elixir.List.__load(Elixir).__delete__(keys5764607523034136930, key5764607523034136930));
                        }

                        throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
                    }

                    return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
                }));

                const _ref9135302 = new ElixirScript.Core.Tuple(map5764607523034136930, keys5764607523034136930);

                return ElixirScript.Core.Patterns.defmatch(ElixirScript.Core.Patterns.clause([[]], () => {
                    return map5764607523034136930;
                }, () => {
                    return true;
                }), ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.variable('_')], () => {
                    return ElixirScript.Core.erlang.error(Elixir.ArgumentError.__load(Elixir).exception('the following keys must also be given when building ' + ('struct ' + (Elixir.String.Chars.__load(Elixir).to_string(Elixir.Kernel.__load(Elixir).inspect(Elixir.DateTime.__load(Elixir))) + (': ' + Elixir.String.Chars.__load(Elixir).to_string(Elixir.Kernel.__load(Elixir).inspect(keys5764607523034136930)))))));
                }, () => {
                    return true;
                })).call(this, keys5764607523034136930);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    const __exports = {
        __struct__,
        __MODULE__: Symbol.for('Elixir.DateTime'),
        __info__
    };

    Elixir.DateTime.__exports = __exports

    return __exports;
}
ElixirScript.Core.Functions.build_namespace(Elixir, 'Elixir.NaiveDateTime').__load = function(Elixir) {
    if (Elixir.NaiveDateTime.__exports)
        return Elixir.NaiveDateTime.__exports;

    function __info__(kind) {
        const __info__map__ = new Map([[Symbol.for('functions'), [new ElixirScript.Core.Tuple(Symbol.for('__struct__'), 0), new ElixirScript.Core.Tuple(Symbol.for('__struct__'), 1), new ElixirScript.Core.Tuple(Symbol.for('add'), 2), new ElixirScript.Core.Tuple(Symbol.for('add'), 3), new ElixirScript.Core.Tuple(Symbol.for('compare'), 2), new ElixirScript.Core.Tuple(Symbol.for('convert'), 2), new ElixirScript.Core.Tuple(Symbol.for('convert!'), 2), new ElixirScript.Core.Tuple(Symbol.for('diff'), 2), new ElixirScript.Core.Tuple(Symbol.for('diff'), 3), new ElixirScript.Core.Tuple(Symbol.for('from_erl'), 1), new ElixirScript.Core.Tuple(Symbol.for('from_erl'), 2), new ElixirScript.Core.Tuple(Symbol.for('from_erl'), 3), new ElixirScript.Core.Tuple(Symbol.for('from_erl!'), 1), new ElixirScript.Core.Tuple(Symbol.for('from_erl!'), 2), new ElixirScript.Core.Tuple(Symbol.for('from_iso8601'), 1), new ElixirScript.Core.Tuple(Symbol.for('from_iso8601'), 2), new ElixirScript.Core.Tuple(Symbol.for('from_iso8601!'), 1), new ElixirScript.Core.Tuple(Symbol.for('from_iso8601!'), 2), new ElixirScript.Core.Tuple(Symbol.for('new'), 2), new ElixirScript.Core.Tuple(Symbol.for('new'), 6), new ElixirScript.Core.Tuple(Symbol.for('new'), 7), new ElixirScript.Core.Tuple(Symbol.for('new'), 8), new ElixirScript.Core.Tuple(Symbol.for('to_date'), 1), new ElixirScript.Core.Tuple(Symbol.for('to_erl'), 1), new ElixirScript.Core.Tuple(Symbol.for('to_iso8601'), 1), new ElixirScript.Core.Tuple(Symbol.for('to_iso8601'), 2), new ElixirScript.Core.Tuple(Symbol.for('to_string'), 1), new ElixirScript.Core.Tuple(Symbol.for('to_time'), 1), new ElixirScript.Core.Tuple(Symbol.for('utc_now'), 0), new ElixirScript.Core.Tuple(Symbol.for('utc_now'), 1)]], [Symbol.for('macros'), []], [Symbol.for('attributes'), [new ElixirScript.Core.Tuple(Symbol.for('vsn'), [21127166702708988025883778664433729371])]], [Symbol.for('compile'), [new ElixirScript.Core.Tuple(Symbol.for('options'), []), new ElixirScript.Core.Tuple(Symbol.for('version'), [55, 46, 49, 46, 50]), new ElixirScript.Core.Tuple(Symbol.for('source'), '/private/tmp/elixir-20170929-51947-wgj4qu/elixir-1.5.2/lib/elixir/lib/calendar/naive_datetime.ex')]], [Symbol.for('md5'), new ElixirScript.Core.BitString(ElixirScript.Core.BitString.integer(15), ElixirScript.Core.BitString.integer(228), ElixirScript.Core.BitString.integer(241), ElixirScript.Core.BitString.integer(189), ElixirScript.Core.BitString.integer(153), ElixirScript.Core.BitString.integer(0), ElixirScript.Core.BitString.integer(192), ElixirScript.Core.BitString.integer(42), ElixirScript.Core.BitString.integer(176), ElixirScript.Core.BitString.integer(49), ElixirScript.Core.BitString.integer(51), ElixirScript.Core.BitString.integer(150), ElixirScript.Core.BitString.integer(199), ElixirScript.Core.BitString.integer(232), ElixirScript.Core.BitString.integer(63), ElixirScript.Core.BitString.integer(91))], [Symbol.for('module'), Symbol.for('Elixir.NaiveDateTime')]]);

        const value = __info__map__.get(kind);

        if (value !== null) {
            return value;
        }

        throw new ElixirScript.Core.Patterns.MatchError(kind);
    }

    function __struct__(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return new Map([[Symbol.for('__struct__'), Elixir.NaiveDateTime.__load(Elixir)], [Symbol.for('calendar'), Elixir.Calendar.ISO.__load(Elixir)], [Symbol.for('day'), null], [Symbol.for('hour'), null], [Symbol.for('microsecond'), new ElixirScript.Core.Tuple(0, 0)], [Symbol.for('minute'), null], [Symbol.for('month'), null], [Symbol.for('second'), null], [Symbol.for('year'), null]]);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('kv576460752303414428')], __function_args__, (kv5764607523034144280) => {
                return true;
            })) !== null) {
                let [kv5764607523034144280] = __arg_matches__;

                const [map5764607523034144280, keys5764607523034144280] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                    values: [ElixirScript.Core.Patterns.variable('map576460752303414428'), ElixirScript.Core.Patterns.variable('keys576460752303414428')]
                }), Elixir.Enum.__load(Elixir).reduce(kv5764607523034144280, new ElixirScript.Core.Tuple(__struct__(), [Symbol.for('year'), Symbol.for('month'), Symbol.for('day'), Symbol.for('hour'), Symbol.for('minute'), Symbol.for('second')]), (...__function_args__) => {
                    function recur(...__function_args__) {
                        let __arg_matches__ = null;

                        if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                            values: [ElixirScript.Core.Patterns.variable('key576460752303414428'), ElixirScript.Core.Patterns.variable('val576460752303414428')]
                        }), ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                            values: [ElixirScript.Core.Patterns.variable('map576460752303414428'), ElixirScript.Core.Patterns.variable('keys576460752303414428')]
                        })], __function_args__, (key5764607523034144280, val5764607523034144280, map5764607523034144280, keys5764607523034144280) => {
                            return true;
                        })) !== null) {
                            let [key5764607523034144280, val5764607523034144280, map5764607523034144280, keys5764607523034144280] = __arg_matches__;

                            return new ElixirScript.Core.Tuple(ElixirScript.Core.maps.update(key5764607523034144280, val5764607523034144280, map5764607523034144280), Elixir.List.__load(Elixir).__delete__(keys5764607523034144280, key5764607523034144280));
                        }

                        throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
                    }

                    return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
                }));

                const _ref1357636 = new ElixirScript.Core.Tuple(map5764607523034144280, keys5764607523034144280);

                return ElixirScript.Core.Patterns.defmatch(ElixirScript.Core.Patterns.clause([[]], () => {
                    return map5764607523034144280;
                }, () => {
                    return true;
                }), ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.variable('_')], () => {
                    return ElixirScript.Core.erlang.error(Elixir.ArgumentError.__load(Elixir).exception('the following keys must also be given when building ' + ('struct ' + (Elixir.String.Chars.__load(Elixir).to_string(Elixir.Kernel.__load(Elixir).inspect(Elixir.NaiveDateTime.__load(Elixir))) + (': ' + Elixir.String.Chars.__load(Elixir).to_string(Elixir.Kernel.__load(Elixir).inspect(keys5764607523034144280)))))));
                }, () => {
                    return true;
                })).call(this, keys5764607523034144280);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    const __exports = {
        __struct__,
        __MODULE__: Symbol.for('Elixir.NaiveDateTime'),
        __info__
    };

    Elixir.NaiveDateTime.__exports = __exports

    return __exports;
}
ElixirScript.Core.Functions.build_namespace(Elixir, 'Elixir.Version').__load = function(Elixir) {
    if (Elixir.Version.__exports)
        return Elixir.Version.__exports;

    function __info__(kind) {
        const __info__map__ = new Map([[Symbol.for('functions'), [new ElixirScript.Core.Tuple(Symbol.for('__struct__'), 0), new ElixirScript.Core.Tuple(Symbol.for('__struct__'), 1), new ElixirScript.Core.Tuple(Symbol.for('compare'), 2), new ElixirScript.Core.Tuple(Symbol.for('compile_requirement'), 1), new ElixirScript.Core.Tuple(Symbol.for('match?'), 2), new ElixirScript.Core.Tuple(Symbol.for('match?'), 3), new ElixirScript.Core.Tuple(Symbol.for('parse'), 1), new ElixirScript.Core.Tuple(Symbol.for('parse!'), 1), new ElixirScript.Core.Tuple(Symbol.for('parse_requirement'), 1)]], [Symbol.for('macros'), []], [Symbol.for('attributes'), [new ElixirScript.Core.Tuple(Symbol.for('vsn'), [163616801921434985427487133473942115967])]], [Symbol.for('compile'), [new ElixirScript.Core.Tuple(Symbol.for('options'), []), new ElixirScript.Core.Tuple(Symbol.for('version'), [55, 46, 49, 46, 50]), new ElixirScript.Core.Tuple(Symbol.for('source'), '/private/tmp/elixir-20170929-51947-wgj4qu/elixir-1.5.2/lib/elixir/lib/version.ex')]], [Symbol.for('md5'), new ElixirScript.Core.BitString(ElixirScript.Core.BitString.integer(123), ElixirScript.Core.BitString.integer(23), ElixirScript.Core.BitString.integer(115), ElixirScript.Core.BitString.integer(39), ElixirScript.Core.BitString.integer(145), ElixirScript.Core.BitString.integer(219), ElixirScript.Core.BitString.integer(252), ElixirScript.Core.BitString.integer(152), ElixirScript.Core.BitString.integer(105), ElixirScript.Core.BitString.integer(139), ElixirScript.Core.BitString.integer(136), ElixirScript.Core.BitString.integer(121), ElixirScript.Core.BitString.integer(235), ElixirScript.Core.BitString.integer(241), ElixirScript.Core.BitString.integer(150), ElixirScript.Core.BitString.integer(127))], [Symbol.for('module'), Symbol.for('Elixir.Version')]]);

        const value = __info__map__.get(kind);

        if (value !== null) {
            return value;
        }

        throw new ElixirScript.Core.Patterns.MatchError(kind);
    }

    function __struct__(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return new Map([[Symbol.for('__struct__'), Elixir.Version.__load(Elixir)], [Symbol.for('build'), null], [Symbol.for('major'), null], [Symbol.for('minor'), null], [Symbol.for('patch'), null], [Symbol.for('pre'), null]]);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('kv576460752303281567')], __function_args__, (kv5764607523032815670) => {
                return true;
            })) !== null) {
                let [kv5764607523032815670] = __arg_matches__;

                const [map5764607523032815670, keys5764607523032815670] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                    values: [ElixirScript.Core.Patterns.variable('map576460752303281567'), ElixirScript.Core.Patterns.variable('keys576460752303281567')]
                }), Elixir.Enum.__load(Elixir).reduce(kv5764607523032815670, new ElixirScript.Core.Tuple(__struct__(), []), (...__function_args__) => {
                    function recur(...__function_args__) {
                        let __arg_matches__ = null;

                        if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                            values: [ElixirScript.Core.Patterns.variable('key576460752303281567'), ElixirScript.Core.Patterns.variable('val576460752303281567')]
                        }), ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                            values: [ElixirScript.Core.Patterns.variable('map576460752303281567'), ElixirScript.Core.Patterns.variable('keys576460752303281567')]
                        })], __function_args__, (key5764607523032815670, val5764607523032815670, map5764607523032815670, keys5764607523032815670) => {
                            return true;
                        })) !== null) {
                            let [key5764607523032815670, val5764607523032815670, map5764607523032815670, keys5764607523032815670] = __arg_matches__;

                            return new ElixirScript.Core.Tuple(ElixirScript.Core.maps.update(key5764607523032815670, val5764607523032815670, map5764607523032815670), Elixir.List.__load(Elixir).__delete__(keys5764607523032815670, key5764607523032815670));
                        }

                        throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
                    }

                    return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
                }));

                const _ref5851355 = new ElixirScript.Core.Tuple(map5764607523032815670, keys5764607523032815670);

                return ElixirScript.Core.Patterns.defmatch(ElixirScript.Core.Patterns.clause([[]], () => {
                    return map5764607523032815670;
                }, () => {
                    return true;
                }), ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.variable('_')], () => {
                    return ElixirScript.Core.erlang.error(Elixir.ArgumentError.__load(Elixir).exception('the following keys must also be given when building ' + ('struct ' + (Elixir.String.Chars.__load(Elixir).to_string(Elixir.Kernel.__load(Elixir).inspect(Elixir.Version.__load(Elixir))) + (': ' + Elixir.String.Chars.__load(Elixir).to_string(Elixir.Kernel.__load(Elixir).inspect(keys5764607523032815670)))))));
                }, () => {
                    return true;
                })).call(this, keys5764607523032815670);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    const __exports = {
        __struct__,
        __MODULE__: Symbol.for('Elixir.Version'),
        __info__
    };

    Elixir.Version.__exports = __exports

    return __exports;
}
ElixirScript.Core.Functions.build_namespace(Elixir, 'Elixir.Inspect').__load = function(Elixir) {
    if (Elixir.Inspect.__exports)
        return Elixir.Inspect.__exports;

    const protocol = ElixirScript.Core.Functions.defprotocol({
        inspect: function() {},
        __impl__: function() {}
    });

    ElixirScript.Core.Functions.defimpl(protocol, null, Elixir.Inspect.Any.__load(Elixir))

    ElixirScript.Core.Functions.defimpl(protocol, Symbol, Elixir.Inspect.Atom.__load(Elixir))

    ElixirScript.Core.Functions.defimpl(protocol, ElixirScript.Core.BitString, Elixir.Inspect.BitString.__load(Elixir))

    ElixirScript.Core.Functions.defimpl(protocol, Symbol.for('Elixir.Date'), Elixir.Inspect.Date.__load(Elixir))

    ElixirScript.Core.Functions.defimpl(protocol, Symbol.for('Elixir.Date.Range'), Elixir.Inspect.Date.Range.__load(Elixir))

    ElixirScript.Core.Functions.defimpl(protocol, Symbol.for('Elixir.DateTime'), Elixir.Inspect.DateTime.__load(Elixir))

    ElixirScript.Core.Functions.defimpl(protocol, ElixirScript.Core.Float, Elixir.Inspect.Float.__load(Elixir))

    ElixirScript.Core.Functions.defimpl(protocol, Symbol.for('Elixir.Function'), Elixir.Inspect.Function.__load(Elixir))

    ElixirScript.Core.Functions.defimpl(protocol, Symbol.for('Elixir.HashDict'), Elixir.Inspect.HashDict.__load(Elixir))

    ElixirScript.Core.Functions.defimpl(protocol, Symbol.for('Elixir.HashSet'), Elixir.Inspect.HashSet.__load(Elixir))

    ElixirScript.Core.Functions.defimpl(protocol, ElixirScript.Core.Integer, Elixir.Inspect.Integer.__load(Elixir))

    ElixirScript.Core.Functions.defimpl(protocol, Array, Elixir.Inspect.List.__load(Elixir))

    ElixirScript.Core.Functions.defimpl(protocol, Map, Elixir.Inspect.Map.__load(Elixir))

    ElixirScript.Core.Functions.defimpl(protocol, Symbol.for('Elixir.MapSet'), Elixir.Inspect.MapSet.__load(Elixir))

    ElixirScript.Core.Functions.defimpl(protocol, Symbol.for('Elixir.NaiveDateTime'), Elixir.Inspect.NaiveDateTime.__load(Elixir))

    ElixirScript.Core.Functions.defimpl(protocol, ElixirScript.Core.PID, Elixir.Inspect.PID.__load(Elixir))

    ElixirScript.Core.Functions.defimpl(protocol, ElixirScript.Core.Port, Elixir.Inspect.Port.__load(Elixir))

    ElixirScript.Core.Functions.defimpl(protocol, Symbol.for('Elixir.Range'), Elixir.Inspect.Range.__load(Elixir))

    ElixirScript.Core.Functions.defimpl(protocol, ElixirScript.Core.Reference, Elixir.Inspect.Reference.__load(Elixir))

    ElixirScript.Core.Functions.defimpl(protocol, Symbol.for('Elixir.Regex'), Elixir.Inspect.Regex.__load(Elixir))

    ElixirScript.Core.Functions.defimpl(protocol, Symbol.for('Elixir.Stream'), Elixir.Inspect.Stream.__load(Elixir))

    ElixirScript.Core.Functions.defimpl(protocol, Symbol.for('Elixir.Time'), Elixir.Inspect.Time.__load(Elixir))

    ElixirScript.Core.Functions.defimpl(protocol, ElixirScript.Core.Tuple, Elixir.Inspect.Tuple.__load(Elixir))

    ElixirScript.Core.Functions.defimpl(protocol, Symbol.for('Elixir.Version'), Elixir.Inspect.Version.__load(Elixir))

    ElixirScript.Core.Functions.defimpl(protocol, Symbol.for('Elixir.Version.Requirement'), Elixir.Inspect.Version.Requirement.__load(Elixir))

    const __exports = protocol;

    Elixir.Inspect.__exports = __exports

    return __exports;
}
ElixirScript.Core.Functions.build_namespace(Elixir, 'Elixir.Date.Range').__load = function(Elixir) {
    if (Elixir.Date.Range.__exports)
        return Elixir.Date.Range.__exports;

    function __info__(kind) {
        const __info__map__ = new Map([[Symbol.for('functions'), [new ElixirScript.Core.Tuple(Symbol.for('__struct__'), 0), new ElixirScript.Core.Tuple(Symbol.for('__struct__'), 1)]], [Symbol.for('macros'), []], [Symbol.for('attributes'), [new ElixirScript.Core.Tuple(Symbol.for('vsn'), [203441004790964460483984872294820836409])]], [Symbol.for('compile'), [new ElixirScript.Core.Tuple(Symbol.for('options'), []), new ElixirScript.Core.Tuple(Symbol.for('version'), [55, 46, 49, 46, 50]), new ElixirScript.Core.Tuple(Symbol.for('source'), '/private/tmp/elixir-20170929-51947-wgj4qu/elixir-1.5.2/lib/elixir/lib/calendar/date_range.ex')]], [Symbol.for('md5'), new ElixirScript.Core.BitString(ElixirScript.Core.BitString.integer(153), ElixirScript.Core.BitString.integer(13), ElixirScript.Core.BitString.integer(79), ElixirScript.Core.BitString.integer(243), ElixirScript.Core.BitString.integer(44), ElixirScript.Core.BitString.integer(241), ElixirScript.Core.BitString.integer(107), ElixirScript.Core.BitString.integer(155), ElixirScript.Core.BitString.integer(211), ElixirScript.Core.BitString.integer(16), ElixirScript.Core.BitString.integer(4), ElixirScript.Core.BitString.integer(252), ElixirScript.Core.BitString.integer(95), ElixirScript.Core.BitString.integer(23), ElixirScript.Core.BitString.integer(116), ElixirScript.Core.BitString.integer(57))], [Symbol.for('module'), Symbol.for('Elixir.Date.Range')]]);

        const value = __info__map__.get(kind);

        if (value !== null) {
            return value;
        }

        throw new ElixirScript.Core.Patterns.MatchError(kind);
    }

    function __struct__(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return new Map([[Symbol.for('__struct__'), Elixir.Date.Range.__load(Elixir)], [Symbol.for('first'), null], [Symbol.for('first_in_iso_days'), null], [Symbol.for('last'), null], [Symbol.for('last_in_iso_days'), null]]);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('kv576460752303413917')], __function_args__, (kv5764607523034139170) => {
                return true;
            })) !== null) {
                let [kv5764607523034139170] = __arg_matches__;

                const [map5764607523034139170, keys5764607523034139170] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                    values: [ElixirScript.Core.Patterns.variable('map576460752303413917'), ElixirScript.Core.Patterns.variable('keys576460752303413917')]
                }), Elixir.Enum.__load(Elixir).reduce(kv5764607523034139170, new ElixirScript.Core.Tuple(__struct__(), []), (...__function_args__) => {
                    function recur(...__function_args__) {
                        let __arg_matches__ = null;

                        if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                            values: [ElixirScript.Core.Patterns.variable('key576460752303413917'), ElixirScript.Core.Patterns.variable('val576460752303413917')]
                        }), ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                            values: [ElixirScript.Core.Patterns.variable('map576460752303413917'), ElixirScript.Core.Patterns.variable('keys576460752303413917')]
                        })], __function_args__, (key5764607523034139170, val5764607523034139170, map5764607523034139170, keys5764607523034139170) => {
                            return true;
                        })) !== null) {
                            let [key5764607523034139170, val5764607523034139170, map5764607523034139170, keys5764607523034139170] = __arg_matches__;

                            return new ElixirScript.Core.Tuple(ElixirScript.Core.maps.update(key5764607523034139170, val5764607523034139170, map5764607523034139170), Elixir.List.__load(Elixir).__delete__(keys5764607523034139170, key5764607523034139170));
                        }

                        throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
                    }

                    return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
                }));

                const _ref4243626 = new ElixirScript.Core.Tuple(map5764607523034139170, keys5764607523034139170);

                return ElixirScript.Core.Patterns.defmatch(ElixirScript.Core.Patterns.clause([[]], () => {
                    return map5764607523034139170;
                }, () => {
                    return true;
                }), ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.variable('_')], () => {
                    return ElixirScript.Core.erlang.error(Elixir.ArgumentError.__load(Elixir).exception('the following keys must also be given when building ' + ('struct ' + (Elixir.String.Chars.__load(Elixir).to_string(Elixir.Kernel.__load(Elixir).inspect(Elixir.Date.Range.__load(Elixir))) + (': ' + Elixir.String.Chars.__load(Elixir).to_string(Elixir.Kernel.__load(Elixir).inspect(keys5764607523034139170)))))));
                }, () => {
                    return true;
                })).call(this, keys5764607523034139170);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    const __exports = {
        __struct__,
        __MODULE__: Symbol.for('Elixir.Date.Range'),
        __info__
    };

    Elixir.Date.Range.__exports = __exports

    return __exports;
}
ElixirScript.Core.Functions.build_namespace(Elixir, 'Elixir.Time').__load = function(Elixir) {
    if (Elixir.Time.__exports)
        return Elixir.Time.__exports;

    function __info__(kind) {
        const __info__map__ = new Map([[Symbol.for('functions'), [new ElixirScript.Core.Tuple(Symbol.for('__struct__'), 0), new ElixirScript.Core.Tuple(Symbol.for('__struct__'), 1), new ElixirScript.Core.Tuple(Symbol.for('compare'), 2), new ElixirScript.Core.Tuple(Symbol.for('convert'), 2), new ElixirScript.Core.Tuple(Symbol.for('convert!'), 2), new ElixirScript.Core.Tuple(Symbol.for('diff'), 2), new ElixirScript.Core.Tuple(Symbol.for('diff'), 3), new ElixirScript.Core.Tuple(Symbol.for('from_erl'), 1), new ElixirScript.Core.Tuple(Symbol.for('from_erl'), 2), new ElixirScript.Core.Tuple(Symbol.for('from_erl'), 3), new ElixirScript.Core.Tuple(Symbol.for('from_erl!'), 1), new ElixirScript.Core.Tuple(Symbol.for('from_erl!'), 2), new ElixirScript.Core.Tuple(Symbol.for('from_erl!'), 3), new ElixirScript.Core.Tuple(Symbol.for('from_iso8601'), 1), new ElixirScript.Core.Tuple(Symbol.for('from_iso8601'), 2), new ElixirScript.Core.Tuple(Symbol.for('from_iso8601!'), 1), new ElixirScript.Core.Tuple(Symbol.for('new'), 3), new ElixirScript.Core.Tuple(Symbol.for('new'), 4), new ElixirScript.Core.Tuple(Symbol.for('new'), 5), new ElixirScript.Core.Tuple(Symbol.for('to_erl'), 1), new ElixirScript.Core.Tuple(Symbol.for('to_iso8601'), 1), new ElixirScript.Core.Tuple(Symbol.for('to_iso8601'), 2), new ElixirScript.Core.Tuple(Symbol.for('to_string'), 1), new ElixirScript.Core.Tuple(Symbol.for('utc_now'), 0), new ElixirScript.Core.Tuple(Symbol.for('utc_now'), 1)]], [Symbol.for('macros'), []], [Symbol.for('attributes'), [new ElixirScript.Core.Tuple(Symbol.for('vsn'), [126707326284327681087116713642773742552])]], [Symbol.for('compile'), [new ElixirScript.Core.Tuple(Symbol.for('options'), []), new ElixirScript.Core.Tuple(Symbol.for('version'), [55, 46, 49, 46, 50]), new ElixirScript.Core.Tuple(Symbol.for('source'), '/private/tmp/elixir-20170929-51947-wgj4qu/elixir-1.5.2/lib/elixir/lib/calendar/time.ex')]], [Symbol.for('md5'), new ElixirScript.Core.BitString(ElixirScript.Core.BitString.integer(95), ElixirScript.Core.BitString.integer(82), ElixirScript.Core.BitString.integer(241), ElixirScript.Core.BitString.integer(129), ElixirScript.Core.BitString.integer(197), ElixirScript.Core.BitString.integer(202), ElixirScript.Core.BitString.integer(131), ElixirScript.Core.BitString.integer(234), ElixirScript.Core.BitString.integer(85), ElixirScript.Core.BitString.integer(15), ElixirScript.Core.BitString.integer(182), ElixirScript.Core.BitString.integer(193), ElixirScript.Core.BitString.integer(51), ElixirScript.Core.BitString.integer(148), ElixirScript.Core.BitString.integer(131), ElixirScript.Core.BitString.integer(216))], [Symbol.for('module'), Symbol.for('Elixir.Time')]]);

        const value = __info__map__.get(kind);

        if (value !== null) {
            return value;
        }

        throw new ElixirScript.Core.Patterns.MatchError(kind);
    }

    function __struct__(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return new Map([[Symbol.for('__struct__'), Elixir.Time.__load(Elixir)], [Symbol.for('calendar'), Elixir.Calendar.ISO.__load(Elixir)], [Symbol.for('hour'), null], [Symbol.for('microsecond'), new ElixirScript.Core.Tuple(0, 0)], [Symbol.for('minute'), null], [Symbol.for('second'), null]]);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('kv576460752303414175')], __function_args__, (kv5764607523034141750) => {
                return true;
            })) !== null) {
                let [kv5764607523034141750] = __arg_matches__;

                const [map5764607523034141750, keys5764607523034141750] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                    values: [ElixirScript.Core.Patterns.variable('map576460752303414175'), ElixirScript.Core.Patterns.variable('keys576460752303414175')]
                }), Elixir.Enum.__load(Elixir).reduce(kv5764607523034141750, new ElixirScript.Core.Tuple(__struct__(), [Symbol.for('hour'), Symbol.for('minute'), Symbol.for('second')]), (...__function_args__) => {
                    function recur(...__function_args__) {
                        let __arg_matches__ = null;

                        if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                            values: [ElixirScript.Core.Patterns.variable('key576460752303414175'), ElixirScript.Core.Patterns.variable('val576460752303414175')]
                        }), ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                            values: [ElixirScript.Core.Patterns.variable('map576460752303414175'), ElixirScript.Core.Patterns.variable('keys576460752303414175')]
                        })], __function_args__, (key5764607523034141750, val5764607523034141750, map5764607523034141750, keys5764607523034141750) => {
                            return true;
                        })) !== null) {
                            let [key5764607523034141750, val5764607523034141750, map5764607523034141750, keys5764607523034141750] = __arg_matches__;

                            return new ElixirScript.Core.Tuple(ElixirScript.Core.maps.update(key5764607523034141750, val5764607523034141750, map5764607523034141750), Elixir.List.__load(Elixir).__delete__(keys5764607523034141750, key5764607523034141750));
                        }

                        throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
                    }

                    return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
                }));

                const _ref6874381 = new ElixirScript.Core.Tuple(map5764607523034141750, keys5764607523034141750);

                return ElixirScript.Core.Patterns.defmatch(ElixirScript.Core.Patterns.clause([[]], () => {
                    return map5764607523034141750;
                }, () => {
                    return true;
                }), ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.variable('_')], () => {
                    return ElixirScript.Core.erlang.error(Elixir.ArgumentError.__load(Elixir).exception('the following keys must also be given when building ' + ('struct ' + (Elixir.String.Chars.__load(Elixir).to_string(Elixir.Kernel.__load(Elixir).inspect(Elixir.Time.__load(Elixir))) + (': ' + Elixir.String.Chars.__load(Elixir).to_string(Elixir.Kernel.__load(Elixir).inspect(keys5764607523034141750)))))));
                }, () => {
                    return true;
                })).call(this, keys5764607523034141750);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    const __exports = {
        __struct__,
        __MODULE__: Symbol.for('Elixir.Time'),
        __info__
    };

    Elixir.Time.__exports = __exports

    return __exports;
}
ElixirScript.Core.Functions.build_namespace(Elixir, 'Elixir.Version.InvalidVersionError').__load = function(Elixir) {
    if (Elixir.Version.InvalidVersionError.__exports)
        return Elixir.Version.InvalidVersionError.__exports;

    function __info__(kind) {
        const __info__map__ = new Map([[Symbol.for('functions'), [new ElixirScript.Core.Tuple(Symbol.for('__struct__'), 0), new ElixirScript.Core.Tuple(Symbol.for('__struct__'), 1), new ElixirScript.Core.Tuple(Symbol.for('exception'), 1), new ElixirScript.Core.Tuple(Symbol.for('message'), 1)]], [Symbol.for('macros'), []], [Symbol.for('attributes'), [new ElixirScript.Core.Tuple(Symbol.for('vsn'), [258330095937965360579633429455167586540]), new ElixirScript.Core.Tuple(Symbol.for('behaviour'), [Elixir.Exception.__load(Elixir)])]], [Symbol.for('compile'), [new ElixirScript.Core.Tuple(Symbol.for('options'), []), new ElixirScript.Core.Tuple(Symbol.for('version'), [55, 46, 49, 46, 50]), new ElixirScript.Core.Tuple(Symbol.for('source'), '/private/tmp/elixir-20170929-51947-wgj4qu/elixir-1.5.2/lib/elixir/lib/version.ex')]], [Symbol.for('md5'), new ElixirScript.Core.BitString(ElixirScript.Core.BitString.integer(194), ElixirScript.Core.BitString.integer(88), ElixirScript.Core.BitString.integer(145), ElixirScript.Core.BitString.integer(21), ElixirScript.Core.BitString.integer(61), ElixirScript.Core.BitString.integer(64), ElixirScript.Core.BitString.integer(151), ElixirScript.Core.BitString.integer(226), ElixirScript.Core.BitString.integer(213), ElixirScript.Core.BitString.integer(45), ElixirScript.Core.BitString.integer(200), ElixirScript.Core.BitString.integer(239), ElixirScript.Core.BitString.integer(54), ElixirScript.Core.BitString.integer(180), ElixirScript.Core.BitString.integer(128), ElixirScript.Core.BitString.integer(236))], [Symbol.for('module'), Symbol.for('Elixir.Version.InvalidVersionError')]]);

        const value = __info__map__.get(kind);

        if (value !== null) {
            return value;
        }

        throw new ElixirScript.Core.Patterns.MatchError(kind);
    }

    function __struct__(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return new Map([[Symbol.for('__exception__'), true], [Symbol.for('__struct__'), Elixir.Version.InvalidVersionError.__load(Elixir)], [Symbol.for('version'), null]]);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('kv576460752303255901')], __function_args__, (kv5764607523032559010) => {
                return true;
            })) !== null) {
                let [kv5764607523032559010] = __arg_matches__;

                const [map5764607523032559010, keys5764607523032559010] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                    values: [ElixirScript.Core.Patterns.variable('map576460752303255901'), ElixirScript.Core.Patterns.variable('keys576460752303255901')]
                }), Elixir.Enum.__load(Elixir).reduce(kv5764607523032559010, new ElixirScript.Core.Tuple(__struct__(), []), (...__function_args__) => {
                    function recur(...__function_args__) {
                        let __arg_matches__ = null;

                        if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                            values: [ElixirScript.Core.Patterns.variable('key576460752303255901'), ElixirScript.Core.Patterns.variable('val576460752303255901')]
                        }), ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                            values: [ElixirScript.Core.Patterns.variable('map576460752303255901'), ElixirScript.Core.Patterns.variable('keys576460752303255901')]
                        })], __function_args__, (key5764607523032559010, val5764607523032559010, map5764607523032559010, keys5764607523032559010) => {
                            return true;
                        })) !== null) {
                            let [key5764607523032559010, val5764607523032559010, map5764607523032559010, keys5764607523032559010] = __arg_matches__;

                            return new ElixirScript.Core.Tuple(ElixirScript.Core.maps.update(key5764607523032559010, val5764607523032559010, map5764607523032559010), Elixir.List.__load(Elixir).__delete__(keys5764607523032559010, key5764607523032559010));
                        }

                        throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
                    }

                    return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
                }));

                const _ref6216642 = new ElixirScript.Core.Tuple(map5764607523032559010, keys5764607523032559010);

                return ElixirScript.Core.Patterns.defmatch(ElixirScript.Core.Patterns.clause([[]], () => {
                    return map5764607523032559010;
                }, () => {
                    return true;
                }), ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.variable('_')], () => {
                    return ElixirScript.Core.erlang.error(Elixir.ArgumentError.__load(Elixir).exception('the following keys must also be given when building ' + ('struct ' + (Elixir.String.Chars.__load(Elixir).to_string(Elixir.Kernel.__load(Elixir).inspect(Elixir.Version.InvalidVersionError.__load(Elixir))) + (': ' + Elixir.String.Chars.__load(Elixir).to_string(Elixir.Kernel.__load(Elixir).inspect(keys5764607523032559010)))))));
                }, () => {
                    return true;
                })).call(this, keys5764607523032559010);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    const __exports = {
        __struct__,
        __MODULE__: Symbol.for('Elixir.Version.InvalidVersionError'),
        __info__
    };

    Elixir.Version.InvalidVersionError.__exports = __exports

    return __exports;
}
ElixirScript.Core.Functions.build_namespace(Elixir, 'Elixir.Code.LoadError').__load = function(Elixir) {
    if (Elixir.Code.LoadError.__exports)
        return Elixir.Code.LoadError.__exports;

    function __info__(kind) {
        const __info__map__ = new Map([[Symbol.for('functions'), [new ElixirScript.Core.Tuple(Symbol.for('__struct__'), 0), new ElixirScript.Core.Tuple(Symbol.for('__struct__'), 1), new ElixirScript.Core.Tuple(Symbol.for('exception'), 1), new ElixirScript.Core.Tuple(Symbol.for('message'), 1)]], [Symbol.for('macros'), []], [Symbol.for('attributes'), [new ElixirScript.Core.Tuple(Symbol.for('vsn'), [167798743846808699564888204749949010550]), new ElixirScript.Core.Tuple(Symbol.for('behaviour'), [Elixir.Exception.__load(Elixir)])]], [Symbol.for('compile'), [new ElixirScript.Core.Tuple(Symbol.for('options'), []), new ElixirScript.Core.Tuple(Symbol.for('version'), [55, 46, 49, 46, 50]), new ElixirScript.Core.Tuple(Symbol.for('source'), '/private/tmp/elixir-20170929-51947-wgj4qu/elixir-1.5.2/lib/elixir/lib/exception.ex')]], [Symbol.for('md5'), new ElixirScript.Core.BitString(ElixirScript.Core.BitString.integer(126), ElixirScript.Core.BitString.integer(60), ElixirScript.Core.BitString.integer(220), ElixirScript.Core.BitString.integer(207), ElixirScript.Core.BitString.integer(116), ElixirScript.Core.BitString.integer(127), ElixirScript.Core.BitString.integer(205), ElixirScript.Core.BitString.integer(178), ElixirScript.Core.BitString.integer(195), ElixirScript.Core.BitString.integer(63), ElixirScript.Core.BitString.integer(47), ElixirScript.Core.BitString.integer(93), ElixirScript.Core.BitString.integer(223), ElixirScript.Core.BitString.integer(182), ElixirScript.Core.BitString.integer(130), ElixirScript.Core.BitString.integer(118))], [Symbol.for('module'), Symbol.for('Elixir.Code.LoadError')]]);

        const value = __info__map__.get(kind);

        if (value !== null) {
            return value;
        }

        throw new ElixirScript.Core.Patterns.MatchError(kind);
    }

    function __struct__(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return new Map([[Symbol.for('__exception__'), true], [Symbol.for('__struct__'), Elixir.Code.LoadError.__load(Elixir)], [Symbol.for('file'), null], [Symbol.for('message'), null]]);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('kv576460752303360927')], __function_args__, (kv5764607523033609270) => {
                return true;
            })) !== null) {
                let [kv5764607523033609270] = __arg_matches__;

                const [map5764607523033609270, keys5764607523033609270] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                    values: [ElixirScript.Core.Patterns.variable('map576460752303360927'), ElixirScript.Core.Patterns.variable('keys576460752303360927')]
                }), Elixir.Enum.__load(Elixir).reduce(kv5764607523033609270, new ElixirScript.Core.Tuple(__struct__(), []), (...__function_args__) => {
                    function recur(...__function_args__) {
                        let __arg_matches__ = null;

                        if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                            values: [ElixirScript.Core.Patterns.variable('key576460752303360927'), ElixirScript.Core.Patterns.variable('val576460752303360927')]
                        }), ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                            values: [ElixirScript.Core.Patterns.variable('map576460752303360927'), ElixirScript.Core.Patterns.variable('keys576460752303360927')]
                        })], __function_args__, (key5764607523033609270, val5764607523033609270, map5764607523033609270, keys5764607523033609270) => {
                            return true;
                        })) !== null) {
                            let [key5764607523033609270, val5764607523033609270, map5764607523033609270, keys5764607523033609270] = __arg_matches__;

                            return new ElixirScript.Core.Tuple(ElixirScript.Core.maps.update(key5764607523033609270, val5764607523033609270, map5764607523033609270), Elixir.List.__load(Elixir).__delete__(keys5764607523033609270, key5764607523033609270));
                        }

                        throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
                    }

                    return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
                }));

                const _ref7766394 = new ElixirScript.Core.Tuple(map5764607523033609270, keys5764607523033609270);

                return ElixirScript.Core.Patterns.defmatch(ElixirScript.Core.Patterns.clause([[]], () => {
                    return map5764607523033609270;
                }, () => {
                    return true;
                }), ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.variable('_')], () => {
                    return ElixirScript.Core.erlang.error(Elixir.ArgumentError.__load(Elixir).exception('the following keys must also be given when building ' + ('struct ' + (Elixir.String.Chars.__load(Elixir).to_string(Elixir.Kernel.__load(Elixir).inspect(Elixir.Code.LoadError.__load(Elixir))) + (': ' + Elixir.String.Chars.__load(Elixir).to_string(Elixir.Kernel.__load(Elixir).inspect(keys5764607523033609270)))))));
                }, () => {
                    return true;
                })).call(this, keys5764607523033609270);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    const __exports = {
        __struct__,
        __MODULE__: Symbol.for('Elixir.Code.LoadError'),
        __info__
    };

    Elixir.Code.LoadError.__exports = __exports

    return __exports;
}
ElixirScript.Core.Functions.build_namespace(Elixir, 'Elixir.File.LinkError').__load = function(Elixir) {
    if (Elixir.File.LinkError.__exports)
        return Elixir.File.LinkError.__exports;

    function __info__(kind) {
        const __info__map__ = new Map([[Symbol.for('functions'), [new ElixirScript.Core.Tuple(Symbol.for('__struct__'), 0), new ElixirScript.Core.Tuple(Symbol.for('__struct__'), 1), new ElixirScript.Core.Tuple(Symbol.for('exception'), 1), new ElixirScript.Core.Tuple(Symbol.for('message'), 1)]], [Symbol.for('macros'), []], [Symbol.for('attributes'), [new ElixirScript.Core.Tuple(Symbol.for('vsn'), [153355092213420006314060496088594000183]), new ElixirScript.Core.Tuple(Symbol.for('behaviour'), [Elixir.Exception.__load(Elixir)])]], [Symbol.for('compile'), [new ElixirScript.Core.Tuple(Symbol.for('options'), []), new ElixirScript.Core.Tuple(Symbol.for('version'), [55, 46, 49, 46, 50]), new ElixirScript.Core.Tuple(Symbol.for('source'), '/private/tmp/elixir-20170929-51947-wgj4qu/elixir-1.5.2/lib/elixir/lib/exception.ex')]], [Symbol.for('md5'), new ElixirScript.Core.BitString(ElixirScript.Core.BitString.integer(115), ElixirScript.Core.BitString.integer(95), ElixirScript.Core.BitString.integer(29), ElixirScript.Core.BitString.integer(205), ElixirScript.Core.BitString.integer(209), ElixirScript.Core.BitString.integer(214), ElixirScript.Core.BitString.integer(206), ElixirScript.Core.BitString.integer(54), ElixirScript.Core.BitString.integer(15), ElixirScript.Core.BitString.integer(76), ElixirScript.Core.BitString.integer(208), ElixirScript.Core.BitString.integer(3), ElixirScript.Core.BitString.integer(243), ElixirScript.Core.BitString.integer(90), ElixirScript.Core.BitString.integer(41), ElixirScript.Core.BitString.integer(55))], [Symbol.for('module'), Symbol.for('Elixir.File.LinkError')]]);

        const value = __info__map__.get(kind);

        if (value !== null) {
            return value;
        }

        throw new ElixirScript.Core.Patterns.MatchError(kind);
    }

    function __struct__(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return new Map([[Symbol.for('__exception__'), true], [Symbol.for('__struct__'), Elixir.File.LinkError.__load(Elixir)], [Symbol.for('action'), ''], [Symbol.for('existing'), null], [Symbol.for('new'), null], [Symbol.for('reason'), null]]);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('kv576460752303354239')], __function_args__, (kv5764607523033542390) => {
                return true;
            })) !== null) {
                let [kv5764607523033542390] = __arg_matches__;

                const [map5764607523033542390, keys5764607523033542390] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                    values: [ElixirScript.Core.Patterns.variable('map576460752303354239'), ElixirScript.Core.Patterns.variable('keys576460752303354239')]
                }), Elixir.Enum.__load(Elixir).reduce(kv5764607523033542390, new ElixirScript.Core.Tuple(__struct__(), []), (...__function_args__) => {
                    function recur(...__function_args__) {
                        let __arg_matches__ = null;

                        if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                            values: [ElixirScript.Core.Patterns.variable('key576460752303354239'), ElixirScript.Core.Patterns.variable('val576460752303354239')]
                        }), ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                            values: [ElixirScript.Core.Patterns.variable('map576460752303354239'), ElixirScript.Core.Patterns.variable('keys576460752303354239')]
                        })], __function_args__, (key5764607523033542390, val5764607523033542390, map5764607523033542390, keys5764607523033542390) => {
                            return true;
                        })) !== null) {
                            let [key5764607523033542390, val5764607523033542390, map5764607523033542390, keys5764607523033542390] = __arg_matches__;

                            return new ElixirScript.Core.Tuple(ElixirScript.Core.maps.update(key5764607523033542390, val5764607523033542390, map5764607523033542390), Elixir.List.__load(Elixir).__delete__(keys5764607523033542390, key5764607523033542390));
                        }

                        throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
                    }

                    return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
                }));

                const _ref2032695 = new ElixirScript.Core.Tuple(map5764607523033542390, keys5764607523033542390);

                return ElixirScript.Core.Patterns.defmatch(ElixirScript.Core.Patterns.clause([[]], () => {
                    return map5764607523033542390;
                }, () => {
                    return true;
                }), ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.variable('_')], () => {
                    return ElixirScript.Core.erlang.error(Elixir.ArgumentError.__load(Elixir).exception('the following keys must also be given when building ' + ('struct ' + (Elixir.String.Chars.__load(Elixir).to_string(Elixir.Kernel.__load(Elixir).inspect(Elixir.File.LinkError.__load(Elixir))) + (': ' + Elixir.String.Chars.__load(Elixir).to_string(Elixir.Kernel.__load(Elixir).inspect(keys5764607523033542390)))))));
                }, () => {
                    return true;
                })).call(this, keys5764607523033542390);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    const __exports = {
        __struct__,
        __MODULE__: Symbol.for('Elixir.File.LinkError'),
        __info__
    };

    Elixir.File.LinkError.__exports = __exports

    return __exports;
}
ElixirScript.Core.Functions.build_namespace(Elixir, 'Elixir.File.CopyError').__load = function(Elixir) {
    if (Elixir.File.CopyError.__exports)
        return Elixir.File.CopyError.__exports;

    function __info__(kind) {
        const __info__map__ = new Map([[Symbol.for('functions'), [new ElixirScript.Core.Tuple(Symbol.for('__struct__'), 0), new ElixirScript.Core.Tuple(Symbol.for('__struct__'), 1), new ElixirScript.Core.Tuple(Symbol.for('exception'), 1), new ElixirScript.Core.Tuple(Symbol.for('message'), 1)]], [Symbol.for('macros'), []], [Symbol.for('attributes'), [new ElixirScript.Core.Tuple(Symbol.for('vsn'), [305685404874572843215747124874388941479]), new ElixirScript.Core.Tuple(Symbol.for('behaviour'), [Elixir.Exception.__load(Elixir)])]], [Symbol.for('compile'), [new ElixirScript.Core.Tuple(Symbol.for('options'), []), new ElixirScript.Core.Tuple(Symbol.for('version'), [55, 46, 49, 46, 50]), new ElixirScript.Core.Tuple(Symbol.for('source'), '/private/tmp/elixir-20170929-51947-wgj4qu/elixir-1.5.2/lib/elixir/lib/exception.ex')]], [Symbol.for('md5'), new ElixirScript.Core.BitString(ElixirScript.Core.BitString.integer(229), ElixirScript.Core.BitString.integer(248), ElixirScript.Core.BitString.integer(222), ElixirScript.Core.BitString.integer(19), ElixirScript.Core.BitString.integer(60), ElixirScript.Core.BitString.integer(61), ElixirScript.Core.BitString.integer(111), ElixirScript.Core.BitString.integer(183), ElixirScript.Core.BitString.integer(60), ElixirScript.Core.BitString.integer(31), ElixirScript.Core.BitString.integer(65), ElixirScript.Core.BitString.integer(245), ElixirScript.Core.BitString.integer(222), ElixirScript.Core.BitString.integer(171), ElixirScript.Core.BitString.integer(170), ElixirScript.Core.BitString.integer(167))], [Symbol.for('module'), Symbol.for('Elixir.File.CopyError')]]);

        const value = __info__map__.get(kind);

        if (value !== null) {
            return value;
        }

        throw new ElixirScript.Core.Patterns.MatchError(kind);
    }

    function __struct__(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return new Map([[Symbol.for('__exception__'), true], [Symbol.for('__struct__'), Elixir.File.CopyError.__load(Elixir)], [Symbol.for('action'), ''], [Symbol.for('destination'), null], [Symbol.for('on'), ''], [Symbol.for('reason'), null], [Symbol.for('source'), null]]);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('kv576460752303362109')], __function_args__, (kv5764607523033621090) => {
                return true;
            })) !== null) {
                let [kv5764607523033621090] = __arg_matches__;

                const [map5764607523033621090, keys5764607523033621090] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                    values: [ElixirScript.Core.Patterns.variable('map576460752303362109'), ElixirScript.Core.Patterns.variable('keys576460752303362109')]
                }), Elixir.Enum.__load(Elixir).reduce(kv5764607523033621090, new ElixirScript.Core.Tuple(__struct__(), []), (...__function_args__) => {
                    function recur(...__function_args__) {
                        let __arg_matches__ = null;

                        if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                            values: [ElixirScript.Core.Patterns.variable('key576460752303362109'), ElixirScript.Core.Patterns.variable('val576460752303362109')]
                        }), ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                            values: [ElixirScript.Core.Patterns.variable('map576460752303362109'), ElixirScript.Core.Patterns.variable('keys576460752303362109')]
                        })], __function_args__, (key5764607523033621090, val5764607523033621090, map5764607523033621090, keys5764607523033621090) => {
                            return true;
                        })) !== null) {
                            let [key5764607523033621090, val5764607523033621090, map5764607523033621090, keys5764607523033621090] = __arg_matches__;

                            return new ElixirScript.Core.Tuple(ElixirScript.Core.maps.update(key5764607523033621090, val5764607523033621090, map5764607523033621090), Elixir.List.__load(Elixir).__delete__(keys5764607523033621090, key5764607523033621090));
                        }

                        throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
                    }

                    return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
                }));

                const _ref2663047 = new ElixirScript.Core.Tuple(map5764607523033621090, keys5764607523033621090);

                return ElixirScript.Core.Patterns.defmatch(ElixirScript.Core.Patterns.clause([[]], () => {
                    return map5764607523033621090;
                }, () => {
                    return true;
                }), ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.variable('_')], () => {
                    return ElixirScript.Core.erlang.error(Elixir.ArgumentError.__load(Elixir).exception('the following keys must also be given when building ' + ('struct ' + (Elixir.String.Chars.__load(Elixir).to_string(Elixir.Kernel.__load(Elixir).inspect(Elixir.File.CopyError.__load(Elixir))) + (': ' + Elixir.String.Chars.__load(Elixir).to_string(Elixir.Kernel.__load(Elixir).inspect(keys5764607523033621090)))))));
                }, () => {
                    return true;
                })).call(this, keys5764607523033621090);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    const __exports = {
        __struct__,
        __MODULE__: Symbol.for('Elixir.File.CopyError'),
        __info__
    };

    Elixir.File.CopyError.__exports = __exports

    return __exports;
}
ElixirScript.Core.Functions.build_namespace(Elixir, 'Elixir.List.Chars').__load = function(Elixir) {
    if (Elixir.List.Chars.__exports)
        return Elixir.List.Chars.__exports;

    const protocol = ElixirScript.Core.Functions.defprotocol({
        to_charlist: function() {},
        __impl__: function() {}
    });

    ElixirScript.Core.Functions.defimpl(protocol, Symbol, Elixir.List.Chars.Atom.__load(Elixir))

    ElixirScript.Core.Functions.defimpl(protocol, ElixirScript.Core.BitString, Elixir.List.Chars.BitString.__load(Elixir))

    ElixirScript.Core.Functions.defimpl(protocol, ElixirScript.Core.Float, Elixir.List.Chars.Float.__load(Elixir))

    ElixirScript.Core.Functions.defimpl(protocol, ElixirScript.Core.Integer, Elixir.List.Chars.Integer.__load(Elixir))

    ElixirScript.Core.Functions.defimpl(protocol, Array, Elixir.List.Chars.List.__load(Elixir))

    const __exports = protocol;

    Elixir.List.Chars.__exports = __exports

    return __exports;
}
ElixirScript.Core.Functions.build_namespace(Elixir, 'Elixir.Version.InvalidRequirementError').__load = function(Elixir) {
    if (Elixir.Version.InvalidRequirementError.__exports)
        return Elixir.Version.InvalidRequirementError.__exports;

    function __info__(kind) {
        const __info__map__ = new Map([[Symbol.for('functions'), [new ElixirScript.Core.Tuple(Symbol.for('__struct__'), 0), new ElixirScript.Core.Tuple(Symbol.for('__struct__'), 1), new ElixirScript.Core.Tuple(Symbol.for('exception'), 1), new ElixirScript.Core.Tuple(Symbol.for('message'), 1)]], [Symbol.for('macros'), []], [Symbol.for('attributes'), [new ElixirScript.Core.Tuple(Symbol.for('vsn'), [325591913283816122549375653777456447258]), new ElixirScript.Core.Tuple(Symbol.for('behaviour'), [Elixir.Exception.__load(Elixir)])]], [Symbol.for('compile'), [new ElixirScript.Core.Tuple(Symbol.for('options'), []), new ElixirScript.Core.Tuple(Symbol.for('version'), [55, 46, 49, 46, 50]), new ElixirScript.Core.Tuple(Symbol.for('source'), '/private/tmp/elixir-20170929-51947-wgj4qu/elixir-1.5.2/lib/elixir/lib/version.ex')]], [Symbol.for('md5'), new ElixirScript.Core.BitString(ElixirScript.Core.BitString.integer(244), ElixirScript.Core.BitString.integer(242), ElixirScript.Core.BitString.integer(184), ElixirScript.Core.BitString.integer(183), ElixirScript.Core.BitString.integer(33), ElixirScript.Core.BitString.integer(163), ElixirScript.Core.BitString.integer(73), ElixirScript.Core.BitString.integer(232), ElixirScript.Core.BitString.integer(165), ElixirScript.Core.BitString.integer(76), ElixirScript.Core.BitString.integer(203), ElixirScript.Core.BitString.integer(74), ElixirScript.Core.BitString.integer(197), ElixirScript.Core.BitString.integer(135), ElixirScript.Core.BitString.integer(63), ElixirScript.Core.BitString.integer(26))], [Symbol.for('module'), Symbol.for('Elixir.Version.InvalidRequirementError')]]);

        const value = __info__map__.get(kind);

        if (value !== null) {
            return value;
        }

        throw new ElixirScript.Core.Patterns.MatchError(kind);
    }

    function __struct__(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return new Map([[Symbol.for('__exception__'), true], [Symbol.for('__struct__'), Elixir.Version.InvalidRequirementError.__load(Elixir)], [Symbol.for('requirement'), null]]);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('kv576460752303282398')], __function_args__, (kv5764607523032823980) => {
                return true;
            })) !== null) {
                let [kv5764607523032823980] = __arg_matches__;

                const [map5764607523032823980, keys5764607523032823980] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                    values: [ElixirScript.Core.Patterns.variable('map576460752303282398'), ElixirScript.Core.Patterns.variable('keys576460752303282398')]
                }), Elixir.Enum.__load(Elixir).reduce(kv5764607523032823980, new ElixirScript.Core.Tuple(__struct__(), []), (...__function_args__) => {
                    function recur(...__function_args__) {
                        let __arg_matches__ = null;

                        if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                            values: [ElixirScript.Core.Patterns.variable('key576460752303282398'), ElixirScript.Core.Patterns.variable('val576460752303282398')]
                        }), ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                            values: [ElixirScript.Core.Patterns.variable('map576460752303282398'), ElixirScript.Core.Patterns.variable('keys576460752303282398')]
                        })], __function_args__, (key5764607523032823980, val5764607523032823980, map5764607523032823980, keys5764607523032823980) => {
                            return true;
                        })) !== null) {
                            let [key5764607523032823980, val5764607523032823980, map5764607523032823980, keys5764607523032823980] = __arg_matches__;

                            return new ElixirScript.Core.Tuple(ElixirScript.Core.maps.update(key5764607523032823980, val5764607523032823980, map5764607523032823980), Elixir.List.__load(Elixir).__delete__(keys5764607523032823980, key5764607523032823980));
                        }

                        throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
                    }

                    return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
                }));

                const _ref6760764 = new ElixirScript.Core.Tuple(map5764607523032823980, keys5764607523032823980);

                return ElixirScript.Core.Patterns.defmatch(ElixirScript.Core.Patterns.clause([[]], () => {
                    return map5764607523032823980;
                }, () => {
                    return true;
                }), ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.variable('_')], () => {
                    return ElixirScript.Core.erlang.error(Elixir.ArgumentError.__load(Elixir).exception('the following keys must also be given when building ' + ('struct ' + (Elixir.String.Chars.__load(Elixir).to_string(Elixir.Kernel.__load(Elixir).inspect(Elixir.Version.InvalidRequirementError.__load(Elixir))) + (': ' + Elixir.String.Chars.__load(Elixir).to_string(Elixir.Kernel.__load(Elixir).inspect(keys5764607523032823980)))))));
                }, () => {
                    return true;
                })).call(this, keys5764607523032823980);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    const __exports = {
        __struct__,
        __MODULE__: Symbol.for('Elixir.Version.InvalidRequirementError'),
        __info__
    };

    Elixir.Version.InvalidRequirementError.__exports = __exports

    return __exports;
}
ElixirScript.Core.Functions.build_namespace(Elixir, 'Elixir.Version.Requirement').__load = function(Elixir) {
    if (Elixir.Version.Requirement.__exports)
        return Elixir.Version.Requirement.__exports;

    function __info__(kind) {
        const __info__map__ = new Map([[Symbol.for('functions'), [new ElixirScript.Core.Tuple(Symbol.for('__struct__'), 0), new ElixirScript.Core.Tuple(Symbol.for('__struct__'), 1)]], [Symbol.for('macros'), []], [Symbol.for('attributes'), [new ElixirScript.Core.Tuple(Symbol.for('vsn'), [243464120724921877464671121722408901959])]], [Symbol.for('compile'), [new ElixirScript.Core.Tuple(Symbol.for('options'), []), new ElixirScript.Core.Tuple(Symbol.for('version'), [55, 46, 49, 46, 50]), new ElixirScript.Core.Tuple(Symbol.for('source'), '/private/tmp/elixir-20170929-51947-wgj4qu/elixir-1.5.2/lib/elixir/lib/version.ex')]], [Symbol.for('md5'), new ElixirScript.Core.BitString(ElixirScript.Core.BitString.integer(183), ElixirScript.Core.BitString.integer(41), ElixirScript.Core.BitString.integer(123), ElixirScript.Core.BitString.integer(234), ElixirScript.Core.BitString.integer(159), ElixirScript.Core.BitString.integer(85), ElixirScript.Core.BitString.integer(40), ElixirScript.Core.BitString.integer(170), ElixirScript.Core.BitString.integer(143), ElixirScript.Core.BitString.integer(58), ElixirScript.Core.BitString.integer(53), ElixirScript.Core.BitString.integer(104), ElixirScript.Core.BitString.integer(1), ElixirScript.Core.BitString.integer(155), ElixirScript.Core.BitString.integer(29), ElixirScript.Core.BitString.integer(71))], [Symbol.for('module'), Symbol.for('Elixir.Version.Requirement')]]);

        const value = __info__map__.get(kind);

        if (value !== null) {
            return value;
        }

        throw new ElixirScript.Core.Patterns.MatchError(kind);
    }

    function __struct__(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return new Map([[Symbol.for('__struct__'), Elixir.Version.Requirement.__load(Elixir)], [Symbol.for('compiled'), null], [Symbol.for('matchspec'), null], [Symbol.for('source'), null]]);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('kv576460752303256733')], __function_args__, (kv5764607523032567330) => {
                return true;
            })) !== null) {
                let [kv5764607523032567330] = __arg_matches__;

                const [map5764607523032567330, keys5764607523032567330] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                    values: [ElixirScript.Core.Patterns.variable('map576460752303256733'), ElixirScript.Core.Patterns.variable('keys576460752303256733')]
                }), Elixir.Enum.__load(Elixir).reduce(kv5764607523032567330, new ElixirScript.Core.Tuple(__struct__(), []), (...__function_args__) => {
                    function recur(...__function_args__) {
                        let __arg_matches__ = null;

                        if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                            values: [ElixirScript.Core.Patterns.variable('key576460752303256733'), ElixirScript.Core.Patterns.variable('val576460752303256733')]
                        }), ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                            values: [ElixirScript.Core.Patterns.variable('map576460752303256733'), ElixirScript.Core.Patterns.variable('keys576460752303256733')]
                        })], __function_args__, (key5764607523032567330, val5764607523032567330, map5764607523032567330, keys5764607523032567330) => {
                            return true;
                        })) !== null) {
                            let [key5764607523032567330, val5764607523032567330, map5764607523032567330, keys5764607523032567330] = __arg_matches__;

                            return new ElixirScript.Core.Tuple(ElixirScript.Core.maps.update(key5764607523032567330, val5764607523032567330, map5764607523032567330), Elixir.List.__load(Elixir).__delete__(keys5764607523032567330, key5764607523032567330));
                        }

                        throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
                    }

                    return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
                }));

                const _ref5736989 = new ElixirScript.Core.Tuple(map5764607523032567330, keys5764607523032567330);

                return ElixirScript.Core.Patterns.defmatch(ElixirScript.Core.Patterns.clause([[]], () => {
                    return map5764607523032567330;
                }, () => {
                    return true;
                }), ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.variable('_')], () => {
                    return ElixirScript.Core.erlang.error(Elixir.ArgumentError.__load(Elixir).exception('the following keys must also be given when building ' + ('struct ' + (Elixir.String.Chars.__load(Elixir).to_string(Elixir.Kernel.__load(Elixir).inspect(Elixir.Version.Requirement.__load(Elixir))) + (': ' + Elixir.String.Chars.__load(Elixir).to_string(Elixir.Kernel.__load(Elixir).inspect(keys5764607523032567330)))))));
                }, () => {
                    return true;
                })).call(this, keys5764607523032567330);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    const __exports = {
        __struct__,
        __MODULE__: Symbol.for('Elixir.Version.Requirement'),
        __info__
    };

    Elixir.Version.Requirement.__exports = __exports

    return __exports;
}
ElixirScript.Core.Functions.build_namespace(Elixir, 'Elixir.Macro.Env').__load = function(Elixir) {
    if (Elixir.Macro.Env.__exports)
        return Elixir.Macro.Env.__exports;

    function __info__(kind) {
        const __info__map__ = new Map([[Symbol.for('functions'), [new ElixirScript.Core.Tuple(Symbol.for('__struct__'), 0), new ElixirScript.Core.Tuple(Symbol.for('__struct__'), 1), new ElixirScript.Core.Tuple(Symbol.for('in_guard?'), 1), new ElixirScript.Core.Tuple(Symbol.for('in_match?'), 1), new ElixirScript.Core.Tuple(Symbol.for('location'), 1), new ElixirScript.Core.Tuple(Symbol.for('stacktrace'), 1)]], [Symbol.for('macros'), []], [Symbol.for('attributes'), [new ElixirScript.Core.Tuple(Symbol.for('vsn'), [96412998362675849503915959306335830251])]], [Symbol.for('compile'), [new ElixirScript.Core.Tuple(Symbol.for('options'), []), new ElixirScript.Core.Tuple(Symbol.for('version'), [55, 46, 49, 46, 50]), new ElixirScript.Core.Tuple(Symbol.for('source'), '/private/tmp/elixir-20170929-51947-wgj4qu/elixir-1.5.2/lib/elixir/lib/macro/env.ex')]], [Symbol.for('md5'), new ElixirScript.Core.BitString(ElixirScript.Core.BitString.integer(72), ElixirScript.Core.BitString.integer(136), ElixirScript.Core.BitString.integer(119), ElixirScript.Core.BitString.integer(210), ElixirScript.Core.BitString.integer(157), ElixirScript.Core.BitString.integer(128), ElixirScript.Core.BitString.integer(67), ElixirScript.Core.BitString.integer(114), ElixirScript.Core.BitString.integer(65), ElixirScript.Core.BitString.integer(147), ElixirScript.Core.BitString.integer(194), ElixirScript.Core.BitString.integer(85), ElixirScript.Core.BitString.integer(35), ElixirScript.Core.BitString.integer(248), ElixirScript.Core.BitString.integer(64), ElixirScript.Core.BitString.integer(235))], [Symbol.for('module'), Symbol.for('Elixir.Macro.Env')]]);

        const value = __info__map__.get(kind);

        if (value !== null) {
            return value;
        }

        throw new ElixirScript.Core.Patterns.MatchError(kind);
    }

    function __struct__(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return new Map([[Symbol.for('__struct__'), Elixir.Macro.Env.__load(Elixir)], [Symbol.for('module'), null], [Symbol.for('file'), 'nofile'], [Symbol.for('line'), 0], [Symbol.for('function'), null], [Symbol.for('context'), null], [Symbol.for('requires'), []], [Symbol.for('aliases'), []], [Symbol.for('functions'), []], [Symbol.for('macros'), []], [Symbol.for('macro_aliases'), []], [Symbol.for('context_modules'), []], [Symbol.for('vars'), []], [Symbol.for('lexical_tracker'), null], [Symbol.for('export_vars'), null], [Symbol.for('match_vars'), Symbol.for('warn')], [Symbol.for('prematch_vars'), null]]);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('kv')], __function_args__, (kv0) => {
                return true;
            })) !== null) {
                let [kv0] = __arg_matches__;

                return Elixir.Enum.__load(Elixir).reduce(kv0, __struct__(), (...__function_args__) => {
                    function recur(...__function_args__) {
                        let __arg_matches__ = null;

                        if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                            values: [ElixirScript.Core.Patterns.variable('k'), ElixirScript.Core.Patterns.variable('v')]
                        }), ElixirScript.Core.Patterns.variable('acc')], __function_args__, (k0, v0, acc0) => {
                            return true;
                        })) !== null) {
                            let [k0, v0, acc0] = __arg_matches__;

                            return ElixirScript.Core.maps.update(k0, v0, acc0);
                        }

                        throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
                    }

                    return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
                });
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    const __exports = {
        __struct__,
        __MODULE__: Symbol.for('Elixir.Macro.Env'),
        __info__
    };

    Elixir.Macro.Env.__exports = __exports

    return __exports;
}
ElixirScript.Core.Functions.build_namespace(Elixir, 'Elixir.SystemLimitError').__load = function(Elixir) {
    if (Elixir.SystemLimitError.__exports)
        return Elixir.SystemLimitError.__exports;

    function __info__(kind) {
        const __info__map__ = new Map([[Symbol.for('functions'), [new ElixirScript.Core.Tuple(Symbol.for('__struct__'), 0), new ElixirScript.Core.Tuple(Symbol.for('__struct__'), 1), new ElixirScript.Core.Tuple(Symbol.for('exception'), 1), new ElixirScript.Core.Tuple(Symbol.for('message'), 1)]], [Symbol.for('macros'), []], [Symbol.for('attributes'), [new ElixirScript.Core.Tuple(Symbol.for('vsn'), [296220235358520669462125433312274481268]), new ElixirScript.Core.Tuple(Symbol.for('behaviour'), [Elixir.Exception.__load(Elixir)])]], [Symbol.for('compile'), [new ElixirScript.Core.Tuple(Symbol.for('options'), []), new ElixirScript.Core.Tuple(Symbol.for('version'), [55, 46, 49, 46, 50]), new ElixirScript.Core.Tuple(Symbol.for('source'), '/private/tmp/elixir-20170929-51947-wgj4qu/elixir-1.5.2/lib/elixir/lib/exception.ex')]], [Symbol.for('md5'), new ElixirScript.Core.BitString(ElixirScript.Core.BitString.integer(222), ElixirScript.Core.BitString.integer(217), ElixirScript.Core.BitString.integer(241), ElixirScript.Core.BitString.integer(48), ElixirScript.Core.BitString.integer(39), ElixirScript.Core.BitString.integer(191), ElixirScript.Core.BitString.integer(39), ElixirScript.Core.BitString.integer(160), ElixirScript.Core.BitString.integer(89), ElixirScript.Core.BitString.integer(230), ElixirScript.Core.BitString.integer(156), ElixirScript.Core.BitString.integer(57), ElixirScript.Core.BitString.integer(235), ElixirScript.Core.BitString.integer(183), ElixirScript.Core.BitString.integer(0), ElixirScript.Core.BitString.integer(116))], [Symbol.for('module'), Symbol.for('Elixir.SystemLimitError')]]);

        const value = __info__map__.get(kind);

        if (value !== null) {
            return value;
        }

        throw new ElixirScript.Core.Patterns.MatchError(kind);
    }

    function __struct__(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return new Map([[Symbol.for('__exception__'), true], [Symbol.for('__struct__'), Elixir.SystemLimitError.__load(Elixir)]]);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('kv576460752303386911')], __function_args__, (kv5764607523033869110) => {
                return true;
            })) !== null) {
                let [kv5764607523033869110] = __arg_matches__;

                const [map5764607523033869110, keys5764607523033869110] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                    values: [ElixirScript.Core.Patterns.variable('map576460752303386911'), ElixirScript.Core.Patterns.variable('keys576460752303386911')]
                }), Elixir.Enum.__load(Elixir).reduce(kv5764607523033869110, new ElixirScript.Core.Tuple(__struct__(), []), (...__function_args__) => {
                    function recur(...__function_args__) {
                        let __arg_matches__ = null;

                        if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                            values: [ElixirScript.Core.Patterns.variable('key576460752303386911'), ElixirScript.Core.Patterns.variable('val576460752303386911')]
                        }), ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                            values: [ElixirScript.Core.Patterns.variable('map576460752303386911'), ElixirScript.Core.Patterns.variable('keys576460752303386911')]
                        })], __function_args__, (key5764607523033869110, val5764607523033869110, map5764607523033869110, keys5764607523033869110) => {
                            return true;
                        })) !== null) {
                            let [key5764607523033869110, val5764607523033869110, map5764607523033869110, keys5764607523033869110] = __arg_matches__;

                            return new ElixirScript.Core.Tuple(ElixirScript.Core.maps.update(key5764607523033869110, val5764607523033869110, map5764607523033869110), Elixir.List.__load(Elixir).__delete__(keys5764607523033869110, key5764607523033869110));
                        }

                        throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
                    }

                    return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
                }));

                const _ref2468480 = new ElixirScript.Core.Tuple(map5764607523033869110, keys5764607523033869110);

                return ElixirScript.Core.Patterns.defmatch(ElixirScript.Core.Patterns.clause([[]], () => {
                    return map5764607523033869110;
                }, () => {
                    return true;
                }), ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.variable('_')], () => {
                    return ElixirScript.Core.erlang.error(Elixir.ArgumentError.__load(Elixir).exception('the following keys must also be given when building ' + ('struct ' + (Elixir.String.Chars.__load(Elixir).to_string(Elixir.Kernel.__load(Elixir).inspect(Elixir.SystemLimitError.__load(Elixir))) + (': ' + Elixir.String.Chars.__load(Elixir).to_string(Elixir.Kernel.__load(Elixir).inspect(keys5764607523033869110)))))));
                }, () => {
                    return true;
                })).call(this, keys5764607523033869110);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    const __exports = {
        __struct__,
        __MODULE__: Symbol.for('Elixir.SystemLimitError'),
        __info__
    };

    Elixir.SystemLimitError.__exports = __exports

    return __exports;
}
ElixirScript.Core.Functions.build_namespace(Elixir, 'Elixir.Application').__load = function(Elixir) {
    if (Elixir.Application.__exports)
        return Elixir.Application.__exports;

    function __info__(kind) {
        const __info__map__ = new Map([[Symbol.for('functions'), [new ElixirScript.Core.Tuple(Symbol.for('app_dir'), 1), new ElixirScript.Core.Tuple(Symbol.for('app_dir'), 2), new ElixirScript.Core.Tuple(Symbol.for('delete_env'), 2), new ElixirScript.Core.Tuple(Symbol.for('delete_env'), 3), new ElixirScript.Core.Tuple(Symbol.for('ensure_all_started'), 1), new ElixirScript.Core.Tuple(Symbol.for('ensure_all_started'), 2), new ElixirScript.Core.Tuple(Symbol.for('ensure_started'), 1), new ElixirScript.Core.Tuple(Symbol.for('ensure_started'), 2), new ElixirScript.Core.Tuple(Symbol.for('fetch_env'), 2), new ElixirScript.Core.Tuple(Symbol.for('fetch_env!'), 2), new ElixirScript.Core.Tuple(Symbol.for('format_error'), 1), new ElixirScript.Core.Tuple(Symbol.for('get_all_env'), 1), new ElixirScript.Core.Tuple(Symbol.for('get_application'), 1), new ElixirScript.Core.Tuple(Symbol.for('get_env'), 2), new ElixirScript.Core.Tuple(Symbol.for('get_env'), 3), new ElixirScript.Core.Tuple(Symbol.for('load'), 1), new ElixirScript.Core.Tuple(Symbol.for('loaded_applications'), 0), new ElixirScript.Core.Tuple(Symbol.for('put_env'), 3), new ElixirScript.Core.Tuple(Symbol.for('put_env'), 4), new ElixirScript.Core.Tuple(Symbol.for('spec'), 1), new ElixirScript.Core.Tuple(Symbol.for('spec'), 2), new ElixirScript.Core.Tuple(Symbol.for('start'), 1), new ElixirScript.Core.Tuple(Symbol.for('start'), 2), new ElixirScript.Core.Tuple(Symbol.for('started_applications'), 0), new ElixirScript.Core.Tuple(Symbol.for('started_applications'), 1), new ElixirScript.Core.Tuple(Symbol.for('stop'), 1), new ElixirScript.Core.Tuple(Symbol.for('unload'), 1)]], [Symbol.for('macros'), [new ElixirScript.Core.Tuple(Symbol.for('__using__'), 1)]], [Symbol.for('attributes'), [new ElixirScript.Core.Tuple(Symbol.for('vsn'), [304463378597513731124515206257966072795])]], [Symbol.for('compile'), [new ElixirScript.Core.Tuple(Symbol.for('options'), []), new ElixirScript.Core.Tuple(Symbol.for('version'), [55, 46, 49, 46, 50]), new ElixirScript.Core.Tuple(Symbol.for('source'), '/private/tmp/elixir-20170929-51947-wgj4qu/elixir-1.5.2/lib/elixir/lib/application.ex')]], [Symbol.for('md5'), new ElixirScript.Core.BitString(ElixirScript.Core.BitString.integer(229), ElixirScript.Core.BitString.integer(13), ElixirScript.Core.BitString.integer(131), ElixirScript.Core.BitString.integer(135), ElixirScript.Core.BitString.integer(39), ElixirScript.Core.BitString.integer(63), ElixirScript.Core.BitString.integer(200), ElixirScript.Core.BitString.integer(189), ElixirScript.Core.BitString.integer(89), ElixirScript.Core.BitString.integer(173), ElixirScript.Core.BitString.integer(160), ElixirScript.Core.BitString.integer(149), ElixirScript.Core.BitString.integer(152), ElixirScript.Core.BitString.integer(112), ElixirScript.Core.BitString.integer(67), ElixirScript.Core.BitString.integer(219))], [Symbol.for('module'), Symbol.for('Elixir.Application')]]);

        const value = __info__map__.get(kind);

        if (value !== null) {
            return value;
        }

        throw new ElixirScript.Core.Patterns.MatchError(kind);
    }

    function start(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('app'), ElixirScript.Core.Patterns.variable('type')], __function_args__, (app0, type0) => {
                return ElixirScript.Core.erlang.is_atom(app0);
            })) !== null) {
                let [app0, type0] = __arg_matches__;

                return ElixirScript.Core.application.start(app0, type0);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    const __exports = {
        start,
        __MODULE__: Symbol.for('Elixir.Application'),
        __info__
    };

    Elixir.Application.__exports = __exports

    return __exports;
}
ElixirScript.Core.Functions.build_namespace(Elixir, 'Elixir.ErlangError').__load = function(Elixir) {
    if (Elixir.ErlangError.__exports)
        return Elixir.ErlangError.__exports;

    function __info__(kind) {
        const __info__map__ = new Map([[Symbol.for('functions'), [new ElixirScript.Core.Tuple(Symbol.for('__struct__'), 0), new ElixirScript.Core.Tuple(Symbol.for('__struct__'), 1), new ElixirScript.Core.Tuple(Symbol.for('exception'), 1), new ElixirScript.Core.Tuple(Symbol.for('message'), 1), new ElixirScript.Core.Tuple(Symbol.for('normalize'), 2)]], [Symbol.for('macros'), []], [Symbol.for('attributes'), [new ElixirScript.Core.Tuple(Symbol.for('vsn'), [186333256428598408477452727444485826622]), new ElixirScript.Core.Tuple(Symbol.for('behaviour'), [Elixir.Exception.__load(Elixir)])]], [Symbol.for('compile'), [new ElixirScript.Core.Tuple(Symbol.for('options'), []), new ElixirScript.Core.Tuple(Symbol.for('version'), [55, 46, 49, 46, 50]), new ElixirScript.Core.Tuple(Symbol.for('source'), '/private/tmp/elixir-20170929-51947-wgj4qu/elixir-1.5.2/lib/elixir/lib/exception.ex')]], [Symbol.for('md5'), new ElixirScript.Core.BitString(ElixirScript.Core.BitString.integer(140), ElixirScript.Core.BitString.integer(46), ElixirScript.Core.BitString.integer(122), ElixirScript.Core.BitString.integer(213), ElixirScript.Core.BitString.integer(108), ElixirScript.Core.BitString.integer(184), ElixirScript.Core.BitString.integer(105), ElixirScript.Core.BitString.integer(211), ElixirScript.Core.BitString.integer(78), ElixirScript.Core.BitString.integer(117), ElixirScript.Core.BitString.integer(202), ElixirScript.Core.BitString.integer(27), ElixirScript.Core.BitString.integer(246), ElixirScript.Core.BitString.integer(249), ElixirScript.Core.BitString.integer(232), ElixirScript.Core.BitString.integer(62))], [Symbol.for('module'), Symbol.for('Elixir.ErlangError')]]);

        const value = __info__map__.get(kind);

        if (value !== null) {
            return value;
        }

        throw new ElixirScript.Core.Patterns.MatchError(kind);
    }

    function __struct__(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return new Map([[Symbol.for('__exception__'), true], [Symbol.for('__struct__'), Elixir.ErlangError.__load(Elixir)], [Symbol.for('original'), null]]);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('kv576460752303352863')], __function_args__, (kv5764607523033528630) => {
                return true;
            })) !== null) {
                let [kv5764607523033528630] = __arg_matches__;

                const [map5764607523033528630, keys5764607523033528630] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                    values: [ElixirScript.Core.Patterns.variable('map576460752303352863'), ElixirScript.Core.Patterns.variable('keys576460752303352863')]
                }), Elixir.Enum.__load(Elixir).reduce(kv5764607523033528630, new ElixirScript.Core.Tuple(__struct__(), []), (...__function_args__) => {
                    function recur(...__function_args__) {
                        let __arg_matches__ = null;

                        if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                            values: [ElixirScript.Core.Patterns.variable('key576460752303352863'), ElixirScript.Core.Patterns.variable('val576460752303352863')]
                        }), ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                            values: [ElixirScript.Core.Patterns.variable('map576460752303352863'), ElixirScript.Core.Patterns.variable('keys576460752303352863')]
                        })], __function_args__, (key5764607523033528630, val5764607523033528630, map5764607523033528630, keys5764607523033528630) => {
                            return true;
                        })) !== null) {
                            let [key5764607523033528630, val5764607523033528630, map5764607523033528630, keys5764607523033528630] = __arg_matches__;

                            return new ElixirScript.Core.Tuple(ElixirScript.Core.maps.update(key5764607523033528630, val5764607523033528630, map5764607523033528630), Elixir.List.__load(Elixir).__delete__(keys5764607523033528630, key5764607523033528630));
                        }

                        throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
                    }

                    return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
                }));

                const _ref5543496 = new ElixirScript.Core.Tuple(map5764607523033528630, keys5764607523033528630);

                return ElixirScript.Core.Patterns.defmatch(ElixirScript.Core.Patterns.clause([[]], () => {
                    return map5764607523033528630;
                }, () => {
                    return true;
                }), ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.variable('_')], () => {
                    return ElixirScript.Core.erlang.error(Elixir.ArgumentError.__load(Elixir).exception('the following keys must also be given when building ' + ('struct ' + (Elixir.String.Chars.__load(Elixir).to_string(Elixir.Kernel.__load(Elixir).inspect(Elixir.ErlangError.__load(Elixir))) + (': ' + Elixir.String.Chars.__load(Elixir).to_string(Elixir.Kernel.__load(Elixir).inspect(keys5764607523033528630)))))));
                }, () => {
                    return true;
                })).call(this, keys5764607523033528630);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    const __exports = {
        __struct__,
        __MODULE__: Symbol.for('Elixir.ErlangError'),
        __info__
    };

    Elixir.ErlangError.__exports = __exports

    return __exports;
}
ElixirScript.Core.Functions.build_namespace(Elixir, 'Elixir.BadArityError').__load = function(Elixir) {
    if (Elixir.BadArityError.__exports)
        return Elixir.BadArityError.__exports;

    function __info__(kind) {
        const __info__map__ = new Map([[Symbol.for('functions'), [new ElixirScript.Core.Tuple(Symbol.for('__struct__'), 0), new ElixirScript.Core.Tuple(Symbol.for('__struct__'), 1), new ElixirScript.Core.Tuple(Symbol.for('exception'), 1), new ElixirScript.Core.Tuple(Symbol.for('message'), 1)]], [Symbol.for('macros'), []], [Symbol.for('attributes'), [new ElixirScript.Core.Tuple(Symbol.for('vsn'), [146683077638199439507951253737297739919]), new ElixirScript.Core.Tuple(Symbol.for('behaviour'), [Elixir.Exception.__load(Elixir)])]], [Symbol.for('compile'), [new ElixirScript.Core.Tuple(Symbol.for('options'), []), new ElixirScript.Core.Tuple(Symbol.for('version'), [55, 46, 49, 46, 50]), new ElixirScript.Core.Tuple(Symbol.for('source'), '/private/tmp/elixir-20170929-51947-wgj4qu/elixir-1.5.2/lib/elixir/lib/exception.ex')]], [Symbol.for('md5'), new ElixirScript.Core.BitString(ElixirScript.Core.BitString.integer(110), ElixirScript.Core.BitString.integer(90), ElixirScript.Core.BitString.integer(34), ElixirScript.Core.BitString.integer(22), ElixirScript.Core.BitString.integer(128), ElixirScript.Core.BitString.integer(25), ElixirScript.Core.BitString.integer(32), ElixirScript.Core.BitString.integer(217), ElixirScript.Core.BitString.integer(139), ElixirScript.Core.BitString.integer(161), ElixirScript.Core.BitString.integer(107), ElixirScript.Core.BitString.integer(30), ElixirScript.Core.BitString.integer(205), ElixirScript.Core.BitString.integer(81), ElixirScript.Core.BitString.integer(0), ElixirScript.Core.BitString.integer(143))], [Symbol.for('module'), Symbol.for('Elixir.BadArityError')]]);

        const value = __info__map__.get(kind);

        if (value !== null) {
            return value;
        }

        throw new ElixirScript.Core.Patterns.MatchError(kind);
    }

    function __struct__(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return new Map([[Symbol.for('__exception__'), true], [Symbol.for('__struct__'), Elixir.BadArityError.__load(Elixir)], [Symbol.for('args'), null], [Symbol.for('function'), null]]);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('kv576460752303370846')], __function_args__, (kv5764607523033708460) => {
                return true;
            })) !== null) {
                let [kv5764607523033708460] = __arg_matches__;

                const [map5764607523033708460, keys5764607523033708460] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                    values: [ElixirScript.Core.Patterns.variable('map576460752303370846'), ElixirScript.Core.Patterns.variable('keys576460752303370846')]
                }), Elixir.Enum.__load(Elixir).reduce(kv5764607523033708460, new ElixirScript.Core.Tuple(__struct__(), []), (...__function_args__) => {
                    function recur(...__function_args__) {
                        let __arg_matches__ = null;

                        if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                            values: [ElixirScript.Core.Patterns.variable('key576460752303370846'), ElixirScript.Core.Patterns.variable('val576460752303370846')]
                        }), ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                            values: [ElixirScript.Core.Patterns.variable('map576460752303370846'), ElixirScript.Core.Patterns.variable('keys576460752303370846')]
                        })], __function_args__, (key5764607523033708460, val5764607523033708460, map5764607523033708460, keys5764607523033708460) => {
                            return true;
                        })) !== null) {
                            let [key5764607523033708460, val5764607523033708460, map5764607523033708460, keys5764607523033708460] = __arg_matches__;

                            return new ElixirScript.Core.Tuple(ElixirScript.Core.maps.update(key5764607523033708460, val5764607523033708460, map5764607523033708460), Elixir.List.__load(Elixir).__delete__(keys5764607523033708460, key5764607523033708460));
                        }

                        throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
                    }

                    return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
                }));

                const _ref4055993 = new ElixirScript.Core.Tuple(map5764607523033708460, keys5764607523033708460);

                return ElixirScript.Core.Patterns.defmatch(ElixirScript.Core.Patterns.clause([[]], () => {
                    return map5764607523033708460;
                }, () => {
                    return true;
                }), ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.variable('_')], () => {
                    return ElixirScript.Core.erlang.error(Elixir.ArgumentError.__load(Elixir).exception('the following keys must also be given when building ' + ('struct ' + (Elixir.String.Chars.__load(Elixir).to_string(Elixir.Kernel.__load(Elixir).inspect(Elixir.BadArityError.__load(Elixir))) + (': ' + Elixir.String.Chars.__load(Elixir).to_string(Elixir.Kernel.__load(Elixir).inspect(keys5764607523033708460)))))));
                }, () => {
                    return true;
                })).call(this, keys5764607523033708460);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    const __exports = {
        __struct__,
        __MODULE__: Symbol.for('Elixir.BadArityError'),
        __info__
    };

    Elixir.BadArityError.__exports = __exports

    return __exports;
}
ElixirScript.Core.Functions.build_namespace(Elixir, 'Elixir.ArithmeticError').__load = function(Elixir) {
    if (Elixir.ArithmeticError.__exports)
        return Elixir.ArithmeticError.__exports;

    function __info__(kind) {
        const __info__map__ = new Map([[Symbol.for('functions'), [new ElixirScript.Core.Tuple(Symbol.for('__struct__'), 0), new ElixirScript.Core.Tuple(Symbol.for('__struct__'), 1), new ElixirScript.Core.Tuple(Symbol.for('exception'), 1), new ElixirScript.Core.Tuple(Symbol.for('message'), 1)]], [Symbol.for('macros'), []], [Symbol.for('attributes'), [new ElixirScript.Core.Tuple(Symbol.for('vsn'), [324913333050734226878192336661517975807]), new ElixirScript.Core.Tuple(Symbol.for('behaviour'), [Elixir.Exception.__load(Elixir)])]], [Symbol.for('compile'), [new ElixirScript.Core.Tuple(Symbol.for('options'), []), new ElixirScript.Core.Tuple(Symbol.for('version'), [55, 46, 49, 46, 50]), new ElixirScript.Core.Tuple(Symbol.for('source'), '/private/tmp/elixir-20170929-51947-wgj4qu/elixir-1.5.2/lib/elixir/lib/exception.ex')]], [Symbol.for('md5'), new ElixirScript.Core.BitString(ElixirScript.Core.BitString.integer(244), ElixirScript.Core.BitString.integer(112), ElixirScript.Core.BitString.integer(8), ElixirScript.Core.BitString.integer(32), ElixirScript.Core.BitString.integer(117), ElixirScript.Core.BitString.integer(224), ElixirScript.Core.BitString.integer(58), ElixirScript.Core.BitString.integer(222), ElixirScript.Core.BitString.integer(4), ElixirScript.Core.BitString.integer(118), ElixirScript.Core.BitString.integer(107), ElixirScript.Core.BitString.integer(219), ElixirScript.Core.BitString.integer(131), ElixirScript.Core.BitString.integer(72), ElixirScript.Core.BitString.integer(64), ElixirScript.Core.BitString.integer(255))], [Symbol.for('module'), Symbol.for('Elixir.ArithmeticError')]]);

        const value = __info__map__.get(kind);

        if (value !== null) {
            return value;
        }

        throw new ElixirScript.Core.Patterns.MatchError(kind);
    }

    function __struct__(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return new Map([[Symbol.for('__exception__'), true], [Symbol.for('__struct__'), Elixir.ArithmeticError.__load(Elixir)], [Symbol.for('message'), 'bad argument in arithmetic expression']]);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('kv576460752303387647')], __function_args__, (kv5764607523033876470) => {
                return true;
            })) !== null) {
                let [kv5764607523033876470] = __arg_matches__;

                const [map5764607523033876470, keys5764607523033876470] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                    values: [ElixirScript.Core.Patterns.variable('map576460752303387647'), ElixirScript.Core.Patterns.variable('keys576460752303387647')]
                }), Elixir.Enum.__load(Elixir).reduce(kv5764607523033876470, new ElixirScript.Core.Tuple(__struct__(), []), (...__function_args__) => {
                    function recur(...__function_args__) {
                        let __arg_matches__ = null;

                        if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                            values: [ElixirScript.Core.Patterns.variable('key576460752303387647'), ElixirScript.Core.Patterns.variable('val576460752303387647')]
                        }), ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                            values: [ElixirScript.Core.Patterns.variable('map576460752303387647'), ElixirScript.Core.Patterns.variable('keys576460752303387647')]
                        })], __function_args__, (key5764607523033876470, val5764607523033876470, map5764607523033876470, keys5764607523033876470) => {
                            return true;
                        })) !== null) {
                            let [key5764607523033876470, val5764607523033876470, map5764607523033876470, keys5764607523033876470] = __arg_matches__;

                            return new ElixirScript.Core.Tuple(ElixirScript.Core.maps.update(key5764607523033876470, val5764607523033876470, map5764607523033876470), Elixir.List.__load(Elixir).__delete__(keys5764607523033876470, key5764607523033876470));
                        }

                        throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
                    }

                    return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
                }));

                const _ref1356145 = new ElixirScript.Core.Tuple(map5764607523033876470, keys5764607523033876470);

                return ElixirScript.Core.Patterns.defmatch(ElixirScript.Core.Patterns.clause([[]], () => {
                    return map5764607523033876470;
                }, () => {
                    return true;
                }), ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.variable('_')], () => {
                    return ElixirScript.Core.erlang.error(Elixir.ArgumentError.__load(Elixir).exception('the following keys must also be given when building ' + ('struct ' + (Elixir.String.Chars.__load(Elixir).to_string(Elixir.Kernel.__load(Elixir).inspect(Elixir.ArithmeticError.__load(Elixir))) + (': ' + Elixir.String.Chars.__load(Elixir).to_string(Elixir.Kernel.__load(Elixir).inspect(keys5764607523033876470)))))));
                }, () => {
                    return true;
                })).call(this, keys5764607523033876470);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    const __exports = {
        __struct__,
        __MODULE__: Symbol.for('Elixir.ArithmeticError'),
        __info__
    };

    Elixir.ArithmeticError.__exports = __exports

    return __exports;
}
ElixirScript.Core.Functions.build_namespace(Elixir, 'Elixir.CondClauseError').__load = function(Elixir) {
    if (Elixir.CondClauseError.__exports)
        return Elixir.CondClauseError.__exports;

    function __info__(kind) {
        const __info__map__ = new Map([[Symbol.for('functions'), [new ElixirScript.Core.Tuple(Symbol.for('__struct__'), 0), new ElixirScript.Core.Tuple(Symbol.for('__struct__'), 1), new ElixirScript.Core.Tuple(Symbol.for('exception'), 1), new ElixirScript.Core.Tuple(Symbol.for('message'), 1)]], [Symbol.for('macros'), []], [Symbol.for('attributes'), [new ElixirScript.Core.Tuple(Symbol.for('vsn'), [55243355178163322632872505156824012319]), new ElixirScript.Core.Tuple(Symbol.for('behaviour'), [Elixir.Exception.__load(Elixir)])]], [Symbol.for('compile'), [new ElixirScript.Core.Tuple(Symbol.for('options'), []), new ElixirScript.Core.Tuple(Symbol.for('version'), [55, 46, 49, 46, 50]), new ElixirScript.Core.Tuple(Symbol.for('source'), '/private/tmp/elixir-20170929-51947-wgj4qu/elixir-1.5.2/lib/elixir/lib/exception.ex')]], [Symbol.for('md5'), new ElixirScript.Core.BitString(ElixirScript.Core.BitString.integer(41), ElixirScript.Core.BitString.integer(143), ElixirScript.Core.BitString.integer(123), ElixirScript.Core.BitString.integer(178), ElixirScript.Core.BitString.integer(197), ElixirScript.Core.BitString.integer(205), ElixirScript.Core.BitString.integer(156), ElixirScript.Core.BitString.integer(74), ElixirScript.Core.BitString.integer(227), ElixirScript.Core.BitString.integer(31), ElixirScript.Core.BitString.integer(137), ElixirScript.Core.BitString.integer(164), ElixirScript.Core.BitString.integer(24), ElixirScript.Core.BitString.integer(81), ElixirScript.Core.BitString.integer(22), ElixirScript.Core.BitString.integer(31))], [Symbol.for('module'), Symbol.for('Elixir.CondClauseError')]]);

        const value = __info__map__.get(kind);

        if (value !== null) {
            return value;
        }

        throw new ElixirScript.Core.Patterns.MatchError(kind);
    }

    function __struct__(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return new Map([[Symbol.for('__exception__'), true], [Symbol.for('__struct__'), Elixir.CondClauseError.__load(Elixir)]]);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('kv576460752303378876')], __function_args__, (kv5764607523033788760) => {
                return true;
            })) !== null) {
                let [kv5764607523033788760] = __arg_matches__;

                const [map5764607523033788760, keys5764607523033788760] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                    values: [ElixirScript.Core.Patterns.variable('map576460752303378876'), ElixirScript.Core.Patterns.variable('keys576460752303378876')]
                }), Elixir.Enum.__load(Elixir).reduce(kv5764607523033788760, new ElixirScript.Core.Tuple(__struct__(), []), (...__function_args__) => {
                    function recur(...__function_args__) {
                        let __arg_matches__ = null;

                        if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                            values: [ElixirScript.Core.Patterns.variable('key576460752303378876'), ElixirScript.Core.Patterns.variable('val576460752303378876')]
                        }), ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                            values: [ElixirScript.Core.Patterns.variable('map576460752303378876'), ElixirScript.Core.Patterns.variable('keys576460752303378876')]
                        })], __function_args__, (key5764607523033788760, val5764607523033788760, map5764607523033788760, keys5764607523033788760) => {
                            return true;
                        })) !== null) {
                            let [key5764607523033788760, val5764607523033788760, map5764607523033788760, keys5764607523033788760] = __arg_matches__;

                            return new ElixirScript.Core.Tuple(ElixirScript.Core.maps.update(key5764607523033788760, val5764607523033788760, map5764607523033788760), Elixir.List.__load(Elixir).__delete__(keys5764607523033788760, key5764607523033788760));
                        }

                        throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
                    }

                    return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
                }));

                const _ref800812 = new ElixirScript.Core.Tuple(map5764607523033788760, keys5764607523033788760);

                return ElixirScript.Core.Patterns.defmatch(ElixirScript.Core.Patterns.clause([[]], () => {
                    return map5764607523033788760;
                }, () => {
                    return true;
                }), ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.variable('_')], () => {
                    return ElixirScript.Core.erlang.error(Elixir.ArgumentError.__load(Elixir).exception('the following keys must also be given when building ' + ('struct ' + (Elixir.String.Chars.__load(Elixir).to_string(Elixir.Kernel.__load(Elixir).inspect(Elixir.CondClauseError.__load(Elixir))) + (': ' + Elixir.String.Chars.__load(Elixir).to_string(Elixir.Kernel.__load(Elixir).inspect(keys5764607523033788760)))))));
                }, () => {
                    return true;
                })).call(this, keys5764607523033788760);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    const __exports = {
        __struct__,
        __MODULE__: Symbol.for('Elixir.CondClauseError'),
        __info__
    };

    Elixir.CondClauseError.__exports = __exports

    return __exports;
}
ElixirScript.Core.Functions.build_namespace(Elixir, 'Elixir.BadStructError').__load = function(Elixir) {
    if (Elixir.BadStructError.__exports)
        return Elixir.BadStructError.__exports;

    function __info__(kind) {
        const __info__map__ = new Map([[Symbol.for('functions'), [new ElixirScript.Core.Tuple(Symbol.for('__struct__'), 0), new ElixirScript.Core.Tuple(Symbol.for('__struct__'), 1), new ElixirScript.Core.Tuple(Symbol.for('exception'), 1), new ElixirScript.Core.Tuple(Symbol.for('message'), 1)]], [Symbol.for('macros'), []], [Symbol.for('attributes'), [new ElixirScript.Core.Tuple(Symbol.for('vsn'), [89623760543187956492704493065554701207]), new ElixirScript.Core.Tuple(Symbol.for('behaviour'), [Elixir.Exception.__load(Elixir)])]], [Symbol.for('compile'), [new ElixirScript.Core.Tuple(Symbol.for('options'), []), new ElixirScript.Core.Tuple(Symbol.for('version'), [55, 46, 49, 46, 50]), new ElixirScript.Core.Tuple(Symbol.for('source'), '/private/tmp/elixir-20170929-51947-wgj4qu/elixir-1.5.2/lib/elixir/lib/exception.ex')]], [Symbol.for('md5'), new ElixirScript.Core.BitString(ElixirScript.Core.BitString.integer(67), ElixirScript.Core.BitString.integer(108), ElixirScript.Core.BitString.integer(232), ElixirScript.Core.BitString.integer(141), ElixirScript.Core.BitString.integer(241), ElixirScript.Core.BitString.integer(76), ElixirScript.Core.BitString.integer(22), ElixirScript.Core.BitString.integer(16), ElixirScript.Core.BitString.integer(125), ElixirScript.Core.BitString.integer(19), ElixirScript.Core.BitString.integer(200), ElixirScript.Core.BitString.integer(255), ElixirScript.Core.BitString.integer(171), ElixirScript.Core.BitString.integer(205), ElixirScript.Core.BitString.integer(43), ElixirScript.Core.BitString.integer(151))], [Symbol.for('module'), Symbol.for('Elixir.BadStructError')]]);

        const value = __info__map__.get(kind);

        if (value !== null) {
            return value;
        }

        throw new ElixirScript.Core.Patterns.MatchError(kind);
    }

    function __struct__(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return new Map([[Symbol.for('__exception__'), true], [Symbol.for('__struct__'), Elixir.BadStructError.__load(Elixir)], [Symbol.for('struct'), null], [Symbol.for('term'), null]]);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('kv576460752303375583')], __function_args__, (kv5764607523033755830) => {
                return true;
            })) !== null) {
                let [kv5764607523033755830] = __arg_matches__;

                const [map5764607523033755830, keys5764607523033755830] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                    values: [ElixirScript.Core.Patterns.variable('map576460752303375583'), ElixirScript.Core.Patterns.variable('keys576460752303375583')]
                }), Elixir.Enum.__load(Elixir).reduce(kv5764607523033755830, new ElixirScript.Core.Tuple(__struct__(), []), (...__function_args__) => {
                    function recur(...__function_args__) {
                        let __arg_matches__ = null;

                        if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                            values: [ElixirScript.Core.Patterns.variable('key576460752303375583'), ElixirScript.Core.Patterns.variable('val576460752303375583')]
                        }), ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                            values: [ElixirScript.Core.Patterns.variable('map576460752303375583'), ElixirScript.Core.Patterns.variable('keys576460752303375583')]
                        })], __function_args__, (key5764607523033755830, val5764607523033755830, map5764607523033755830, keys5764607523033755830) => {
                            return true;
                        })) !== null) {
                            let [key5764607523033755830, val5764607523033755830, map5764607523033755830, keys5764607523033755830] = __arg_matches__;

                            return new ElixirScript.Core.Tuple(ElixirScript.Core.maps.update(key5764607523033755830, val5764607523033755830, map5764607523033755830), Elixir.List.__load(Elixir).__delete__(keys5764607523033755830, key5764607523033755830));
                        }

                        throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
                    }

                    return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
                }));

                const _ref7098817 = new ElixirScript.Core.Tuple(map5764607523033755830, keys5764607523033755830);

                return ElixirScript.Core.Patterns.defmatch(ElixirScript.Core.Patterns.clause([[]], () => {
                    return map5764607523033755830;
                }, () => {
                    return true;
                }), ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.variable('_')], () => {
                    return ElixirScript.Core.erlang.error(Elixir.ArgumentError.__load(Elixir).exception('the following keys must also be given when building ' + ('struct ' + (Elixir.String.Chars.__load(Elixir).to_string(Elixir.Kernel.__load(Elixir).inspect(Elixir.BadStructError.__load(Elixir))) + (': ' + Elixir.String.Chars.__load(Elixir).to_string(Elixir.Kernel.__load(Elixir).inspect(keys5764607523033755830)))))));
                }, () => {
                    return true;
                })).call(this, keys5764607523033755830);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    const __exports = {
        __struct__,
        __MODULE__: Symbol.for('Elixir.BadStructError'),
        __info__
    };

    Elixir.BadStructError.__exports = __exports

    return __exports;
}
ElixirScript.Core.Functions.build_namespace(Elixir, 'Elixir.BadFunctionError').__load = function(Elixir) {
    if (Elixir.BadFunctionError.__exports)
        return Elixir.BadFunctionError.__exports;

    function __info__(kind) {
        const __info__map__ = new Map([[Symbol.for('functions'), [new ElixirScript.Core.Tuple(Symbol.for('__struct__'), 0), new ElixirScript.Core.Tuple(Symbol.for('__struct__'), 1), new ElixirScript.Core.Tuple(Symbol.for('exception'), 1), new ElixirScript.Core.Tuple(Symbol.for('message'), 1)]], [Symbol.for('macros'), []], [Symbol.for('attributes'), [new ElixirScript.Core.Tuple(Symbol.for('vsn'), [319473884326606676641834399423699118085]), new ElixirScript.Core.Tuple(Symbol.for('behaviour'), [Elixir.Exception.__load(Elixir)])]], [Symbol.for('compile'), [new ElixirScript.Core.Tuple(Symbol.for('options'), []), new ElixirScript.Core.Tuple(Symbol.for('version'), [55, 46, 49, 46, 50]), new ElixirScript.Core.Tuple(Symbol.for('source'), '/private/tmp/elixir-20170929-51947-wgj4qu/elixir-1.5.2/lib/elixir/lib/exception.ex')]], [Symbol.for('md5'), new ElixirScript.Core.BitString(ElixirScript.Core.BitString.integer(240), ElixirScript.Core.BitString.integer(88), ElixirScript.Core.BitString.integer(110), ElixirScript.Core.BitString.integer(153), ElixirScript.Core.BitString.integer(89), ElixirScript.Core.BitString.integer(137), ElixirScript.Core.BitString.integer(158), ElixirScript.Core.BitString.integer(59), ElixirScript.Core.BitString.integer(191), ElixirScript.Core.BitString.integer(27), ElixirScript.Core.BitString.integer(23), ElixirScript.Core.BitString.integer(146), ElixirScript.Core.BitString.integer(112), ElixirScript.Core.BitString.integer(68), ElixirScript.Core.BitString.integer(104), ElixirScript.Core.BitString.integer(5))], [Symbol.for('module'), Symbol.for('Elixir.BadFunctionError')]]);

        const value = __info__map__.get(kind);

        if (value !== null) {
            return value;
        }

        throw new ElixirScript.Core.Patterns.MatchError(kind);
    }

    function __struct__(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return new Map([[Symbol.for('__exception__'), true], [Symbol.for('__struct__'), Elixir.BadFunctionError.__load(Elixir)], [Symbol.for('term'), null]]);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('kv576460752303382684')], __function_args__, (kv5764607523033826840) => {
                return true;
            })) !== null) {
                let [kv5764607523033826840] = __arg_matches__;

                const [map5764607523033826840, keys5764607523033826840] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                    values: [ElixirScript.Core.Patterns.variable('map576460752303382684'), ElixirScript.Core.Patterns.variable('keys576460752303382684')]
                }), Elixir.Enum.__load(Elixir).reduce(kv5764607523033826840, new ElixirScript.Core.Tuple(__struct__(), []), (...__function_args__) => {
                    function recur(...__function_args__) {
                        let __arg_matches__ = null;

                        if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                            values: [ElixirScript.Core.Patterns.variable('key576460752303382684'), ElixirScript.Core.Patterns.variable('val576460752303382684')]
                        }), ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                            values: [ElixirScript.Core.Patterns.variable('map576460752303382684'), ElixirScript.Core.Patterns.variable('keys576460752303382684')]
                        })], __function_args__, (key5764607523033826840, val5764607523033826840, map5764607523033826840, keys5764607523033826840) => {
                            return true;
                        })) !== null) {
                            let [key5764607523033826840, val5764607523033826840, map5764607523033826840, keys5764607523033826840] = __arg_matches__;

                            return new ElixirScript.Core.Tuple(ElixirScript.Core.maps.update(key5764607523033826840, val5764607523033826840, map5764607523033826840), Elixir.List.__load(Elixir).__delete__(keys5764607523033826840, key5764607523033826840));
                        }

                        throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
                    }

                    return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
                }));

                const _ref746930 = new ElixirScript.Core.Tuple(map5764607523033826840, keys5764607523033826840);

                return ElixirScript.Core.Patterns.defmatch(ElixirScript.Core.Patterns.clause([[]], () => {
                    return map5764607523033826840;
                }, () => {
                    return true;
                }), ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.variable('_')], () => {
                    return ElixirScript.Core.erlang.error(Elixir.ArgumentError.__load(Elixir).exception('the following keys must also be given when building ' + ('struct ' + (Elixir.String.Chars.__load(Elixir).to_string(Elixir.Kernel.__load(Elixir).inspect(Elixir.BadFunctionError.__load(Elixir))) + (': ' + Elixir.String.Chars.__load(Elixir).to_string(Elixir.Kernel.__load(Elixir).inspect(keys5764607523033826840)))))));
                }, () => {
                    return true;
                })).call(this, keys5764607523033826840);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    const __exports = {
        __struct__,
        __MODULE__: Symbol.for('Elixir.BadFunctionError'),
        __info__
    };

    Elixir.BadFunctionError.__exports = __exports

    return __exports;
}
ElixirScript.Core.Functions.build_namespace(Elixir, 'Elixir.BadMapError').__load = function(Elixir) {
    if (Elixir.BadMapError.__exports)
        return Elixir.BadMapError.__exports;

    function __info__(kind) {
        const __info__map__ = new Map([[Symbol.for('functions'), [new ElixirScript.Core.Tuple(Symbol.for('__struct__'), 0), new ElixirScript.Core.Tuple(Symbol.for('__struct__'), 1), new ElixirScript.Core.Tuple(Symbol.for('exception'), 1), new ElixirScript.Core.Tuple(Symbol.for('message'), 1)]], [Symbol.for('macros'), []], [Symbol.for('attributes'), [new ElixirScript.Core.Tuple(Symbol.for('vsn'), [263639884950502947974323034644174588945]), new ElixirScript.Core.Tuple(Symbol.for('behaviour'), [Elixir.Exception.__load(Elixir)])]], [Symbol.for('compile'), [new ElixirScript.Core.Tuple(Symbol.for('options'), []), new ElixirScript.Core.Tuple(Symbol.for('version'), [55, 46, 49, 46, 50]), new ElixirScript.Core.Tuple(Symbol.for('source'), '/private/tmp/elixir-20170929-51947-wgj4qu/elixir-1.5.2/lib/elixir/lib/exception.ex')]], [Symbol.for('md5'), new ElixirScript.Core.BitString(ElixirScript.Core.BitString.integer(198), ElixirScript.Core.BitString.integer(87), ElixirScript.Core.BitString.integer(49), ElixirScript.Core.BitString.integer(228), ElixirScript.Core.BitString.integer(181), ElixirScript.Core.BitString.integer(238), ElixirScript.Core.BitString.integer(197), ElixirScript.Core.BitString.integer(82), ElixirScript.Core.BitString.integer(138), ElixirScript.Core.BitString.integer(218), ElixirScript.Core.BitString.integer(137), ElixirScript.Core.BitString.integer(19), ElixirScript.Core.BitString.integer(46), ElixirScript.Core.BitString.integer(131), ElixirScript.Core.BitString.integer(204), ElixirScript.Core.BitString.integer(17))], [Symbol.for('module'), Symbol.for('Elixir.BadMapError')]]);

        const value = __info__map__.get(kind);

        if (value !== null) {
            return value;
        }

        throw new ElixirScript.Core.Patterns.MatchError(kind);
    }

    function __struct__(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return new Map([[Symbol.for('__exception__'), true], [Symbol.for('__struct__'), Elixir.BadMapError.__load(Elixir)], [Symbol.for('term'), null]]);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('kv576460752303373439')], __function_args__, (kv5764607523033734390) => {
                return true;
            })) !== null) {
                let [kv5764607523033734390] = __arg_matches__;

                const [map5764607523033734390, keys5764607523033734390] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                    values: [ElixirScript.Core.Patterns.variable('map576460752303373439'), ElixirScript.Core.Patterns.variable('keys576460752303373439')]
                }), Elixir.Enum.__load(Elixir).reduce(kv5764607523033734390, new ElixirScript.Core.Tuple(__struct__(), []), (...__function_args__) => {
                    function recur(...__function_args__) {
                        let __arg_matches__ = null;

                        if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                            values: [ElixirScript.Core.Patterns.variable('key576460752303373439'), ElixirScript.Core.Patterns.variable('val576460752303373439')]
                        }), ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                            values: [ElixirScript.Core.Patterns.variable('map576460752303373439'), ElixirScript.Core.Patterns.variable('keys576460752303373439')]
                        })], __function_args__, (key5764607523033734390, val5764607523033734390, map5764607523033734390, keys5764607523033734390) => {
                            return true;
                        })) !== null) {
                            let [key5764607523033734390, val5764607523033734390, map5764607523033734390, keys5764607523033734390] = __arg_matches__;

                            return new ElixirScript.Core.Tuple(ElixirScript.Core.maps.update(key5764607523033734390, val5764607523033734390, map5764607523033734390), Elixir.List.__load(Elixir).__delete__(keys5764607523033734390, key5764607523033734390));
                        }

                        throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
                    }

                    return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
                }));

                const _ref7153496 = new ElixirScript.Core.Tuple(map5764607523033734390, keys5764607523033734390);

                return ElixirScript.Core.Patterns.defmatch(ElixirScript.Core.Patterns.clause([[]], () => {
                    return map5764607523033734390;
                }, () => {
                    return true;
                }), ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.variable('_')], () => {
                    return ElixirScript.Core.erlang.error(Elixir.ArgumentError.__load(Elixir).exception('the following keys must also be given when building ' + ('struct ' + (Elixir.String.Chars.__load(Elixir).to_string(Elixir.Kernel.__load(Elixir).inspect(Elixir.BadMapError.__load(Elixir))) + (': ' + Elixir.String.Chars.__load(Elixir).to_string(Elixir.Kernel.__load(Elixir).inspect(keys5764607523033734390)))))));
                }, () => {
                    return true;
                })).call(this, keys5764607523033734390);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    const __exports = {
        __struct__,
        __MODULE__: Symbol.for('Elixir.BadMapError'),
        __info__
    };

    Elixir.BadMapError.__exports = __exports

    return __exports;
}
ElixirScript.Core.Functions.build_namespace(Elixir, 'Elixir.BadBooleanError').__load = function(Elixir) {
    if (Elixir.BadBooleanError.__exports)
        return Elixir.BadBooleanError.__exports;

    function __info__(kind) {
        const __info__map__ = new Map([[Symbol.for('functions'), [new ElixirScript.Core.Tuple(Symbol.for('__struct__'), 0), new ElixirScript.Core.Tuple(Symbol.for('__struct__'), 1), new ElixirScript.Core.Tuple(Symbol.for('exception'), 1), new ElixirScript.Core.Tuple(Symbol.for('message'), 1)]], [Symbol.for('macros'), []], [Symbol.for('attributes'), [new ElixirScript.Core.Tuple(Symbol.for('vsn'), [40609809370793104429201634593511365380]), new ElixirScript.Core.Tuple(Symbol.for('behaviour'), [Elixir.Exception.__load(Elixir)])]], [Symbol.for('compile'), [new ElixirScript.Core.Tuple(Symbol.for('options'), []), new ElixirScript.Core.Tuple(Symbol.for('version'), [55, 46, 49, 46, 50]), new ElixirScript.Core.Tuple(Symbol.for('source'), '/private/tmp/elixir-20170929-51947-wgj4qu/elixir-1.5.2/lib/elixir/lib/exception.ex')]], [Symbol.for('md5'), new ElixirScript.Core.BitString(ElixirScript.Core.BitString.integer(30), ElixirScript.Core.BitString.integer(141), ElixirScript.Core.BitString.integer(42), ElixirScript.Core.BitString.integer(47), ElixirScript.Core.BitString.integer(178), ElixirScript.Core.BitString.integer(146), ElixirScript.Core.BitString.integer(82), ElixirScript.Core.BitString.integer(208), ElixirScript.Core.BitString.integer(236), ElixirScript.Core.BitString.integer(141), ElixirScript.Core.BitString.integer(135), ElixirScript.Core.BitString.integer(183), ElixirScript.Core.BitString.integer(109), ElixirScript.Core.BitString.integer(64), ElixirScript.Core.BitString.integer(219), ElixirScript.Core.BitString.integer(4))], [Symbol.for('module'), Symbol.for('Elixir.BadBooleanError')]]);

        const value = __info__map__.get(kind);

        if (value !== null) {
            return value;
        }

        throw new ElixirScript.Core.Patterns.MatchError(kind);
    }

    function __struct__(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return new Map([[Symbol.for('__exception__'), true], [Symbol.for('__struct__'), Elixir.BadBooleanError.__load(Elixir)], [Symbol.for('operator'), null], [Symbol.for('term'), null]]);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('kv576460752303381980')], __function_args__, (kv5764607523033819800) => {
                return true;
            })) !== null) {
                let [kv5764607523033819800] = __arg_matches__;

                const [map5764607523033819800, keys5764607523033819800] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                    values: [ElixirScript.Core.Patterns.variable('map576460752303381980'), ElixirScript.Core.Patterns.variable('keys576460752303381980')]
                }), Elixir.Enum.__load(Elixir).reduce(kv5764607523033819800, new ElixirScript.Core.Tuple(__struct__(), []), (...__function_args__) => {
                    function recur(...__function_args__) {
                        let __arg_matches__ = null;

                        if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                            values: [ElixirScript.Core.Patterns.variable('key576460752303381980'), ElixirScript.Core.Patterns.variable('val576460752303381980')]
                        }), ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                            values: [ElixirScript.Core.Patterns.variable('map576460752303381980'), ElixirScript.Core.Patterns.variable('keys576460752303381980')]
                        })], __function_args__, (key5764607523033819800, val5764607523033819800, map5764607523033819800, keys5764607523033819800) => {
                            return true;
                        })) !== null) {
                            let [key5764607523033819800, val5764607523033819800, map5764607523033819800, keys5764607523033819800] = __arg_matches__;

                            return new ElixirScript.Core.Tuple(ElixirScript.Core.maps.update(key5764607523033819800, val5764607523033819800, map5764607523033819800), Elixir.List.__load(Elixir).__delete__(keys5764607523033819800, key5764607523033819800));
                        }

                        throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
                    }

                    return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
                }));

                const _ref7809169 = new ElixirScript.Core.Tuple(map5764607523033819800, keys5764607523033819800);

                return ElixirScript.Core.Patterns.defmatch(ElixirScript.Core.Patterns.clause([[]], () => {
                    return map5764607523033819800;
                }, () => {
                    return true;
                }), ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.variable('_')], () => {
                    return ElixirScript.Core.erlang.error(Elixir.ArgumentError.__load(Elixir).exception('the following keys must also be given when building ' + ('struct ' + (Elixir.String.Chars.__load(Elixir).to_string(Elixir.Kernel.__load(Elixir).inspect(Elixir.BadBooleanError.__load(Elixir))) + (': ' + Elixir.String.Chars.__load(Elixir).to_string(Elixir.Kernel.__load(Elixir).inspect(keys5764607523033819800)))))));
                }, () => {
                    return true;
                })).call(this, keys5764607523033819800);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    const __exports = {
        __struct__,
        __MODULE__: Symbol.for('Elixir.BadBooleanError'),
        __info__
    };

    Elixir.BadBooleanError.__exports = __exports

    return __exports;
}
ElixirScript.Core.Functions.build_namespace(Elixir, 'Elixir.MatchError').__load = function(Elixir) {
    if (Elixir.MatchError.__exports)
        return Elixir.MatchError.__exports;

    function __info__(kind) {
        const __info__map__ = new Map([[Symbol.for('functions'), [new ElixirScript.Core.Tuple(Symbol.for('__struct__'), 0), new ElixirScript.Core.Tuple(Symbol.for('__struct__'), 1), new ElixirScript.Core.Tuple(Symbol.for('exception'), 1), new ElixirScript.Core.Tuple(Symbol.for('message'), 1)]], [Symbol.for('macros'), []], [Symbol.for('attributes'), [new ElixirScript.Core.Tuple(Symbol.for('vsn'), [286883817035895668109008182360640846091]), new ElixirScript.Core.Tuple(Symbol.for('behaviour'), [Elixir.Exception.__load(Elixir)])]], [Symbol.for('compile'), [new ElixirScript.Core.Tuple(Symbol.for('options'), []), new ElixirScript.Core.Tuple(Symbol.for('version'), [55, 46, 49, 46, 50]), new ElixirScript.Core.Tuple(Symbol.for('source'), '/private/tmp/elixir-20170929-51947-wgj4qu/elixir-1.5.2/lib/elixir/lib/exception.ex')]], [Symbol.for('md5'), new ElixirScript.Core.BitString(ElixirScript.Core.BitString.integer(215), ElixirScript.Core.BitString.integer(211), ElixirScript.Core.BitString.integer(208), ElixirScript.Core.BitString.integer(57), ElixirScript.Core.BitString.integer(154), ElixirScript.Core.BitString.integer(102), ElixirScript.Core.BitString.integer(229), ElixirScript.Core.BitString.integer(31), ElixirScript.Core.BitString.integer(65), ElixirScript.Core.BitString.integer(32), ElixirScript.Core.BitString.integer(71), ElixirScript.Core.BitString.integer(173), ElixirScript.Core.BitString.integer(81), ElixirScript.Core.BitString.integer(127), ElixirScript.Core.BitString.integer(249), ElixirScript.Core.BitString.integer(11))], [Symbol.for('module'), Symbol.for('Elixir.MatchError')]]);

        const value = __info__map__.get(kind);

        if (value !== null) {
            return value;
        }

        throw new ElixirScript.Core.Patterns.MatchError(kind);
    }

    function __struct__(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return new Map([[Symbol.for('__exception__'), true], [Symbol.for('__struct__'), Elixir.MatchError.__load(Elixir)], [Symbol.for('term'), null]]);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('kv576460752303371679')], __function_args__, (kv5764607523033716790) => {
                return true;
            })) !== null) {
                let [kv5764607523033716790] = __arg_matches__;

                const [map5764607523033716790, keys5764607523033716790] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                    values: [ElixirScript.Core.Patterns.variable('map576460752303371679'), ElixirScript.Core.Patterns.variable('keys576460752303371679')]
                }), Elixir.Enum.__load(Elixir).reduce(kv5764607523033716790, new ElixirScript.Core.Tuple(__struct__(), []), (...__function_args__) => {
                    function recur(...__function_args__) {
                        let __arg_matches__ = null;

                        if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                            values: [ElixirScript.Core.Patterns.variable('key576460752303371679'), ElixirScript.Core.Patterns.variable('val576460752303371679')]
                        }), ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                            values: [ElixirScript.Core.Patterns.variable('map576460752303371679'), ElixirScript.Core.Patterns.variable('keys576460752303371679')]
                        })], __function_args__, (key5764607523033716790, val5764607523033716790, map5764607523033716790, keys5764607523033716790) => {
                            return true;
                        })) !== null) {
                            let [key5764607523033716790, val5764607523033716790, map5764607523033716790, keys5764607523033716790] = __arg_matches__;

                            return new ElixirScript.Core.Tuple(ElixirScript.Core.maps.update(key5764607523033716790, val5764607523033716790, map5764607523033716790), Elixir.List.__load(Elixir).__delete__(keys5764607523033716790, key5764607523033716790));
                        }

                        throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
                    }

                    return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
                }));

                const _ref9557125 = new ElixirScript.Core.Tuple(map5764607523033716790, keys5764607523033716790);

                return ElixirScript.Core.Patterns.defmatch(ElixirScript.Core.Patterns.clause([[]], () => {
                    return map5764607523033716790;
                }, () => {
                    return true;
                }), ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.variable('_')], () => {
                    return ElixirScript.Core.erlang.error(Elixir.ArgumentError.__load(Elixir).exception('the following keys must also be given when building ' + ('struct ' + (Elixir.String.Chars.__load(Elixir).to_string(Elixir.Kernel.__load(Elixir).inspect(Elixir.MatchError.__load(Elixir))) + (': ' + Elixir.String.Chars.__load(Elixir).to_string(Elixir.Kernel.__load(Elixir).inspect(keys5764607523033716790)))))));
                }, () => {
                    return true;
                })).call(this, keys5764607523033716790);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    const __exports = {
        __struct__,
        __MODULE__: Symbol.for('Elixir.MatchError'),
        __info__
    };

    Elixir.MatchError.__exports = __exports

    return __exports;
}
ElixirScript.Core.Functions.build_namespace(Elixir, 'Elixir.CaseClauseError').__load = function(Elixir) {
    if (Elixir.CaseClauseError.__exports)
        return Elixir.CaseClauseError.__exports;

    function __info__(kind) {
        const __info__map__ = new Map([[Symbol.for('functions'), [new ElixirScript.Core.Tuple(Symbol.for('__struct__'), 0), new ElixirScript.Core.Tuple(Symbol.for('__struct__'), 1), new ElixirScript.Core.Tuple(Symbol.for('exception'), 1), new ElixirScript.Core.Tuple(Symbol.for('message'), 1)]], [Symbol.for('macros'), []], [Symbol.for('attributes'), [new ElixirScript.Core.Tuple(Symbol.for('vsn'), [272567339969660328885522087337096136260]), new ElixirScript.Core.Tuple(Symbol.for('behaviour'), [Elixir.Exception.__load(Elixir)])]], [Symbol.for('compile'), [new ElixirScript.Core.Tuple(Symbol.for('options'), []), new ElixirScript.Core.Tuple(Symbol.for('version'), [55, 46, 49, 46, 50]), new ElixirScript.Core.Tuple(Symbol.for('source'), '/private/tmp/elixir-20170929-51947-wgj4qu/elixir-1.5.2/lib/elixir/lib/exception.ex')]], [Symbol.for('md5'), new ElixirScript.Core.BitString(ElixirScript.Core.BitString.integer(205), ElixirScript.Core.BitString.integer(14), ElixirScript.Core.BitString.integer(143), ElixirScript.Core.BitString.integer(104), ElixirScript.Core.BitString.integer(172), ElixirScript.Core.BitString.integer(164), ElixirScript.Core.BitString.integer(249), ElixirScript.Core.BitString.integer(124), ElixirScript.Core.BitString.integer(10), ElixirScript.Core.BitString.integer(75), ElixirScript.Core.BitString.integer(128), ElixirScript.Core.BitString.integer(199), ElixirScript.Core.BitString.integer(163), ElixirScript.Core.BitString.integer(12), ElixirScript.Core.BitString.integer(70), ElixirScript.Core.BitString.integer(68))], [Symbol.for('module'), Symbol.for('Elixir.CaseClauseError')]]);

        const value = __info__map__.get(kind);

        if (value !== null) {
            return value;
        }

        throw new ElixirScript.Core.Patterns.MatchError(kind);
    }

    function __struct__(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return new Map([[Symbol.for('__exception__'), true], [Symbol.for('__struct__'), Elixir.CaseClauseError.__load(Elixir)], [Symbol.for('term'), null]]);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('kv576460752303375134')], __function_args__, (kv5764607523033751340) => {
                return true;
            })) !== null) {
                let [kv5764607523033751340] = __arg_matches__;

                const [map5764607523033751340, keys5764607523033751340] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                    values: [ElixirScript.Core.Patterns.variable('map576460752303375134'), ElixirScript.Core.Patterns.variable('keys576460752303375134')]
                }), Elixir.Enum.__load(Elixir).reduce(kv5764607523033751340, new ElixirScript.Core.Tuple(__struct__(), []), (...__function_args__) => {
                    function recur(...__function_args__) {
                        let __arg_matches__ = null;

                        if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                            values: [ElixirScript.Core.Patterns.variable('key576460752303375134'), ElixirScript.Core.Patterns.variable('val576460752303375134')]
                        }), ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                            values: [ElixirScript.Core.Patterns.variable('map576460752303375134'), ElixirScript.Core.Patterns.variable('keys576460752303375134')]
                        })], __function_args__, (key5764607523033751340, val5764607523033751340, map5764607523033751340, keys5764607523033751340) => {
                            return true;
                        })) !== null) {
                            let [key5764607523033751340, val5764607523033751340, map5764607523033751340, keys5764607523033751340] = __arg_matches__;

                            return new ElixirScript.Core.Tuple(ElixirScript.Core.maps.update(key5764607523033751340, val5764607523033751340, map5764607523033751340), Elixir.List.__load(Elixir).__delete__(keys5764607523033751340, key5764607523033751340));
                        }

                        throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
                    }

                    return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
                }));

                const _ref1804769 = new ElixirScript.Core.Tuple(map5764607523033751340, keys5764607523033751340);

                return ElixirScript.Core.Patterns.defmatch(ElixirScript.Core.Patterns.clause([[]], () => {
                    return map5764607523033751340;
                }, () => {
                    return true;
                }), ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.variable('_')], () => {
                    return ElixirScript.Core.erlang.error(Elixir.ArgumentError.__load(Elixir).exception('the following keys must also be given when building ' + ('struct ' + (Elixir.String.Chars.__load(Elixir).to_string(Elixir.Kernel.__load(Elixir).inspect(Elixir.CaseClauseError.__load(Elixir))) + (': ' + Elixir.String.Chars.__load(Elixir).to_string(Elixir.Kernel.__load(Elixir).inspect(keys5764607523033751340)))))));
                }, () => {
                    return true;
                })).call(this, keys5764607523033751340);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    const __exports = {
        __struct__,
        __MODULE__: Symbol.for('Elixir.CaseClauseError'),
        __info__
    };

    Elixir.CaseClauseError.__exports = __exports

    return __exports;
}
ElixirScript.Core.Functions.build_namespace(Elixir, 'Elixir.Inspect.List').__load = function(Elixir) {
    if (Elixir.Inspect.List.__exports)
        return Elixir.Inspect.List.__exports;

    function __info__(kind) {
        const __info__map__ = new Map([[Symbol.for('functions'), [new ElixirScript.Core.Tuple(Symbol.for('__impl__'), 1), new ElixirScript.Core.Tuple(Symbol.for('inspect'), 2), new ElixirScript.Core.Tuple(Symbol.for('keyword'), 2), new ElixirScript.Core.Tuple(Symbol.for('keyword?'), 1), new ElixirScript.Core.Tuple(Symbol.for('printable?'), 1), new ElixirScript.Core.Tuple(Symbol.for('printable?'), 2)]], [Symbol.for('macros'), []], [Symbol.for('attributes'), [new ElixirScript.Core.Tuple(Symbol.for('vsn'), [8489258786584177220541707407876230096]), new ElixirScript.Core.Tuple(Symbol.for('behaviour'), [Elixir.Inspect.__load(Elixir)]), new ElixirScript.Core.Tuple(Symbol.for('protocol_impl'), [new ElixirScript.Core.Tuple(Symbol.for('protocol'), Elixir.Inspect.__load(Elixir)), new ElixirScript.Core.Tuple(Symbol.for('for'), Elixir.List.__load(Elixir))])]], [Symbol.for('compile'), [new ElixirScript.Core.Tuple(Symbol.for('options'), []), new ElixirScript.Core.Tuple(Symbol.for('version'), [55, 46, 49, 46, 50]), new ElixirScript.Core.Tuple(Symbol.for('source'), '/private/tmp/elixir-20170929-51947-wgj4qu/elixir-1.5.2/lib/elixir/lib/inspect.ex')]], [Symbol.for('md5'), new ElixirScript.Core.BitString(ElixirScript.Core.BitString.integer(6), ElixirScript.Core.BitString.integer(98), ElixirScript.Core.BitString.integer(248), ElixirScript.Core.BitString.integer(197), ElixirScript.Core.BitString.integer(239), ElixirScript.Core.BitString.integer(199), ElixirScript.Core.BitString.integer(223), ElixirScript.Core.BitString.integer(69), ElixirScript.Core.BitString.integer(72), ElixirScript.Core.BitString.integer(139), ElixirScript.Core.BitString.integer(141), ElixirScript.Core.BitString.integer(253), ElixirScript.Core.BitString.integer(81), ElixirScript.Core.BitString.integer(57), ElixirScript.Core.BitString.integer(11), ElixirScript.Core.BitString.integer(208))], [Symbol.for('module'), Symbol.for('Elixir.Inspect.List')]]);

        const value = __info__map__.get(kind);

        if (value !== null) {
            return value;
        }

        throw new ElixirScript.Core.Patterns.MatchError(kind);
    }

    function __impl__(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('for')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.List.__load(Elixir);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('target')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.Inspect.List.__load(Elixir);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('protocol')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.Inspect.__load(Elixir);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function decrement(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('infinity')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Symbol.for('infinity');
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('counter')], __function_args__, (counter0) => {
                return true;
            })) !== null) {
                let [counter0] = __arg_matches__;

                return counter0 - 1;
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function inspect(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([[], ElixirScript.Core.Patterns.variable('opts')], __function_args__, (opts0) => {
                return true;
            })) !== null) {
                let [opts0] = __arg_matches__;

                return Elixir.Inspect.Algebra.__load(Elixir).color('[]', Symbol.for('list'), opts0);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('term'), ElixirScript.Core.Patterns.variable('opts')], __function_args__, (term0, opts0) => {
                return true;
            })) !== null) {
                let [term0, opts0] = __arg_matches__;

                const [lists0, lists_deprecated0, printable_limit0] = ElixirScript.Core.Patterns.match(new Map([[Symbol.for('__struct__'), {
                    __MODULE__: Symbol.for('Elixir.Inspect.Opts')
                }], [Symbol.for('charlists'), ElixirScript.Core.Patterns.variable('lists')], [Symbol.for('char_lists'), ElixirScript.Core.Patterns.variable('lists_deprecated')], [Symbol.for('printable_limit'), ElixirScript.Core.Patterns.variable('printable_limit')]]), opts0);

                const [lists1] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.variable('lists'), ElixirScript.Core.Patterns.defmatch(ElixirScript.Core.Patterns.clause([false], () => {
                    return lists0;
                }, () => {
                    return true;
                }), ElixirScript.Core.Patterns.clause([true], () => {
                    return ElixirScript.Core.Patterns.defmatch(ElixirScript.Core.Patterns.clause([Symbol.for('as_char_lists')], () => {
                        Elixir.IO.__load(Elixir).warn('the :char_lists inspect option and its :as_char_lists ' + ('value are deprecated, use the :charlists option and its ' + ':as_charlists value instead'))

                        return Symbol.for('as_charlists');
                    }, () => {
                        return true;
                    }), ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.variable('_')], () => {
                        Elixir.IO.__load(Elixir).warn('the :char_lists inspect option is deprecated, use :charlists instead')

                        return lists_deprecated0;
                    }, () => {
                        return true;
                    })).call(this, lists_deprecated0);
                }, () => {
                    return true;
                })).call(this, ElixirScript.Core.Patterns.defmatch(ElixirScript.Core.Patterns.clause([true], () => {
                    return lists_deprecated0 != Symbol.for('infer');
                }, () => {
                    return true;
                }), ElixirScript.Core.Patterns.clause([false], () => {
                    return false;
                }, () => {
                    return true;
                })).call(this, ElixirScript.Core.erlang.equals(lists0, Symbol.for('infer')))));

                const [open0] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.variable('open'), Elixir.Inspect.Algebra.__load(Elixir).color('[', Symbol.for('list'), opts0));

                const [sep0] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.variable('sep'), Elixir.Inspect.Algebra.__load(Elixir).color(',', Symbol.for('list'), opts0));

                const [close0] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.variable('close'), Elixir.Inspect.Algebra.__load(Elixir).color(']', Symbol.for('list'), opts0));

                return ElixirScript.Core.SpecialForms.cond([ElixirScript.Core.Patterns.defmatch(ElixirScript.Core.Patterns.clause([true], () => {
                    return true;
                }, () => {
                    return true;
                }), ElixirScript.Core.Patterns.clause([false], () => {
                    return ElixirScript.Core.Patterns.defmatch(ElixirScript.Core.Patterns.clause([true], () => {
                        return printable__qmark__(term0, printable_limit0);
                    }, () => {
                        return true;
                    }), ElixirScript.Core.Patterns.clause([false], () => {
                        return false;
                    }, () => {
                        return true;
                    })).call(this, ElixirScript.Core.erlang.equals(lists1, Symbol.for('infer')));
                }, () => {
                    return true;
                })).call(this, ElixirScript.Core.erlang.equals(lists1, Symbol.for('as_charlists'))), () => {
                    const [inspected0] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.variable('inspected'), ElixirScript.Core.Patterns.defmatch(ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                        values: [ElixirScript.Core.Patterns.variable('escaped'), '']
                    })], (escaped0) => {
                        return [39, escaped0, 39];
                    }, (escaped0) => {
                        return true;
                    }), ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                        values: [ElixirScript.Core.Patterns.variable('escaped'), ElixirScript.Core.Patterns.variable('_')]
                    })], (escaped0) => {
                        return [39, escaped0, 39, ' ++ ...'];
                    }, (escaped0) => {
                        return true;
                    })).call(this, Elixir.Inspect.BitString.__load(Elixir).escape(Elixir.IO.__load(Elixir).chardata_to_string(term0), 39, printable_limit0)));

                    return ElixirScript.Core.erlang.iolist_to_binary(inspected0);
                }], [keyword__qmark__(term0), () => {
                    return Elixir.Inspect.Algebra.__load(Elixir).surround_many(open0, term0, close0, opts0, keyword, sep0);
                }], [true, () => {
                    return Elixir.Inspect.Algebra.__load(Elixir).surround_many(open0, term0, close0, opts0, Elixir.Inspect.Algebra.__load(Elixir).to_doc, sep0);
                }]);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function key_to_binary(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('key')], __function_args__, (key0) => {
                return true;
            })) !== null) {
                let [key0] = __arg_matches__;

                return ElixirScript.Core.Patterns.defmatch(ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.bitStringMatch(ElixirScript.Core.BitString.binary(':'), ElixirScript.Core.BitString.binary({
                    'value': ElixirScript.Core.Patterns.variable()
                }))], (right0) => {
                    return right0;
                }, (right0) => {
                    return true;
                }), ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.variable('other')], (other0) => {
                    return other0;
                }, (other0) => {
                    return true;
                })).call(this, Elixir.Inspect.Atom.__load(Elixir).inspect(key0));
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function keyword(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                values: [ElixirScript.Core.Patterns.variable('key'), ElixirScript.Core.Patterns.variable('value')]
            }), ElixirScript.Core.Patterns.variable('opts')], __function_args__, (key0, value0, opts0) => {
                return true;
            })) !== null) {
                let [key0, value0, opts0] = __arg_matches__;

                const [key1] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.variable('key'), Elixir.Inspect.Algebra.__load(Elixir).color(key_to_binary(key0) + ': ', Symbol.for('atom'), opts0));

                return Elixir.Inspect.Algebra.__load(Elixir).concat(key1, Elixir.Inspect.Algebra.__load(Elixir).to_doc(value0, opts0));
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function keyword__qmark__(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.headTail(ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                values: [ElixirScript.Core.Patterns.variable('key'), ElixirScript.Core.Patterns.variable('_value')]
            }), ElixirScript.Core.Patterns.variable('rest'))], __function_args__, (key0, _value0, rest0) => {
                return ElixirScript.Core.erlang.is_atom(key0);
            })) !== null) {
                let [key0, _value0, rest0] = __arg_matches__;

                return ElixirScript.Core.Patterns.defmatch(ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.headTail([69, 108, 105, 120, 105, 114, 46], ElixirScript.Core.Patterns.variable('_'))], () => {
                    return false;
                }, () => {
                    return true;
                }), ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.variable('_')], () => {
                    return new ElixirScript.Core.Functions.Recurse(recur.bind(null, rest0));
                }, () => {
                    return true;
                })).call(this, ElixirScript.Core.erlang.atom_to_list(key0));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([[]], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return true;
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('_other')], __function_args__, (_other0) => {
                return true;
            })) !== null) {
                let [_other0] = __arg_matches__;

                return false;
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function printable__qmark__(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('list')], __function_args__, (list0) => {
                return true;
            })) !== null) {
                let [list0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, list0, Symbol.for('infinity')));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('_'), 0], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return true;
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.headTail(ElixirScript.Core.Patterns.variable('char'), ElixirScript.Core.Patterns.variable('rest')), ElixirScript.Core.Patterns.variable('counter')], __function_args__, (char0, rest0, counter0) => {
                return ElixirScript.Core.erlang.is_integer(char0) && (char0 >= 32 && char0 <= 126);
            })) !== null) {
                let [char0, rest0, counter0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, rest0, decrement(counter0)));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.headTail(10, ElixirScript.Core.Patterns.variable('rest')), ElixirScript.Core.Patterns.variable('counter')], __function_args__, (rest0, counter0) => {
                return true;
            })) !== null) {
                let [rest0, counter0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, rest0, decrement(counter0)));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.headTail(13, ElixirScript.Core.Patterns.variable('rest')), ElixirScript.Core.Patterns.variable('counter')], __function_args__, (rest0, counter0) => {
                return true;
            })) !== null) {
                let [rest0, counter0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, rest0, decrement(counter0)));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.headTail(9, ElixirScript.Core.Patterns.variable('rest')), ElixirScript.Core.Patterns.variable('counter')], __function_args__, (rest0, counter0) => {
                return true;
            })) !== null) {
                let [rest0, counter0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, rest0, decrement(counter0)));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.headTail(11, ElixirScript.Core.Patterns.variable('rest')), ElixirScript.Core.Patterns.variable('counter')], __function_args__, (rest0, counter0) => {
                return true;
            })) !== null) {
                let [rest0, counter0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, rest0, decrement(counter0)));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.headTail(8, ElixirScript.Core.Patterns.variable('rest')), ElixirScript.Core.Patterns.variable('counter')], __function_args__, (rest0, counter0) => {
                return true;
            })) !== null) {
                let [rest0, counter0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, rest0, decrement(counter0)));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.headTail(12, ElixirScript.Core.Patterns.variable('rest')), ElixirScript.Core.Patterns.variable('counter')], __function_args__, (rest0, counter0) => {
                return true;
            })) !== null) {
                let [rest0, counter0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, rest0, decrement(counter0)));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.headTail(27, ElixirScript.Core.Patterns.variable('rest')), ElixirScript.Core.Patterns.variable('counter')], __function_args__, (rest0, counter0) => {
                return true;
            })) !== null) {
                let [rest0, counter0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, rest0, decrement(counter0)));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.headTail(7, ElixirScript.Core.Patterns.variable('rest')), ElixirScript.Core.Patterns.variable('counter')], __function_args__, (rest0, counter0) => {
                return true;
            })) !== null) {
                let [rest0, counter0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, rest0, decrement(counter0)));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([[], ElixirScript.Core.Patterns.variable('_counter')], __function_args__, (_counter0) => {
                return true;
            })) !== null) {
                let [_counter0] = __arg_matches__;

                return true;
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('_'), ElixirScript.Core.Patterns.variable('_counter')], __function_args__, (_counter0) => {
                return true;
            })) !== null) {
                let [_counter0] = __arg_matches__;

                return false;
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    const __exports = {
        __impl__,
        inspect,
        keyword,
        keyword__qmark__,
        printable__qmark__,
        __MODULE__: Symbol.for('Elixir.Inspect.List'),
        __info__
    };

    Elixir.Inspect.List.__exports = __exports

    return __exports;
}
ElixirScript.Core.Functions.build_namespace(Elixir, 'Elixir.WithClauseError').__load = function(Elixir) {
    if (Elixir.WithClauseError.__exports)
        return Elixir.WithClauseError.__exports;

    function __info__(kind) {
        const __info__map__ = new Map([[Symbol.for('functions'), [new ElixirScript.Core.Tuple(Symbol.for('__struct__'), 0), new ElixirScript.Core.Tuple(Symbol.for('__struct__'), 1), new ElixirScript.Core.Tuple(Symbol.for('exception'), 1), new ElixirScript.Core.Tuple(Symbol.for('message'), 1)]], [Symbol.for('macros'), []], [Symbol.for('attributes'), [new ElixirScript.Core.Tuple(Symbol.for('vsn'), [69476408675438762329980259172863493869]), new ElixirScript.Core.Tuple(Symbol.for('behaviour'), [Elixir.Exception.__load(Elixir)])]], [Symbol.for('compile'), [new ElixirScript.Core.Tuple(Symbol.for('options'), []), new ElixirScript.Core.Tuple(Symbol.for('version'), [55, 46, 49, 46, 50]), new ElixirScript.Core.Tuple(Symbol.for('source'), '/private/tmp/elixir-20170929-51947-wgj4qu/elixir-1.5.2/lib/elixir/lib/exception.ex')]], [Symbol.for('md5'), new ElixirScript.Core.BitString(ElixirScript.Core.BitString.integer(52), ElixirScript.Core.BitString.integer(68), ElixirScript.Core.BitString.integer(171), ElixirScript.Core.BitString.integer(106), ElixirScript.Core.BitString.integer(58), ElixirScript.Core.BitString.integer(53), ElixirScript.Core.BitString.integer(235), ElixirScript.Core.BitString.integer(234), ElixirScript.Core.BitString.integer(25), ElixirScript.Core.BitString.integer(139), ElixirScript.Core.BitString.integer(178), ElixirScript.Core.BitString.integer(200), ElixirScript.Core.BitString.integer(32), ElixirScript.Core.BitString.integer(28), ElixirScript.Core.BitString.integer(198), ElixirScript.Core.BitString.integer(237))], [Symbol.for('module'), Symbol.for('Elixir.WithClauseError')]]);

        const value = __info__map__.get(kind);

        if (value !== null) {
            return value;
        }

        throw new ElixirScript.Core.Patterns.MatchError(kind);
    }

    function __struct__(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return new Map([[Symbol.for('__exception__'), true], [Symbol.for('__struct__'), Elixir.WithClauseError.__load(Elixir)], [Symbol.for('term'), null]]);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('kv576460752303374526')], __function_args__, (kv5764607523033745260) => {
                return true;
            })) !== null) {
                let [kv5764607523033745260] = __arg_matches__;

                const [map5764607523033745260, keys5764607523033745260] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                    values: [ElixirScript.Core.Patterns.variable('map576460752303374526'), ElixirScript.Core.Patterns.variable('keys576460752303374526')]
                }), Elixir.Enum.__load(Elixir).reduce(kv5764607523033745260, new ElixirScript.Core.Tuple(__struct__(), []), (...__function_args__) => {
                    function recur(...__function_args__) {
                        let __arg_matches__ = null;

                        if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                            values: [ElixirScript.Core.Patterns.variable('key576460752303374526'), ElixirScript.Core.Patterns.variable('val576460752303374526')]
                        }), ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                            values: [ElixirScript.Core.Patterns.variable('map576460752303374526'), ElixirScript.Core.Patterns.variable('keys576460752303374526')]
                        })], __function_args__, (key5764607523033745260, val5764607523033745260, map5764607523033745260, keys5764607523033745260) => {
                            return true;
                        })) !== null) {
                            let [key5764607523033745260, val5764607523033745260, map5764607523033745260, keys5764607523033745260] = __arg_matches__;

                            return new ElixirScript.Core.Tuple(ElixirScript.Core.maps.update(key5764607523033745260, val5764607523033745260, map5764607523033745260), Elixir.List.__load(Elixir).__delete__(keys5764607523033745260, key5764607523033745260));
                        }

                        throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
                    }

                    return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
                }));

                const _ref2503982 = new ElixirScript.Core.Tuple(map5764607523033745260, keys5764607523033745260);

                return ElixirScript.Core.Patterns.defmatch(ElixirScript.Core.Patterns.clause([[]], () => {
                    return map5764607523033745260;
                }, () => {
                    return true;
                }), ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.variable('_')], () => {
                    return ElixirScript.Core.erlang.error(Elixir.ArgumentError.__load(Elixir).exception('the following keys must also be given when building ' + ('struct ' + (Elixir.String.Chars.__load(Elixir).to_string(Elixir.Kernel.__load(Elixir).inspect(Elixir.WithClauseError.__load(Elixir))) + (': ' + Elixir.String.Chars.__load(Elixir).to_string(Elixir.Kernel.__load(Elixir).inspect(keys5764607523033745260)))))));
                }, () => {
                    return true;
                })).call(this, keys5764607523033745260);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    const __exports = {
        __struct__,
        __MODULE__: Symbol.for('Elixir.WithClauseError'),
        __info__
    };

    Elixir.WithClauseError.__exports = __exports

    return __exports;
}
ElixirScript.Core.Functions.build_namespace(Elixir, 'Elixir.TryClauseError').__load = function(Elixir) {
    if (Elixir.TryClauseError.__exports)
        return Elixir.TryClauseError.__exports;

    function __info__(kind) {
        const __info__map__ = new Map([[Symbol.for('functions'), [new ElixirScript.Core.Tuple(Symbol.for('__struct__'), 0), new ElixirScript.Core.Tuple(Symbol.for('__struct__'), 1), new ElixirScript.Core.Tuple(Symbol.for('exception'), 1), new ElixirScript.Core.Tuple(Symbol.for('message'), 1)]], [Symbol.for('macros'), []], [Symbol.for('attributes'), [new ElixirScript.Core.Tuple(Symbol.for('vsn'), [123936469717700664237100010268442715545]), new ElixirScript.Core.Tuple(Symbol.for('behaviour'), [Elixir.Exception.__load(Elixir)])]], [Symbol.for('compile'), [new ElixirScript.Core.Tuple(Symbol.for('options'), []), new ElixirScript.Core.Tuple(Symbol.for('version'), [55, 46, 49, 46, 50]), new ElixirScript.Core.Tuple(Symbol.for('source'), '/private/tmp/elixir-20170929-51947-wgj4qu/elixir-1.5.2/lib/elixir/lib/exception.ex')]], [Symbol.for('md5'), new ElixirScript.Core.BitString(ElixirScript.Core.BitString.integer(93), ElixirScript.Core.BitString.integer(61), ElixirScript.Core.BitString.integer(75), ElixirScript.Core.BitString.integer(187), ElixirScript.Core.BitString.integer(15), ElixirScript.Core.BitString.integer(251), ElixirScript.Core.BitString.integer(102), ElixirScript.Core.BitString.integer(125), ElixirScript.Core.BitString.integer(190), ElixirScript.Core.BitString.integer(120), ElixirScript.Core.BitString.integer(216), ElixirScript.Core.BitString.integer(27), ElixirScript.Core.BitString.integer(214), ElixirScript.Core.BitString.integer(255), ElixirScript.Core.BitString.integer(101), ElixirScript.Core.BitString.integer(153))], [Symbol.for('module'), Symbol.for('Elixir.TryClauseError')]]);

        const value = __info__map__.get(kind);

        if (value !== null) {
            return value;
        }

        throw new ElixirScript.Core.Patterns.MatchError(kind);
    }

    function __struct__(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return new Map([[Symbol.for('__exception__'), true], [Symbol.for('__struct__'), Elixir.TryClauseError.__load(Elixir)], [Symbol.for('term'), null]]);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('kv576460752303377180')], __function_args__, (kv5764607523033771800) => {
                return true;
            })) !== null) {
                let [kv5764607523033771800] = __arg_matches__;

                const [map5764607523033771800, keys5764607523033771800] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                    values: [ElixirScript.Core.Patterns.variable('map576460752303377180'), ElixirScript.Core.Patterns.variable('keys576460752303377180')]
                }), Elixir.Enum.__load(Elixir).reduce(kv5764607523033771800, new ElixirScript.Core.Tuple(__struct__(), []), (...__function_args__) => {
                    function recur(...__function_args__) {
                        let __arg_matches__ = null;

                        if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                            values: [ElixirScript.Core.Patterns.variable('key576460752303377180'), ElixirScript.Core.Patterns.variable('val576460752303377180')]
                        }), ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                            values: [ElixirScript.Core.Patterns.variable('map576460752303377180'), ElixirScript.Core.Patterns.variable('keys576460752303377180')]
                        })], __function_args__, (key5764607523033771800, val5764607523033771800, map5764607523033771800, keys5764607523033771800) => {
                            return true;
                        })) !== null) {
                            let [key5764607523033771800, val5764607523033771800, map5764607523033771800, keys5764607523033771800] = __arg_matches__;

                            return new ElixirScript.Core.Tuple(ElixirScript.Core.maps.update(key5764607523033771800, val5764607523033771800, map5764607523033771800), Elixir.List.__load(Elixir).__delete__(keys5764607523033771800, key5764607523033771800));
                        }

                        throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
                    }

                    return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
                }));

                const _ref8323161 = new ElixirScript.Core.Tuple(map5764607523033771800, keys5764607523033771800);

                return ElixirScript.Core.Patterns.defmatch(ElixirScript.Core.Patterns.clause([[]], () => {
                    return map5764607523033771800;
                }, () => {
                    return true;
                }), ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.variable('_')], () => {
                    return ElixirScript.Core.erlang.error(Elixir.ArgumentError.__load(Elixir).exception('the following keys must also be given when building ' + ('struct ' + (Elixir.String.Chars.__load(Elixir).to_string(Elixir.Kernel.__load(Elixir).inspect(Elixir.TryClauseError.__load(Elixir))) + (': ' + Elixir.String.Chars.__load(Elixir).to_string(Elixir.Kernel.__load(Elixir).inspect(keys5764607523033771800)))))));
                }, () => {
                    return true;
                })).call(this, keys5764607523033771800);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    const __exports = {
        __struct__,
        __MODULE__: Symbol.for('Elixir.TryClauseError'),
        __info__
    };

    Elixir.TryClauseError.__exports = __exports

    return __exports;
}
ElixirScript.Core.Functions.build_namespace(Elixir, 'Elixir.UndefinedFunctionError').__load = function(Elixir) {
    if (Elixir.UndefinedFunctionError.__exports)
        return Elixir.UndefinedFunctionError.__exports;

    function __info__(kind) {
        const __info__map__ = new Map([[Symbol.for('functions'), [new ElixirScript.Core.Tuple(Symbol.for('__struct__'), 0), new ElixirScript.Core.Tuple(Symbol.for('__struct__'), 1), new ElixirScript.Core.Tuple(Symbol.for('exception'), 1), new ElixirScript.Core.Tuple(Symbol.for('function_not_exported'), 4), new ElixirScript.Core.Tuple(Symbol.for('message'), 1)]], [Symbol.for('macros'), []], [Symbol.for('attributes'), [new ElixirScript.Core.Tuple(Symbol.for('vsn'), [269300456488347202930651375143609354214]), new ElixirScript.Core.Tuple(Symbol.for('behaviour'), [Elixir.Exception.__load(Elixir)])]], [Symbol.for('compile'), [new ElixirScript.Core.Tuple(Symbol.for('options'), []), new ElixirScript.Core.Tuple(Symbol.for('version'), [55, 46, 49, 46, 50]), new ElixirScript.Core.Tuple(Symbol.for('source'), '/private/tmp/elixir-20170929-51947-wgj4qu/elixir-1.5.2/lib/elixir/lib/exception.ex')]], [Symbol.for('md5'), new ElixirScript.Core.BitString(ElixirScript.Core.BitString.integer(202), ElixirScript.Core.BitString.integer(153), ElixirScript.Core.BitString.integer(97), ElixirScript.Core.BitString.integer(158), ElixirScript.Core.BitString.integer(27), ElixirScript.Core.BitString.integer(249), ElixirScript.Core.BitString.integer(3), ElixirScript.Core.BitString.integer(246), ElixirScript.Core.BitString.integer(164), ElixirScript.Core.BitString.integer(157), ElixirScript.Core.BitString.integer(212), ElixirScript.Core.BitString.integer(3), ElixirScript.Core.BitString.integer(48), ElixirScript.Core.BitString.integer(226), ElixirScript.Core.BitString.integer(199), ElixirScript.Core.BitString.integer(230))], [Symbol.for('module'), Symbol.for('Elixir.UndefinedFunctionError')]]);

        const value = __info__map__.get(kind);

        if (value !== null) {
            return value;
        }

        throw new ElixirScript.Core.Patterns.MatchError(kind);
    }

    function __struct__(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return new Map([[Symbol.for('__exception__'), true], [Symbol.for('__struct__'), Elixir.UndefinedFunctionError.__load(Elixir)], [Symbol.for('arity'), null], [Symbol.for('exports'), null], [Symbol.for('function'), null], [Symbol.for('module'), null], [Symbol.for('reason'), null]]);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('kv576460752303375164')], __function_args__, (kv5764607523033751640) => {
                return true;
            })) !== null) {
                let [kv5764607523033751640] = __arg_matches__;

                const [map5764607523033751640, keys5764607523033751640] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                    values: [ElixirScript.Core.Patterns.variable('map576460752303375164'), ElixirScript.Core.Patterns.variable('keys576460752303375164')]
                }), Elixir.Enum.__load(Elixir).reduce(kv5764607523033751640, new ElixirScript.Core.Tuple(__struct__(), []), (...__function_args__) => {
                    function recur(...__function_args__) {
                        let __arg_matches__ = null;

                        if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                            values: [ElixirScript.Core.Patterns.variable('key576460752303375164'), ElixirScript.Core.Patterns.variable('val576460752303375164')]
                        }), ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                            values: [ElixirScript.Core.Patterns.variable('map576460752303375164'), ElixirScript.Core.Patterns.variable('keys576460752303375164')]
                        })], __function_args__, (key5764607523033751640, val5764607523033751640, map5764607523033751640, keys5764607523033751640) => {
                            return true;
                        })) !== null) {
                            let [key5764607523033751640, val5764607523033751640, map5764607523033751640, keys5764607523033751640] = __arg_matches__;

                            return new ElixirScript.Core.Tuple(ElixirScript.Core.maps.update(key5764607523033751640, val5764607523033751640, map5764607523033751640), Elixir.List.__load(Elixir).__delete__(keys5764607523033751640, key5764607523033751640));
                        }

                        throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
                    }

                    return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
                }));

                const _ref9578990 = new ElixirScript.Core.Tuple(map5764607523033751640, keys5764607523033751640);

                return ElixirScript.Core.Patterns.defmatch(ElixirScript.Core.Patterns.clause([[]], () => {
                    return map5764607523033751640;
                }, () => {
                    return true;
                }), ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.variable('_')], () => {
                    return ElixirScript.Core.erlang.error(Elixir.ArgumentError.__load(Elixir).exception('the following keys must also be given when building ' + ('struct ' + (Elixir.String.Chars.__load(Elixir).to_string(Elixir.Kernel.__load(Elixir).inspect(Elixir.UndefinedFunctionError.__load(Elixir))) + (': ' + Elixir.String.Chars.__load(Elixir).to_string(Elixir.Kernel.__load(Elixir).inspect(keys5764607523033751640)))))));
                }, () => {
                    return true;
                })).call(this, keys5764607523033751640);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    const __exports = {
        __struct__,
        __MODULE__: Symbol.for('Elixir.UndefinedFunctionError'),
        __info__
    };

    Elixir.UndefinedFunctionError.__exports = __exports

    return __exports;
}
ElixirScript.Core.Functions.build_namespace(Elixir, 'Elixir.Test').__load = function(Elixir) {
    if (Elixir.Test.__exports)
        return Elixir.Test.__exports;

    function __info__(kind) {
        const __info__map__ = new Map([[Symbol.for('functions'), [new ElixirScript.Core.Tuple(Symbol.for('fill'), 3), new ElixirScript.Core.Tuple(Symbol.for('listSet'), 2), new ElixirScript.Core.Tuple(Symbol.for('mapSet'), 2), new ElixirScript.Core.Tuple(Symbol.for('setSet'), 2), new ElixirScript.Core.Tuple(Symbol.for('start'), 2), new ElixirScript.Core.Tuple(Symbol.for('tupleSet'), 2)]], [Symbol.for('macros'), []], [Symbol.for('attributes'), [new ElixirScript.Core.Tuple(Symbol.for('vsn'), [154850350715294917228809799789746574399])]], [Symbol.for('compile'), [new ElixirScript.Core.Tuple(Symbol.for('options'), []), new ElixirScript.Core.Tuple(Symbol.for('version'), [55, 46, 49, 46, 51]), new ElixirScript.Core.Tuple(Symbol.for('source'), '/Users/attendify/git/js-memory-usage/src/elixir/lib/elixir.ex')]], [Symbol.for('md5'), new ElixirScript.Core.BitString(ElixirScript.Core.BitString.integer(116), ElixirScript.Core.BitString.integer(127), ElixirScript.Core.BitString.integer(23), ElixirScript.Core.BitString.integer(189), ElixirScript.Core.BitString.integer(108), ElixirScript.Core.BitString.integer(200), ElixirScript.Core.BitString.integer(209), ElixirScript.Core.BitString.integer(25), ElixirScript.Core.BitString.integer(254), ElixirScript.Core.BitString.integer(251), ElixirScript.Core.BitString.integer(234), ElixirScript.Core.BitString.integer(128), ElixirScript.Core.BitString.integer(45), ElixirScript.Core.BitString.integer(55), ElixirScript.Core.BitString.integer(212), ElixirScript.Core.BitString.integer(63))], [Symbol.for('module'), Symbol.for('Elixir.Test')]]);

        const value = __info__map__.get(kind);

        if (value !== null) {
            return value;
        }

        throw new ElixirScript.Core.Patterns.MatchError(kind);
    }

    function fill(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('cnt'), ElixirScript.Core.Patterns.variable('obj'), ElixirScript.Core.Patterns.variable('f')], __function_args__, (cnt0, obj0, f0) => {
                return true;
            })) !== null) {
                let [cnt0, obj0, f0] = __arg_matches__;

                return Elixir.Enum.__load(Elixir).reduce(Elixir.Range.__load(Elixir).__new__(1, cnt0), obj0, f0);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function listSet(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('i'), ElixirScript.Core.Patterns.variable('l')], __function_args__, (i0, l0) => {
                return true;
            })) !== null) {
                let [i0, l0] = __arg_matches__;

                return ElixirScript.Core.erlang.list_concatenation([i0], l0);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function mapSet(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('i'), ElixirScript.Core.Patterns.variable('m')], __function_args__, (i0, m0) => {
                return true;
            })) !== null) {
                let [i0, m0] = __arg_matches__;

                return ElixirScript.Core.maps.put('key-' + ElixirScript.Core.erlang.integer_to_binary(i0), i0, m0);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function setSet(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('i'), ElixirScript.Core.Patterns.variable('s')], __function_args__, (i0, s0) => {
                return true;
            })) !== null) {
                let [i0, s0] = __arg_matches__;

                return Elixir.MapSet.__load(Elixir).put(s0, i0);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function start(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('_'), ElixirScript.Core.Patterns.variable('_')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                Node.record('empty list', 1000, (...__function_args__) => {
                    function recur(...__function_args__) {
                        let __arg_matches__ = null;

                        if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([], __function_args__, () => {
                            return true;
                        })) !== null) {
                            let [] = __arg_matches__;

                            return [];
                        }

                        throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
                    }

                    return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
                })

                Node.record('empty tuple', 1000, (...__function_args__) => {
                    function recur(...__function_args__) {
                        let __arg_matches__ = null;

                        if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([], __function_args__, () => {
                            return true;
                        })) !== null) {
                            let [] = __arg_matches__;

                            return new ElixirScript.Core.Tuple();
                        }

                        throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
                    }

                    return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
                })

                Node.record('empty map', 1000, (...__function_args__) => {
                    function recur(...__function_args__) {
                        let __arg_matches__ = null;

                        if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([], __function_args__, () => {
                            return true;
                        })) !== null) {
                            let [] = __arg_matches__;

                            return new Map([]);
                        }

                        throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
                    }

                    return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
                })

                Node.record('empty set', 1000, (...__function_args__) => {
                    function recur(...__function_args__) {
                        let __arg_matches__ = null;

                        if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([], __function_args__, () => {
                            return true;
                        })) !== null) {
                            let [] = __arg_matches__;

                            return ElixirScript.Core.Functions.call_property(Elixir.MapSet.__load(Elixir).__new__);
                        }

                        throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
                    }

                    return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
                })

                Node.record('10 items list', 1000, (...__function_args__) => {
                    function recur(...__function_args__) {
                        let __arg_matches__ = null;

                        if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([], __function_args__, () => {
                            return true;
                        })) !== null) {
                            let [] = __arg_matches__;

                            return Elixir.Test.__load(Elixir).fill(10, [], Elixir.Test.__load(Elixir).listSet);
                        }

                        throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
                    }

                    return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
                })

                Node.record('10 items tuple', 1000, (...__function_args__) => {
                    function recur(...__function_args__) {
                        let __arg_matches__ = null;

                        if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([], __function_args__, () => {
                            return true;
                        })) !== null) {
                            let [] = __arg_matches__;

                            return Elixir.Test.__load(Elixir).fill(10, new ElixirScript.Core.Tuple(), Elixir.Test.__load(Elixir).tupleSet);
                        }

                        throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
                    }

                    return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
                })

                Node.record('10 items map', 1000, (...__function_args__) => {
                    function recur(...__function_args__) {
                        let __arg_matches__ = null;

                        if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([], __function_args__, () => {
                            return true;
                        })) !== null) {
                            let [] = __arg_matches__;

                            return Elixir.Test.__load(Elixir).fill(10, new Map([]), Elixir.Test.__load(Elixir).mapSet);
                        }

                        throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
                    }

                    return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
                })

                Node.record('10 items set', 1000, (...__function_args__) => {
                    function recur(...__function_args__) {
                        let __arg_matches__ = null;

                        if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([], __function_args__, () => {
                            return true;
                        })) !== null) {
                            let [] = __arg_matches__;

                            return Elixir.Test.__load(Elixir).fill(10, ElixirScript.Core.Functions.call_property(Elixir.MapSet.__load(Elixir).__new__), Elixir.Test.__load(Elixir).setSet);
                        }

                        throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
                    }

                    return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
                })

                Node.record('100 items list', 1000, (...__function_args__) => {
                    function recur(...__function_args__) {
                        let __arg_matches__ = null;

                        if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([], __function_args__, () => {
                            return true;
                        })) !== null) {
                            let [] = __arg_matches__;

                            return Elixir.Test.__load(Elixir).fill(100, [], Elixir.Test.__load(Elixir).listSet);
                        }

                        throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
                    }

                    return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
                })

                Node.record('100 items tuple', 1000, (...__function_args__) => {
                    function recur(...__function_args__) {
                        let __arg_matches__ = null;

                        if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([], __function_args__, () => {
                            return true;
                        })) !== null) {
                            let [] = __arg_matches__;

                            return Elixir.Test.__load(Elixir).fill(100, new ElixirScript.Core.Tuple(), Elixir.Test.__load(Elixir).tupleSet);
                        }

                        throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
                    }

                    return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
                })

                Node.record('100 items map', 1000, (...__function_args__) => {
                    function recur(...__function_args__) {
                        let __arg_matches__ = null;

                        if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([], __function_args__, () => {
                            return true;
                        })) !== null) {
                            let [] = __arg_matches__;

                            return Elixir.Test.__load(Elixir).fill(100, new Map([]), Elixir.Test.__load(Elixir).mapSet);
                        }

                        throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
                    }

                    return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
                })

                Node.record('100 items set', 1000, (...__function_args__) => {
                    function recur(...__function_args__) {
                        let __arg_matches__ = null;

                        if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([], __function_args__, () => {
                            return true;
                        })) !== null) {
                            let [] = __arg_matches__;

                            return Elixir.Test.__load(Elixir).fill(100, ElixirScript.Core.Functions.call_property(Elixir.MapSet.__load(Elixir).__new__), Elixir.Test.__load(Elixir).setSet);
                        }

                        throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
                    }

                    return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
                })

                Node.record('1000 items list', 1000, (...__function_args__) => {
                    function recur(...__function_args__) {
                        let __arg_matches__ = null;

                        if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([], __function_args__, () => {
                            return true;
                        })) !== null) {
                            let [] = __arg_matches__;

                            return Elixir.Test.__load(Elixir).fill(1000, [], Elixir.Test.__load(Elixir).listSet);
                        }

                        throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
                    }

                    return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
                })

                Node.record('1000 items tuple', 1000, (...__function_args__) => {
                    function recur(...__function_args__) {
                        let __arg_matches__ = null;

                        if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([], __function_args__, () => {
                            return true;
                        })) !== null) {
                            let [] = __arg_matches__;

                            return Elixir.Test.__load(Elixir).fill(1000, new ElixirScript.Core.Tuple(), Elixir.Test.__load(Elixir).tupleSet);
                        }

                        throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
                    }

                    return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
                })

                Node.record('1000 items map', 1000, (...__function_args__) => {
                    function recur(...__function_args__) {
                        let __arg_matches__ = null;

                        if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([], __function_args__, () => {
                            return true;
                        })) !== null) {
                            let [] = __arg_matches__;

                            return Elixir.Test.__load(Elixir).fill(1000, new Map([]), Elixir.Test.__load(Elixir).mapSet);
                        }

                        throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
                    }

                    return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
                })

                Node.record('1000 items set', 1000, (...__function_args__) => {
                    function recur(...__function_args__) {
                        let __arg_matches__ = null;

                        if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([], __function_args__, () => {
                            return true;
                        })) !== null) {
                            let [] = __arg_matches__;

                            return Elixir.Test.__load(Elixir).fill(1000, ElixirScript.Core.Functions.call_property(Elixir.MapSet.__load(Elixir).__new__), Elixir.Test.__load(Elixir).setSet);
                        }

                        throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
                    }

                    return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
                })

                return ElixirScript.Core.Functions.call_property(Node.printResult);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function tupleSet(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('i'), ElixirScript.Core.Patterns.variable('t')], __function_args__, (i0, t0) => {
                return true;
            })) !== null) {
                let [i0, t0] = __arg_matches__;

                return ElixirScript.Core.erlang.append_element(t0, i0);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    const __exports = {
        fill,
        listSet,
        mapSet,
        setSet,
        start,
        tupleSet,
        __MODULE__: Symbol.for('Elixir.Test'),
        __info__
    };

    Elixir.Test.__exports = __exports

    return __exports;
}
ElixirScript.Core.Functions.build_namespace(Elixir, 'Elixir.FunctionClauseError').__load = function(Elixir) {
    if (Elixir.FunctionClauseError.__exports)
        return Elixir.FunctionClauseError.__exports;

    function __info__(kind) {
        const __info__map__ = new Map([[Symbol.for('functions'), [new ElixirScript.Core.Tuple(Symbol.for('__struct__'), 0), new ElixirScript.Core.Tuple(Symbol.for('__struct__'), 1), new ElixirScript.Core.Tuple(Symbol.for('blame'), 3), new ElixirScript.Core.Tuple(Symbol.for('exception'), 1), new ElixirScript.Core.Tuple(Symbol.for('message'), 1)]], [Symbol.for('macros'), []], [Symbol.for('attributes'), [new ElixirScript.Core.Tuple(Symbol.for('vsn'), [11707322694186173941361066936831062410]), new ElixirScript.Core.Tuple(Symbol.for('behaviour'), [Elixir.Exception.__load(Elixir)])]], [Symbol.for('compile'), [new ElixirScript.Core.Tuple(Symbol.for('options'), []), new ElixirScript.Core.Tuple(Symbol.for('version'), [55, 46, 49, 46, 50]), new ElixirScript.Core.Tuple(Symbol.for('source'), '/private/tmp/elixir-20170929-51947-wgj4qu/elixir-1.5.2/lib/elixir/lib/exception.ex')]], [Symbol.for('md5'), new ElixirScript.Core.BitString(ElixirScript.Core.BitString.integer(8), ElixirScript.Core.BitString.integer(206), ElixirScript.Core.BitString.integer(191), ElixirScript.Core.BitString.integer(146), ElixirScript.Core.BitString.integer(218), ElixirScript.Core.BitString.integer(28), ElixirScript.Core.BitString.integer(225), ElixirScript.Core.BitString.integer(179), ElixirScript.Core.BitString.integer(230), ElixirScript.Core.BitString.integer(26), ElixirScript.Core.BitString.integer(210), ElixirScript.Core.BitString.integer(67), ElixirScript.Core.BitString.integer(116), ElixirScript.Core.BitString.integer(168), ElixirScript.Core.BitString.integer(49), ElixirScript.Core.BitString.integer(138))], [Symbol.for('module'), Symbol.for('Elixir.FunctionClauseError')]]);

        const value = __info__map__.get(kind);

        if (value !== null) {
            return value;
        }

        throw new ElixirScript.Core.Patterns.MatchError(kind);
    }

    function __struct__(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return new Map([[Symbol.for('__exception__'), true], [Symbol.for('__struct__'), Elixir.FunctionClauseError.__load(Elixir)], [Symbol.for('args'), null], [Symbol.for('arity'), null], [Symbol.for('clauses'), null], [Symbol.for('function'), null], [Symbol.for('kind'), null], [Symbol.for('module'), null]]);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('kv576460752303372412')], __function_args__, (kv5764607523033724120) => {
                return true;
            })) !== null) {
                let [kv5764607523033724120] = __arg_matches__;

                const [map5764607523033724120, keys5764607523033724120] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                    values: [ElixirScript.Core.Patterns.variable('map576460752303372412'), ElixirScript.Core.Patterns.variable('keys576460752303372412')]
                }), Elixir.Enum.__load(Elixir).reduce(kv5764607523033724120, new ElixirScript.Core.Tuple(__struct__(), []), (...__function_args__) => {
                    function recur(...__function_args__) {
                        let __arg_matches__ = null;

                        if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                            values: [ElixirScript.Core.Patterns.variable('key576460752303372412'), ElixirScript.Core.Patterns.variable('val576460752303372412')]
                        }), ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                            values: [ElixirScript.Core.Patterns.variable('map576460752303372412'), ElixirScript.Core.Patterns.variable('keys576460752303372412')]
                        })], __function_args__, (key5764607523033724120, val5764607523033724120, map5764607523033724120, keys5764607523033724120) => {
                            return true;
                        })) !== null) {
                            let [key5764607523033724120, val5764607523033724120, map5764607523033724120, keys5764607523033724120] = __arg_matches__;

                            return new ElixirScript.Core.Tuple(ElixirScript.Core.maps.update(key5764607523033724120, val5764607523033724120, map5764607523033724120), Elixir.List.__load(Elixir).__delete__(keys5764607523033724120, key5764607523033724120));
                        }

                        throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
                    }

                    return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
                }));

                const _ref930388 = new ElixirScript.Core.Tuple(map5764607523033724120, keys5764607523033724120);

                return ElixirScript.Core.Patterns.defmatch(ElixirScript.Core.Patterns.clause([[]], () => {
                    return map5764607523033724120;
                }, () => {
                    return true;
                }), ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.variable('_')], () => {
                    return ElixirScript.Core.erlang.error(Elixir.ArgumentError.__load(Elixir).exception('the following keys must also be given when building ' + ('struct ' + (Elixir.String.Chars.__load(Elixir).to_string(Elixir.Kernel.__load(Elixir).inspect(Elixir.FunctionClauseError.__load(Elixir))) + (': ' + Elixir.String.Chars.__load(Elixir).to_string(Elixir.Kernel.__load(Elixir).inspect(keys5764607523033724120)))))));
                }, () => {
                    return true;
                })).call(this, keys5764607523033724120);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    const __exports = {
        __struct__,
        __MODULE__: Symbol.for('Elixir.FunctionClauseError'),
        __info__
    };

    Elixir.FunctionClauseError.__exports = __exports

    return __exports;
}
ElixirScript.Core.Functions.build_namespace(Elixir, 'Elixir.ArgumentError').__load = function(Elixir) {
    if (Elixir.ArgumentError.__exports)
        return Elixir.ArgumentError.__exports;

    function __info__(kind) {
        const __info__map__ = new Map([[Symbol.for('functions'), [new ElixirScript.Core.Tuple(Symbol.for('__struct__'), 0), new ElixirScript.Core.Tuple(Symbol.for('__struct__'), 1), new ElixirScript.Core.Tuple(Symbol.for('exception'), 1), new ElixirScript.Core.Tuple(Symbol.for('message'), 1)]], [Symbol.for('macros'), []], [Symbol.for('attributes'), [new ElixirScript.Core.Tuple(Symbol.for('vsn'), [298805599062542156609052976582181581971]), new ElixirScript.Core.Tuple(Symbol.for('behaviour'), [Elixir.Exception.__load(Elixir)])]], [Symbol.for('compile'), [new ElixirScript.Core.Tuple(Symbol.for('options'), []), new ElixirScript.Core.Tuple(Symbol.for('version'), [55, 46, 49, 46, 50]), new ElixirScript.Core.Tuple(Symbol.for('source'), '/private/tmp/elixir-20170929-51947-wgj4qu/elixir-1.5.2/lib/elixir/lib/exception.ex')]], [Symbol.for('md5'), new ElixirScript.Core.BitString(ElixirScript.Core.BitString.integer(224), ElixirScript.Core.BitString.integer(203), ElixirScript.Core.BitString.integer(221), ElixirScript.Core.BitString.integer(117), ElixirScript.Core.BitString.integer(201), ElixirScript.Core.BitString.integer(12), ElixirScript.Core.BitString.integer(3), ElixirScript.Core.BitString.integer(88), ElixirScript.Core.BitString.integer(105), ElixirScript.Core.BitString.integer(44), ElixirScript.Core.BitString.integer(199), ElixirScript.Core.BitString.integer(233), ElixirScript.Core.BitString.integer(102), ElixirScript.Core.BitString.integer(188), ElixirScript.Core.BitString.integer(244), ElixirScript.Core.BitString.integer(147))], [Symbol.for('module'), Symbol.for('Elixir.ArgumentError')]]);

        const value = __info__map__.get(kind);

        if (value !== null) {
            return value;
        }

        throw new ElixirScript.Core.Patterns.MatchError(kind);
    }

    function __struct__(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return new Map([[Symbol.for('__exception__'), true], [Symbol.for('__struct__'), Elixir.ArgumentError.__load(Elixir)], [Symbol.for('message'), 'argument error']]);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('kv576460752303387644')], __function_args__, (kv5764607523033876440) => {
                return true;
            })) !== null) {
                let [kv5764607523033876440] = __arg_matches__;

                const [map5764607523033876440, keys5764607523033876440] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                    values: [ElixirScript.Core.Patterns.variable('map576460752303387644'), ElixirScript.Core.Patterns.variable('keys576460752303387644')]
                }), Elixir.Enum.__load(Elixir).reduce(kv5764607523033876440, new ElixirScript.Core.Tuple(__struct__(), []), (...__function_args__) => {
                    function recur(...__function_args__) {
                        let __arg_matches__ = null;

                        if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                            values: [ElixirScript.Core.Patterns.variable('key576460752303387644'), ElixirScript.Core.Patterns.variable('val576460752303387644')]
                        }), ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                            values: [ElixirScript.Core.Patterns.variable('map576460752303387644'), ElixirScript.Core.Patterns.variable('keys576460752303387644')]
                        })], __function_args__, (key5764607523033876440, val5764607523033876440, map5764607523033876440, keys5764607523033876440) => {
                            return true;
                        })) !== null) {
                            let [key5764607523033876440, val5764607523033876440, map5764607523033876440, keys5764607523033876440] = __arg_matches__;

                            return new ElixirScript.Core.Tuple(ElixirScript.Core.maps.update(key5764607523033876440, val5764607523033876440, map5764607523033876440), Elixir.List.__load(Elixir).__delete__(keys5764607523033876440, key5764607523033876440));
                        }

                        throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
                    }

                    return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
                }));

                const _ref4571401 = new ElixirScript.Core.Tuple(map5764607523033876440, keys5764607523033876440);

                return ElixirScript.Core.Patterns.defmatch(ElixirScript.Core.Patterns.clause([[]], () => {
                    return map5764607523033876440;
                }, () => {
                    return true;
                }), ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.variable('_')], () => {
                    return ElixirScript.Core.erlang.error(Elixir.ArgumentError.__load(Elixir).exception('the following keys must also be given when building ' + ('struct ' + (Elixir.String.Chars.__load(Elixir).to_string(Elixir.Kernel.__load(Elixir).inspect(Elixir.ArgumentError.__load(Elixir))) + (': ' + Elixir.String.Chars.__load(Elixir).to_string(Elixir.Kernel.__load(Elixir).inspect(keys5764607523033876440)))))));
                }, () => {
                    return true;
                })).call(this, keys5764607523033876440);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function exception(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('msg576460752303387708')], __function_args__, (msg5764607523033877080) => {
                return ElixirScript.Core.erlang.is_binary(msg5764607523033877080);
            })) !== null) {
                let [msg5764607523033877080] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, [new ElixirScript.Core.Tuple(Symbol.for('message'), msg5764607523033877080)]));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('args576460752303387708')], __function_args__, (args5764607523033877080) => {
                return ElixirScript.Core.erlang.is_list(args5764607523033877080);
            })) !== null) {
                let [args5764607523033877080] = __arg_matches__;

                const [struct5764607523033877080] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.variable('struct576460752303387708'), __struct__());

                const [valid5764607523033877080, invalid5764607523033877080] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                    values: [ElixirScript.Core.Patterns.variable('valid576460752303387708'), ElixirScript.Core.Patterns.variable('invalid576460752303387708')]
                }), Elixir.Enum.__load(Elixir).split_with(args5764607523033877080, (...__function_args__) => {
                    function recur(...__function_args__) {
                        let __arg_matches__ = null;

                        if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                            values: [ElixirScript.Core.Patterns.variable('k576460752303387708'), ElixirScript.Core.Patterns.variable('_')]
                        })], __function_args__, (k5764607523033877080) => {
                            return true;
                        })) !== null) {
                            let [k5764607523033877080] = __arg_matches__;

                            return ElixirScript.Core.maps.is_key(k5764607523033877080, struct5764607523033877080);
                        }

                        throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
                    }

                    return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
                }));

                const _ref4362728 = new ElixirScript.Core.Tuple(valid5764607523033877080, invalid5764607523033877080);

                ElixirScript.Core.Patterns.defmatch(ElixirScript.Core.Patterns.clause([[]], () => {
                    return Symbol.for('ok');
                }, () => {
                    return true;
                }), ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.variable('_')], () => {
                    return Elixir.IO.__load(Elixir).warn('the following fields are unknown when raising ' + (Elixir.String.Chars.__load(Elixir).to_string(Elixir.Kernel.__load(Elixir).inspect(Elixir.ArgumentError.__load(Elixir))) + (': ' + (Elixir.String.Chars.__load(Elixir).to_string(Elixir.Kernel.__load(Elixir).inspect(invalid5764607523033877080)) + '. ')) + ('Please make sure to only give known fields when raising ' + ('or redefine ' + (Elixir.String.Chars.__load(Elixir).to_string(Elixir.Kernel.__load(Elixir).inspect(Elixir.ArgumentError.__load(Elixir))) + '.exception/1 to ') + ('discard unknown fields. Future Elixir versions will raise on ' + 'unknown fields given to raise/2')))));
                }, () => {
                    return true;
                })).call(this, invalid5764607523033877080)

                return Elixir.Kernel.__load(Elixir).struct__emark__(struct5764607523033877080, valid5764607523033877080);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    const __exports = {
        __struct__,
        exception,
        __MODULE__: Symbol.for('Elixir.ArgumentError'),
        __info__
    };

    Elixir.ArgumentError.__exports = __exports

    return __exports;
}
ElixirScript.Core.Functions.build_namespace(Elixir, 'Elixir.GenEvent.Stream').__load = function(Elixir) {
    if (Elixir.GenEvent.Stream.__exports)
        return Elixir.GenEvent.Stream.__exports;

    function __info__(kind) {
        const __info__map__ = new Map([[Symbol.for('functions'), [new ElixirScript.Core.Tuple(Symbol.for('__struct__'), 0), new ElixirScript.Core.Tuple(Symbol.for('__struct__'), 1), new ElixirScript.Core.Tuple(Symbol.for('code_change'), 3), new ElixirScript.Core.Tuple(Symbol.for('handle_call'), 2), new ElixirScript.Core.Tuple(Symbol.for('handle_event'), 2), new ElixirScript.Core.Tuple(Symbol.for('handle_info'), 2), new ElixirScript.Core.Tuple(Symbol.for('init'), 1), new ElixirScript.Core.Tuple(Symbol.for('terminate'), 2)]], [Symbol.for('macros'), []], [Symbol.for('attributes'), [new ElixirScript.Core.Tuple(Symbol.for('vsn'), [299451319854083008433537647836123543660])]], [Symbol.for('compile'), [new ElixirScript.Core.Tuple(Symbol.for('options'), []), new ElixirScript.Core.Tuple(Symbol.for('version'), [55, 46, 49, 46, 50]), new ElixirScript.Core.Tuple(Symbol.for('source'), '/private/tmp/elixir-20170929-51947-wgj4qu/elixir-1.5.2/lib/elixir/lib/gen_event/stream.ex')]], [Symbol.for('md5'), new ElixirScript.Core.BitString(ElixirScript.Core.BitString.integer(225), ElixirScript.Core.BitString.integer(72), ElixirScript.Core.BitString.integer(57), ElixirScript.Core.BitString.integer(243), ElixirScript.Core.BitString.integer(254), ElixirScript.Core.BitString.integer(217), ElixirScript.Core.BitString.integer(0), ElixirScript.Core.BitString.integer(50), ElixirScript.Core.BitString.integer(134), ElixirScript.Core.BitString.integer(27), ElixirScript.Core.BitString.integer(109), ElixirScript.Core.BitString.integer(85), ElixirScript.Core.BitString.integer(182), ElixirScript.Core.BitString.integer(138), ElixirScript.Core.BitString.integer(184), ElixirScript.Core.BitString.integer(108))], [Symbol.for('module'), Symbol.for('Elixir.GenEvent.Stream')]]);

        const value = __info__map__.get(kind);

        if (value !== null) {
            return value;
        }

        throw new ElixirScript.Core.Patterns.MatchError(kind);
    }

    function __struct__(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return new Map([[Symbol.for('__struct__'), Elixir.GenEvent.Stream.__load(Elixir)], [Symbol.for('manager'), null], [Symbol.for('timeout'), Symbol.for('infinity')]]);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('kv576460752303385023')], __function_args__, (kv5764607523033850230) => {
                return true;
            })) !== null) {
                let [kv5764607523033850230] = __arg_matches__;

                const [map5764607523033850230, keys5764607523033850230] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                    values: [ElixirScript.Core.Patterns.variable('map576460752303385023'), ElixirScript.Core.Patterns.variable('keys576460752303385023')]
                }), Elixir.Enum.__load(Elixir).reduce(kv5764607523033850230, new ElixirScript.Core.Tuple(__struct__(), []), (...__function_args__) => {
                    function recur(...__function_args__) {
                        let __arg_matches__ = null;

                        if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                            values: [ElixirScript.Core.Patterns.variable('key576460752303385023'), ElixirScript.Core.Patterns.variable('val576460752303385023')]
                        }), ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                            values: [ElixirScript.Core.Patterns.variable('map576460752303385023'), ElixirScript.Core.Patterns.variable('keys576460752303385023')]
                        })], __function_args__, (key5764607523033850230, val5764607523033850230, map5764607523033850230, keys5764607523033850230) => {
                            return true;
                        })) !== null) {
                            let [key5764607523033850230, val5764607523033850230, map5764607523033850230, keys5764607523033850230] = __arg_matches__;

                            return new ElixirScript.Core.Tuple(ElixirScript.Core.maps.update(key5764607523033850230, val5764607523033850230, map5764607523033850230), Elixir.List.__load(Elixir).__delete__(keys5764607523033850230, key5764607523033850230));
                        }

                        throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
                    }

                    return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
                }));

                const _ref8408757 = new ElixirScript.Core.Tuple(map5764607523033850230, keys5764607523033850230);

                return ElixirScript.Core.Patterns.defmatch(ElixirScript.Core.Patterns.clause([[]], () => {
                    return map5764607523033850230;
                }, () => {
                    return true;
                }), ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.variable('_')], () => {
                    return ElixirScript.Core.erlang.error(Elixir.ArgumentError.__load(Elixir).exception('the following keys must also be given when building ' + ('struct ' + (Elixir.String.Chars.__load(Elixir).to_string(Elixir.Kernel.__load(Elixir).inspect(Elixir.GenEvent.Stream.__load(Elixir))) + (': ' + Elixir.String.Chars.__load(Elixir).to_string(Elixir.Kernel.__load(Elixir).inspect(keys5764607523033850230)))))));
                }, () => {
                    return true;
                })).call(this, keys5764607523033850230);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    const __exports = {
        __struct__,
        __MODULE__: Symbol.for('Elixir.GenEvent.Stream'),
        __info__
    };

    Elixir.GenEvent.Stream.__exports = __exports

    return __exports;
}
ElixirScript.Core.Functions.build_namespace(Elixir, 'Elixir.Enum.OutOfBoundsError').__load = function(Elixir) {
    if (Elixir.Enum.OutOfBoundsError.__exports)
        return Elixir.Enum.OutOfBoundsError.__exports;

    function __info__(kind) {
        const __info__map__ = new Map([[Symbol.for('functions'), [new ElixirScript.Core.Tuple(Symbol.for('__struct__'), 0), new ElixirScript.Core.Tuple(Symbol.for('__struct__'), 1), new ElixirScript.Core.Tuple(Symbol.for('exception'), 1), new ElixirScript.Core.Tuple(Symbol.for('message'), 1)]], [Symbol.for('macros'), []], [Symbol.for('attributes'), [new ElixirScript.Core.Tuple(Symbol.for('vsn'), [132675983344399741835529263695020384672]), new ElixirScript.Core.Tuple(Symbol.for('behaviour'), [Elixir.Exception.__load(Elixir)])]], [Symbol.for('compile'), [new ElixirScript.Core.Tuple(Symbol.for('options'), []), new ElixirScript.Core.Tuple(Symbol.for('version'), [55, 46, 49, 46, 50]), new ElixirScript.Core.Tuple(Symbol.for('source'), '/private/tmp/elixir-20170929-51947-wgj4qu/elixir-1.5.2/lib/elixir/lib/exception.ex')]], [Symbol.for('md5'), new ElixirScript.Core.BitString(ElixirScript.Core.BitString.integer(99), ElixirScript.Core.BitString.integer(208), ElixirScript.Core.BitString.integer(119), ElixirScript.Core.BitString.integer(5), ElixirScript.Core.BitString.integer(39), ElixirScript.Core.BitString.integer(135), ElixirScript.Core.BitString.integer(224), ElixirScript.Core.BitString.integer(52), ElixirScript.Core.BitString.integer(183), ElixirScript.Core.BitString.integer(92), ElixirScript.Core.BitString.integer(146), ElixirScript.Core.BitString.integer(142), ElixirScript.Core.BitString.integer(149), ElixirScript.Core.BitString.integer(127), ElixirScript.Core.BitString.integer(97), ElixirScript.Core.BitString.integer(160))], [Symbol.for('module'), Symbol.for('Elixir.Enum.OutOfBoundsError')]]);

        const value = __info__map__.get(kind);

        if (value !== null) {
            return value;
        }

        throw new ElixirScript.Core.Patterns.MatchError(kind);
    }

    function __struct__(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return new Map([[Symbol.for('__exception__'), true], [Symbol.for('__struct__'), Elixir.Enum.OutOfBoundsError.__load(Elixir)], [Symbol.for('message'), 'out of bounds error']]);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('kv576460752303364541')], __function_args__, (kv5764607523033645410) => {
                return true;
            })) !== null) {
                let [kv5764607523033645410] = __arg_matches__;

                const [map5764607523033645410, keys5764607523033645410] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                    values: [ElixirScript.Core.Patterns.variable('map576460752303364541'), ElixirScript.Core.Patterns.variable('keys576460752303364541')]
                }), Elixir.Enum.__load(Elixir).reduce(kv5764607523033645410, new ElixirScript.Core.Tuple(__struct__(), []), (...__function_args__) => {
                    function recur(...__function_args__) {
                        let __arg_matches__ = null;

                        if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                            values: [ElixirScript.Core.Patterns.variable('key576460752303364541'), ElixirScript.Core.Patterns.variable('val576460752303364541')]
                        }), ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                            values: [ElixirScript.Core.Patterns.variable('map576460752303364541'), ElixirScript.Core.Patterns.variable('keys576460752303364541')]
                        })], __function_args__, (key5764607523033645410, val5764607523033645410, map5764607523033645410, keys5764607523033645410) => {
                            return true;
                        })) !== null) {
                            let [key5764607523033645410, val5764607523033645410, map5764607523033645410, keys5764607523033645410] = __arg_matches__;

                            return new ElixirScript.Core.Tuple(ElixirScript.Core.maps.update(key5764607523033645410, val5764607523033645410, map5764607523033645410), Elixir.List.__load(Elixir).__delete__(keys5764607523033645410, key5764607523033645410));
                        }

                        throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
                    }

                    return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
                }));

                const _ref7807504 = new ElixirScript.Core.Tuple(map5764607523033645410, keys5764607523033645410);

                return ElixirScript.Core.Patterns.defmatch(ElixirScript.Core.Patterns.clause([[]], () => {
                    return map5764607523033645410;
                }, () => {
                    return true;
                }), ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.variable('_')], () => {
                    return ElixirScript.Core.erlang.error(Elixir.ArgumentError.__load(Elixir).exception('the following keys must also be given when building ' + ('struct ' + (Elixir.String.Chars.__load(Elixir).to_string(Elixir.Kernel.__load(Elixir).inspect(Elixir.Enum.OutOfBoundsError.__load(Elixir))) + (': ' + Elixir.String.Chars.__load(Elixir).to_string(Elixir.Kernel.__load(Elixir).inspect(keys5764607523033645410)))))));
                }, () => {
                    return true;
                })).call(this, keys5764607523033645410);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    const __exports = {
        __struct__,
        __MODULE__: Symbol.for('Elixir.Enum.OutOfBoundsError'),
        __info__
    };

    Elixir.Enum.OutOfBoundsError.__exports = __exports

    return __exports;
}
ElixirScript.Core.Functions.build_namespace(Elixir, 'Elixir.Enum.EmptyError').__load = function(Elixir) {
    if (Elixir.Enum.EmptyError.__exports)
        return Elixir.Enum.EmptyError.__exports;

    function __info__(kind) {
        const __info__map__ = new Map([[Symbol.for('functions'), [new ElixirScript.Core.Tuple(Symbol.for('__struct__'), 0), new ElixirScript.Core.Tuple(Symbol.for('__struct__'), 1), new ElixirScript.Core.Tuple(Symbol.for('exception'), 1), new ElixirScript.Core.Tuple(Symbol.for('message'), 1)]], [Symbol.for('macros'), []], [Symbol.for('attributes'), [new ElixirScript.Core.Tuple(Symbol.for('vsn'), [231446653947717882226296750714339140876]), new ElixirScript.Core.Tuple(Symbol.for('behaviour'), [Elixir.Exception.__load(Elixir)])]], [Symbol.for('compile'), [new ElixirScript.Core.Tuple(Symbol.for('options'), []), new ElixirScript.Core.Tuple(Symbol.for('version'), [55, 46, 49, 46, 50]), new ElixirScript.Core.Tuple(Symbol.for('source'), '/private/tmp/elixir-20170929-51947-wgj4qu/elixir-1.5.2/lib/elixir/lib/exception.ex')]], [Symbol.for('md5'), new ElixirScript.Core.BitString(ElixirScript.Core.BitString.integer(174), ElixirScript.Core.BitString.integer(31), ElixirScript.Core.BitString.integer(1), ElixirScript.Core.BitString.integer(15), ElixirScript.Core.BitString.integer(24), ElixirScript.Core.BitString.integer(221), ElixirScript.Core.BitString.integer(230), ElixirScript.Core.BitString.integer(18), ElixirScript.Core.BitString.integer(10), ElixirScript.Core.BitString.integer(50), ElixirScript.Core.BitString.integer(155), ElixirScript.Core.BitString.integer(194), ElixirScript.Core.BitString.integer(1), ElixirScript.Core.BitString.integer(143), ElixirScript.Core.BitString.integer(37), ElixirScript.Core.BitString.integer(12))], [Symbol.for('module'), Symbol.for('Elixir.Enum.EmptyError')]]);

        const value = __info__map__.get(kind);

        if (value !== null) {
            return value;
        }

        throw new ElixirScript.Core.Patterns.MatchError(kind);
    }

    function __struct__(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return new Map([[Symbol.for('__exception__'), true], [Symbol.for('__struct__'), Elixir.Enum.EmptyError.__load(Elixir)], [Symbol.for('message'), 'empty error']]);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('kv576460752303363837')], __function_args__, (kv5764607523033638370) => {
                return true;
            })) !== null) {
                let [kv5764607523033638370] = __arg_matches__;

                const [map5764607523033638370, keys5764607523033638370] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                    values: [ElixirScript.Core.Patterns.variable('map576460752303363837'), ElixirScript.Core.Patterns.variable('keys576460752303363837')]
                }), Elixir.Enum.__load(Elixir).reduce(kv5764607523033638370, new ElixirScript.Core.Tuple(__struct__(), []), (...__function_args__) => {
                    function recur(...__function_args__) {
                        let __arg_matches__ = null;

                        if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                            values: [ElixirScript.Core.Patterns.variable('key576460752303363837'), ElixirScript.Core.Patterns.variable('val576460752303363837')]
                        }), ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                            values: [ElixirScript.Core.Patterns.variable('map576460752303363837'), ElixirScript.Core.Patterns.variable('keys576460752303363837')]
                        })], __function_args__, (key5764607523033638370, val5764607523033638370, map5764607523033638370, keys5764607523033638370) => {
                            return true;
                        })) !== null) {
                            let [key5764607523033638370, val5764607523033638370, map5764607523033638370, keys5764607523033638370] = __arg_matches__;

                            return new ElixirScript.Core.Tuple(ElixirScript.Core.maps.update(key5764607523033638370, val5764607523033638370, map5764607523033638370), Elixir.List.__load(Elixir).__delete__(keys5764607523033638370, key5764607523033638370));
                        }

                        throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
                    }

                    return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
                }));

                const _ref4600315 = new ElixirScript.Core.Tuple(map5764607523033638370, keys5764607523033638370);

                return ElixirScript.Core.Patterns.defmatch(ElixirScript.Core.Patterns.clause([[]], () => {
                    return map5764607523033638370;
                }, () => {
                    return true;
                }), ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.variable('_')], () => {
                    return ElixirScript.Core.erlang.error(Elixir.ArgumentError.__load(Elixir).exception('the following keys must also be given when building ' + ('struct ' + (Elixir.String.Chars.__load(Elixir).to_string(Elixir.Kernel.__load(Elixir).inspect(Elixir.Enum.EmptyError.__load(Elixir))) + (': ' + Elixir.String.Chars.__load(Elixir).to_string(Elixir.Kernel.__load(Elixir).inspect(keys5764607523033638370)))))));
                }, () => {
                    return true;
                })).call(this, keys5764607523033638370);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    const __exports = {
        __struct__,
        __MODULE__: Symbol.for('Elixir.Enum.EmptyError'),
        __info__
    };

    Elixir.Enum.EmptyError.__exports = __exports

    return __exports;
}
ElixirScript.Core.Functions.build_namespace(Elixir, 'Elixir.Inspect.Error').__load = function(Elixir) {
    if (Elixir.Inspect.Error.__exports)
        return Elixir.Inspect.Error.__exports;

    function __info__(kind) {
        const __info__map__ = new Map([[Symbol.for('functions'), [new ElixirScript.Core.Tuple(Symbol.for('__struct__'), 0), new ElixirScript.Core.Tuple(Symbol.for('__struct__'), 1), new ElixirScript.Core.Tuple(Symbol.for('exception'), 1), new ElixirScript.Core.Tuple(Symbol.for('message'), 1)]], [Symbol.for('macros'), []], [Symbol.for('attributes'), [new ElixirScript.Core.Tuple(Symbol.for('vsn'), [55169843312173522017981876016311194310]), new ElixirScript.Core.Tuple(Symbol.for('behaviour'), [Elixir.Exception.__load(Elixir)])]], [Symbol.for('compile'), [new ElixirScript.Core.Tuple(Symbol.for('options'), []), new ElixirScript.Core.Tuple(Symbol.for('version'), [55, 46, 49, 46, 50]), new ElixirScript.Core.Tuple(Symbol.for('source'), '/private/tmp/elixir-20170929-51947-wgj4qu/elixir-1.5.2/lib/elixir/lib/inspect/algebra.ex')]], [Symbol.for('md5'), new ElixirScript.Core.BitString(ElixirScript.Core.BitString.integer(41), ElixirScript.Core.BitString.integer(129), ElixirScript.Core.BitString.integer(83), ElixirScript.Core.BitString.integer(72), ElixirScript.Core.BitString.integer(148), ElixirScript.Core.BitString.integer(10), ElixirScript.Core.BitString.integer(64), ElixirScript.Core.BitString.integer(76), ElixirScript.Core.BitString.integer(55), ElixirScript.Core.BitString.integer(149), ElixirScript.Core.BitString.integer(73), ElixirScript.Core.BitString.integer(170), ElixirScript.Core.BitString.integer(58), ElixirScript.Core.BitString.integer(152), ElixirScript.Core.BitString.integer(82), ElixirScript.Core.BitString.integer(198))], [Symbol.for('module'), Symbol.for('Elixir.Inspect.Error')]]);

        const value = __info__map__.get(kind);

        if (value !== null) {
            return value;
        }

        throw new ElixirScript.Core.Patterns.MatchError(kind);
    }

    function __struct__(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return new Map([[Symbol.for('__exception__'), true], [Symbol.for('__struct__'), Elixir.Inspect.Error.__load(Elixir)], [Symbol.for('message'), null]]);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('kv576460752303325919')], __function_args__, (kv5764607523033259190) => {
                return true;
            })) !== null) {
                let [kv5764607523033259190] = __arg_matches__;

                const [map5764607523033259190, keys5764607523033259190] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                    values: [ElixirScript.Core.Patterns.variable('map576460752303325919'), ElixirScript.Core.Patterns.variable('keys576460752303325919')]
                }), Elixir.Enum.__load(Elixir).reduce(kv5764607523033259190, new ElixirScript.Core.Tuple(__struct__(), []), (...__function_args__) => {
                    function recur(...__function_args__) {
                        let __arg_matches__ = null;

                        if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                            values: [ElixirScript.Core.Patterns.variable('key576460752303325919'), ElixirScript.Core.Patterns.variable('val576460752303325919')]
                        }), ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                            values: [ElixirScript.Core.Patterns.variable('map576460752303325919'), ElixirScript.Core.Patterns.variable('keys576460752303325919')]
                        })], __function_args__, (key5764607523033259190, val5764607523033259190, map5764607523033259190, keys5764607523033259190) => {
                            return true;
                        })) !== null) {
                            let [key5764607523033259190, val5764607523033259190, map5764607523033259190, keys5764607523033259190] = __arg_matches__;

                            return new ElixirScript.Core.Tuple(ElixirScript.Core.maps.update(key5764607523033259190, val5764607523033259190, map5764607523033259190), Elixir.List.__load(Elixir).__delete__(keys5764607523033259190, key5764607523033259190));
                        }

                        throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
                    }

                    return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
                }));

                const _ref8249195 = new ElixirScript.Core.Tuple(map5764607523033259190, keys5764607523033259190);

                return ElixirScript.Core.Patterns.defmatch(ElixirScript.Core.Patterns.clause([[]], () => {
                    return map5764607523033259190;
                }, () => {
                    return true;
                }), ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.variable('_')], () => {
                    return ElixirScript.Core.erlang.error(Elixir.ArgumentError.__load(Elixir).exception('the following keys must also be given when building ' + ('struct ' + (Elixir.String.Chars.__load(Elixir).to_string(Elixir.Kernel.__load(Elixir).inspect(Elixir.Inspect.Error.__load(Elixir))) + (': ' + Elixir.String.Chars.__load(Elixir).to_string(Elixir.Kernel.__load(Elixir).inspect(keys5764607523033259190)))))));
                }, () => {
                    return true;
                })).call(this, keys5764607523033259190);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function exception(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('msg576460752303325983')], __function_args__, (msg5764607523033259830) => {
                return ElixirScript.Core.erlang.is_binary(msg5764607523033259830);
            })) !== null) {
                let [msg5764607523033259830] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, [new ElixirScript.Core.Tuple(Symbol.for('message'), msg5764607523033259830)]));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('args576460752303325983')], __function_args__, (args5764607523033259830) => {
                return ElixirScript.Core.erlang.is_list(args5764607523033259830);
            })) !== null) {
                let [args5764607523033259830] = __arg_matches__;

                const [struct5764607523033259830] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.variable('struct576460752303325983'), __struct__());

                const [valid5764607523033259830, invalid5764607523033259830] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                    values: [ElixirScript.Core.Patterns.variable('valid576460752303325983'), ElixirScript.Core.Patterns.variable('invalid576460752303325983')]
                }), Elixir.Enum.__load(Elixir).split_with(args5764607523033259830, (...__function_args__) => {
                    function recur(...__function_args__) {
                        let __arg_matches__ = null;

                        if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                            values: [ElixirScript.Core.Patterns.variable('k576460752303325983'), ElixirScript.Core.Patterns.variable('_')]
                        })], __function_args__, (k5764607523033259830) => {
                            return true;
                        })) !== null) {
                            let [k5764607523033259830] = __arg_matches__;

                            return ElixirScript.Core.maps.is_key(k5764607523033259830, struct5764607523033259830);
                        }

                        throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
                    }

                    return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
                }));

                const _ref5905323 = new ElixirScript.Core.Tuple(valid5764607523033259830, invalid5764607523033259830);

                ElixirScript.Core.Patterns.defmatch(ElixirScript.Core.Patterns.clause([[]], () => {
                    return Symbol.for('ok');
                }, () => {
                    return true;
                }), ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.variable('_')], () => {
                    return Elixir.IO.__load(Elixir).warn('the following fields are unknown when raising ' + (Elixir.String.Chars.__load(Elixir).to_string(Elixir.Kernel.__load(Elixir).inspect(Elixir.Inspect.Error.__load(Elixir))) + (': ' + (Elixir.String.Chars.__load(Elixir).to_string(Elixir.Kernel.__load(Elixir).inspect(invalid5764607523033259830)) + '. ')) + ('Please make sure to only give known fields when raising ' + ('or redefine ' + (Elixir.String.Chars.__load(Elixir).to_string(Elixir.Kernel.__load(Elixir).inspect(Elixir.Inspect.Error.__load(Elixir))) + '.exception/1 to ') + ('discard unknown fields. Future Elixir versions will raise on ' + 'unknown fields given to raise/2')))));
                }, () => {
                    return true;
                })).call(this, invalid5764607523033259830)

                return Elixir.Kernel.__load(Elixir).struct__emark__(struct5764607523033259830, valid5764607523033259830);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    const __exports = {
        __struct__,
        exception,
        __MODULE__: Symbol.for('Elixir.Inspect.Error'),
        __info__
    };

    Elixir.Inspect.Error.__exports = __exports

    return __exports;
}
ElixirScript.Core.Functions.build_namespace(Elixir, 'Elixir.RuntimeError').__load = function(Elixir) {
    if (Elixir.RuntimeError.__exports)
        return Elixir.RuntimeError.__exports;

    function __info__(kind) {
        const __info__map__ = new Map([[Symbol.for('functions'), [new ElixirScript.Core.Tuple(Symbol.for('__struct__'), 0), new ElixirScript.Core.Tuple(Symbol.for('__struct__'), 1), new ElixirScript.Core.Tuple(Symbol.for('exception'), 1), new ElixirScript.Core.Tuple(Symbol.for('message'), 1)]], [Symbol.for('macros'), []], [Symbol.for('attributes'), [new ElixirScript.Core.Tuple(Symbol.for('vsn'), [97986579180296641052608184610963608830]), new ElixirScript.Core.Tuple(Symbol.for('behaviour'), [Elixir.Exception.__load(Elixir)])]], [Symbol.for('compile'), [new ElixirScript.Core.Tuple(Symbol.for('options'), []), new ElixirScript.Core.Tuple(Symbol.for('version'), [55, 46, 49, 46, 50]), new ElixirScript.Core.Tuple(Symbol.for('source'), '/private/tmp/elixir-20170929-51947-wgj4qu/elixir-1.5.2/lib/elixir/lib/exception.ex')]], [Symbol.for('md5'), new ElixirScript.Core.BitString(ElixirScript.Core.BitString.integer(73), ElixirScript.Core.BitString.integer(183), ElixirScript.Core.BitString.integer(135), ElixirScript.Core.BitString.integer(88), ElixirScript.Core.BitString.integer(211), ElixirScript.Core.BitString.integer(173), ElixirScript.Core.BitString.integer(134), ElixirScript.Core.BitString.integer(32), ElixirScript.Core.BitString.integer(240), ElixirScript.Core.BitString.integer(159), ElixirScript.Core.BitString.integer(13), ElixirScript.Core.BitString.integer(150), ElixirScript.Core.BitString.integer(229), ElixirScript.Core.BitString.integer(72), ElixirScript.Core.BitString.integer(84), ElixirScript.Core.BitString.integer(254))], [Symbol.for('module'), Symbol.for('Elixir.RuntimeError')]]);

        const value = __info__map__.get(kind);

        if (value !== null) {
            return value;
        }

        throw new ElixirScript.Core.Patterns.MatchError(kind);
    }

    function __struct__(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return new Map([[Symbol.for('__exception__'), true], [Symbol.for('__struct__'), Elixir.RuntimeError.__load(Elixir)], [Symbol.for('message'), 'runtime error']]);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('kv576460752303393469')], __function_args__, (kv5764607523033934690) => {
                return true;
            })) !== null) {
                let [kv5764607523033934690] = __arg_matches__;

                const [map5764607523033934690, keys5764607523033934690] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                    values: [ElixirScript.Core.Patterns.variable('map576460752303393469'), ElixirScript.Core.Patterns.variable('keys576460752303393469')]
                }), Elixir.Enum.__load(Elixir).reduce(kv5764607523033934690, new ElixirScript.Core.Tuple(__struct__(), []), (...__function_args__) => {
                    function recur(...__function_args__) {
                        let __arg_matches__ = null;

                        if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                            values: [ElixirScript.Core.Patterns.variable('key576460752303393469'), ElixirScript.Core.Patterns.variable('val576460752303393469')]
                        }), ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                            values: [ElixirScript.Core.Patterns.variable('map576460752303393469'), ElixirScript.Core.Patterns.variable('keys576460752303393469')]
                        })], __function_args__, (key5764607523033934690, val5764607523033934690, map5764607523033934690, keys5764607523033934690) => {
                            return true;
                        })) !== null) {
                            let [key5764607523033934690, val5764607523033934690, map5764607523033934690, keys5764607523033934690] = __arg_matches__;

                            return new ElixirScript.Core.Tuple(ElixirScript.Core.maps.update(key5764607523033934690, val5764607523033934690, map5764607523033934690), Elixir.List.__load(Elixir).__delete__(keys5764607523033934690, key5764607523033934690));
                        }

                        throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
                    }

                    return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
                }));

                const _ref289819 = new ElixirScript.Core.Tuple(map5764607523033934690, keys5764607523033934690);

                return ElixirScript.Core.Patterns.defmatch(ElixirScript.Core.Patterns.clause([[]], () => {
                    return map5764607523033934690;
                }, () => {
                    return true;
                }), ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.variable('_')], () => {
                    return ElixirScript.Core.erlang.error(Elixir.ArgumentError.__load(Elixir).exception('the following keys must also be given when building ' + ('struct ' + (Elixir.String.Chars.__load(Elixir).to_string(Elixir.Kernel.__load(Elixir).inspect(Elixir.RuntimeError.__load(Elixir))) + (': ' + Elixir.String.Chars.__load(Elixir).to_string(Elixir.Kernel.__load(Elixir).inspect(keys5764607523033934690)))))));
                }, () => {
                    return true;
                })).call(this, keys5764607523033934690);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function exception(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('msg576460752303393535')], __function_args__, (msg5764607523033935350) => {
                return ElixirScript.Core.erlang.is_binary(msg5764607523033935350);
            })) !== null) {
                let [msg5764607523033935350] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, [new ElixirScript.Core.Tuple(Symbol.for('message'), msg5764607523033935350)]));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('args576460752303393535')], __function_args__, (args5764607523033935350) => {
                return ElixirScript.Core.erlang.is_list(args5764607523033935350);
            })) !== null) {
                let [args5764607523033935350] = __arg_matches__;

                const [struct5764607523033935350] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.variable('struct576460752303393535'), __struct__());

                const [valid5764607523033935350, invalid5764607523033935350] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                    values: [ElixirScript.Core.Patterns.variable('valid576460752303393535'), ElixirScript.Core.Patterns.variable('invalid576460752303393535')]
                }), Elixir.Enum.__load(Elixir).split_with(args5764607523033935350, (...__function_args__) => {
                    function recur(...__function_args__) {
                        let __arg_matches__ = null;

                        if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                            values: [ElixirScript.Core.Patterns.variable('k576460752303393535'), ElixirScript.Core.Patterns.variable('_')]
                        })], __function_args__, (k5764607523033935350) => {
                            return true;
                        })) !== null) {
                            let [k5764607523033935350] = __arg_matches__;

                            return ElixirScript.Core.maps.is_key(k5764607523033935350, struct5764607523033935350);
                        }

                        throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
                    }

                    return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
                }));

                const _ref8787735 = new ElixirScript.Core.Tuple(valid5764607523033935350, invalid5764607523033935350);

                ElixirScript.Core.Patterns.defmatch(ElixirScript.Core.Patterns.clause([[]], () => {
                    return Symbol.for('ok');
                }, () => {
                    return true;
                }), ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.variable('_')], () => {
                    return Elixir.IO.__load(Elixir).warn('the following fields are unknown when raising ' + (Elixir.String.Chars.__load(Elixir).to_string(Elixir.Kernel.__load(Elixir).inspect(Elixir.RuntimeError.__load(Elixir))) + (': ' + (Elixir.String.Chars.__load(Elixir).to_string(Elixir.Kernel.__load(Elixir).inspect(invalid5764607523033935350)) + '. ')) + ('Please make sure to only give known fields when raising ' + ('or redefine ' + (Elixir.String.Chars.__load(Elixir).to_string(Elixir.Kernel.__load(Elixir).inspect(Elixir.RuntimeError.__load(Elixir))) + '.exception/1 to ') + ('discard unknown fields. Future Elixir versions will raise on ' + 'unknown fields given to raise/2')))));
                }, () => {
                    return true;
                })).call(this, invalid5764607523033935350)

                return Elixir.Kernel.__load(Elixir).struct__emark__(struct5764607523033935350, valid5764607523033935350);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    const __exports = {
        __struct__,
        exception,
        __MODULE__: Symbol.for('Elixir.RuntimeError'),
        __info__
    };

    Elixir.RuntimeError.__exports = __exports

    return __exports;
}
ElixirScript.Core.Functions.build_namespace(Elixir, 'Elixir.Range').__load = function(Elixir) {
    if (Elixir.Range.__exports)
        return Elixir.Range.__exports;

    function __info__(kind) {
        const __info__map__ = new Map([[Symbol.for('functions'), [new ElixirScript.Core.Tuple(Symbol.for('__struct__'), 0), new ElixirScript.Core.Tuple(Symbol.for('__struct__'), 1), new ElixirScript.Core.Tuple(Symbol.for('new'), 2), new ElixirScript.Core.Tuple(Symbol.for('range?'), 1)]], [Symbol.for('macros'), []], [Symbol.for('attributes'), [new ElixirScript.Core.Tuple(Symbol.for('vsn'), [242968799372677454210273493458377425746])]], [Symbol.for('compile'), [new ElixirScript.Core.Tuple(Symbol.for('options'), []), new ElixirScript.Core.Tuple(Symbol.for('version'), [55, 46, 49, 46, 50]), new ElixirScript.Core.Tuple(Symbol.for('source'), '/private/tmp/elixir-20170929-51947-wgj4qu/elixir-1.5.2/lib/elixir/lib/range.ex')]], [Symbol.for('md5'), new ElixirScript.Core.BitString(ElixirScript.Core.BitString.integer(182), ElixirScript.Core.BitString.integer(202), ElixirScript.Core.BitString.integer(22), ElixirScript.Core.BitString.integer(176), ElixirScript.Core.BitString.integer(55), ElixirScript.Core.BitString.integer(173), ElixirScript.Core.BitString.integer(5), ElixirScript.Core.BitString.integer(216), ElixirScript.Core.BitString.integer(142), ElixirScript.Core.BitString.integer(57), ElixirScript.Core.BitString.integer(35), ElixirScript.Core.BitString.integer(27), ElixirScript.Core.BitString.integer(183), ElixirScript.Core.BitString.integer(194), ElixirScript.Core.BitString.integer(195), ElixirScript.Core.BitString.integer(82))], [Symbol.for('module'), Symbol.for('Elixir.Range')]]);

        const value = __info__map__.get(kind);

        if (value !== null) {
            return value;
        }

        throw new ElixirScript.Core.Patterns.MatchError(kind);
    }

    function __struct__(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return new Map([[Symbol.for('__struct__'), Elixir.Range.__load(Elixir)], [Symbol.for('first'), null], [Symbol.for('last'), null]]);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('kv576460752303309822')], __function_args__, (kv5764607523033098220) => {
                return true;
            })) !== null) {
                let [kv5764607523033098220] = __arg_matches__;

                const [map5764607523033098220, keys5764607523033098220] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                    values: [ElixirScript.Core.Patterns.variable('map576460752303309822'), ElixirScript.Core.Patterns.variable('keys576460752303309822')]
                }), Elixir.Enum.__load(Elixir).reduce(kv5764607523033098220, new ElixirScript.Core.Tuple(__struct__(), []), (...__function_args__) => {
                    function recur(...__function_args__) {
                        let __arg_matches__ = null;

                        if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                            values: [ElixirScript.Core.Patterns.variable('key576460752303309822'), ElixirScript.Core.Patterns.variable('val576460752303309822')]
                        }), ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                            values: [ElixirScript.Core.Patterns.variable('map576460752303309822'), ElixirScript.Core.Patterns.variable('keys576460752303309822')]
                        })], __function_args__, (key5764607523033098220, val5764607523033098220, map5764607523033098220, keys5764607523033098220) => {
                            return true;
                        })) !== null) {
                            let [key5764607523033098220, val5764607523033098220, map5764607523033098220, keys5764607523033098220] = __arg_matches__;

                            return new ElixirScript.Core.Tuple(ElixirScript.Core.maps.update(key5764607523033098220, val5764607523033098220, map5764607523033098220), Elixir.List.__load(Elixir).__delete__(keys5764607523033098220, key5764607523033098220));
                        }

                        throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
                    }

                    return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
                }));

                const _ref7970557 = new ElixirScript.Core.Tuple(map5764607523033098220, keys5764607523033098220);

                return ElixirScript.Core.Patterns.defmatch(ElixirScript.Core.Patterns.clause([[]], () => {
                    return map5764607523033098220;
                }, () => {
                    return true;
                }), ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.variable('_')], () => {
                    return ElixirScript.Core.erlang.error(Elixir.ArgumentError.__load(Elixir).exception('the following keys must also be given when building ' + ('struct ' + (Elixir.String.Chars.__load(Elixir).to_string(Elixir.Kernel.__load(Elixir).inspect(Elixir.Range.__load(Elixir))) + (': ' + Elixir.String.Chars.__load(Elixir).to_string(Elixir.Kernel.__load(Elixir).inspect(keys5764607523033098220)))))));
                }, () => {
                    return true;
                })).call(this, keys5764607523033098220);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function __new__(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('first'), ElixirScript.Core.Patterns.variable('last')], __function_args__, (first0, last0) => {
                return ElixirScript.Core.erlang.is_integer(first0) && ElixirScript.Core.erlang.is_integer(last0);
            })) !== null) {
                let [first0, last0] = __arg_matches__;

                return Elixir.Range.__load(Elixir).__struct__(new Map([[Symbol.for('first'), first0], [Symbol.for('last'), last0]]));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('first'), ElixirScript.Core.Patterns.variable('last')], __function_args__, (first0, last0) => {
                return true;
            })) !== null) {
                let [first0, last0] = __arg_matches__;

                return ElixirScript.Core.erlang.error(Elixir.ArgumentError.__load(Elixir).exception('ranges (first..last) expect both sides to be integers, ' + ('got: ' + (Elixir.String.Chars.__load(Elixir).to_string(Elixir.Kernel.__load(Elixir).inspect(first0)) + ('..' + Elixir.String.Chars.__load(Elixir).to_string(Elixir.Kernel.__load(Elixir).inspect(last0)))))));
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    const __exports = {
        __struct__,
        __new__,
        __MODULE__: Symbol.for('Elixir.Range'),
        __info__
    };

    Elixir.Range.__exports = __exports

    return __exports;
}
ElixirScript.Core.Functions.build_namespace(Elixir, 'Elixir.Macro').__load = function(Elixir) {
    if (Elixir.Macro.__exports)
        return Elixir.Macro.__exports;

    function __info__(kind) {
        const __info__map__ = new Map([[Symbol.for('functions'), [new ElixirScript.Core.Tuple(Symbol.for('camelize'), 1), new ElixirScript.Core.Tuple(Symbol.for('classify_identifier'), 1), new ElixirScript.Core.Tuple(Symbol.for('decompose_call'), 1), new ElixirScript.Core.Tuple(Symbol.for('escape'), 1), new ElixirScript.Core.Tuple(Symbol.for('escape'), 2), new ElixirScript.Core.Tuple(Symbol.for('expand'), 2), new ElixirScript.Core.Tuple(Symbol.for('expand_once'), 2), new ElixirScript.Core.Tuple(Symbol.for('generate_arguments'), 2), new ElixirScript.Core.Tuple(Symbol.for('pipe'), 3), new ElixirScript.Core.Tuple(Symbol.for('pipe_warning'), 1), new ElixirScript.Core.Tuple(Symbol.for('postwalk'), 2), new ElixirScript.Core.Tuple(Symbol.for('postwalk'), 3), new ElixirScript.Core.Tuple(Symbol.for('prewalk'), 2), new ElixirScript.Core.Tuple(Symbol.for('prewalk'), 3), new ElixirScript.Core.Tuple(Symbol.for('to_string'), 1), new ElixirScript.Core.Tuple(Symbol.for('to_string'), 2), new ElixirScript.Core.Tuple(Symbol.for('traverse'), 4), new ElixirScript.Core.Tuple(Symbol.for('underscore'), 1), new ElixirScript.Core.Tuple(Symbol.for('unescape_string'), 1), new ElixirScript.Core.Tuple(Symbol.for('unescape_string'), 2), new ElixirScript.Core.Tuple(Symbol.for('unescape_tokens'), 1), new ElixirScript.Core.Tuple(Symbol.for('unescape_tokens'), 2), new ElixirScript.Core.Tuple(Symbol.for('unpipe'), 1), new ElixirScript.Core.Tuple(Symbol.for('update_meta'), 2), new ElixirScript.Core.Tuple(Symbol.for('validate'), 1), new ElixirScript.Core.Tuple(Symbol.for('var'), 2)]], [Symbol.for('macros'), [new ElixirScript.Core.Tuple(Symbol.for('binary_ops'), 0), new ElixirScript.Core.Tuple(Symbol.for('unary_ops'), 0)]], [Symbol.for('attributes'), [new ElixirScript.Core.Tuple(Symbol.for('vsn'), [222349112610777828672633644968841206979])]], [Symbol.for('compile'), [new ElixirScript.Core.Tuple(Symbol.for('options'), []), new ElixirScript.Core.Tuple(Symbol.for('version'), [55, 46, 49, 46, 50]), new ElixirScript.Core.Tuple(Symbol.for('source'), '/private/tmp/elixir-20170929-51947-wgj4qu/elixir-1.5.2/lib/elixir/lib/macro.ex')]], [Symbol.for('md5'), new ElixirScript.Core.BitString(ElixirScript.Core.BitString.integer(167), ElixirScript.Core.BitString.integer(70), ElixirScript.Core.BitString.integer(225), ElixirScript.Core.BitString.integer(163), ElixirScript.Core.BitString.integer(252), ElixirScript.Core.BitString.integer(213), ElixirScript.Core.BitString.integer(85), ElixirScript.Core.BitString.integer(186), ElixirScript.Core.BitString.integer(82), ElixirScript.Core.BitString.integer(203), ElixirScript.Core.BitString.integer(125), ElixirScript.Core.BitString.integer(173), ElixirScript.Core.BitString.integer(222), ElixirScript.Core.BitString.integer(126), ElixirScript.Core.BitString.integer(92), ElixirScript.Core.BitString.integer(195))], [Symbol.for('module'), Symbol.for('Elixir.Macro')]]);

        const value = __info__map__.get(kind);

        if (value !== null) {
            return value;
        }

        throw new ElixirScript.Core.Patterns.MatchError(kind);
    }

    function classify_identifier(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('atom')], __function_args__, (atom0) => {
                return ElixirScript.Core.erlang.is_atom(atom0);
            })) !== null) {
                let [atom0] = __arg_matches__;

                const [charlist0] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.variable('charlist'), ElixirScript.Core.erlang.atom_to_list(atom0));

                return ElixirScript.Core.SpecialForms.cond([atom0 === Symbol.for('%{}') || (atom0 === Symbol.for('{}') || (atom0 === Symbol.for('<<>>') || (atom0 === Symbol.for('...') || (atom0 === Symbol.for('..') || (atom0 === Symbol.for('.') || atom0 === Symbol.for('%')))))), () => {
                    return Symbol.for('not_callable');
                }], [ElixirScript.Core.Patterns.defmatch(ElixirScript.Core.Patterns.clause([true], () => {
                    return true;
                }, () => {
                    return true;
                }), ElixirScript.Core.Patterns.clause([false], () => {
                    return atom0 === Symbol.for('!==') || (atom0 === Symbol.for('==') || (atom0 === Symbol.for('!=') || (atom0 === Symbol.for('<=') || (atom0 === Symbol.for('>=') || (atom0 === Symbol.for('&&') || (atom0 === Symbol.for('||') || (atom0 === Symbol.for('<>') || (atom0 === Symbol.for('++') || (atom0 === Symbol.for('--') || (atom0 === Symbol.for('\\') || (atom0 === Symbol.for('::') || (atom0 === Symbol.for('<-') || (atom0 === Symbol.for('..') || (atom0 === Symbol.for('|>') || (atom0 === Symbol.for('=~') || (atom0 === Symbol.for('<') || (atom0 === Symbol.for('>') || (atom0 === Symbol.for('->') || (atom0 === Symbol.for('+') || (atom0 === Symbol.for('-') || (atom0 === Symbol.for('*') || (atom0 === Symbol.for('/') || (atom0 === Symbol.for('=') || (atom0 === Symbol.for('|') || (atom0 === Symbol.for('.') || (atom0 === Symbol.for('and') || (atom0 === Symbol.for('or') || (atom0 === Symbol.for('when') || (atom0 === Symbol.for('in') || (atom0 === Symbol.for('~>>') || (atom0 === Symbol.for('<<~') || (atom0 === Symbol.for('~>') || (atom0 === Symbol.for('<~') || (atom0 === Symbol.for('<~>') || (atom0 === Symbol.for('<|>') || (atom0 === Symbol.for('<<<') || (atom0 === Symbol.for('>>>') || (atom0 === Symbol.for('|||') || (atom0 === Symbol.for('&&&') || (atom0 === Symbol.for('^^^') || (atom0 === Symbol.for('~~~') || atom0 === Symbol.for('==='))))))))))))))))))))))))))))))))))))))))));
                }, () => {
                    return true;
                })).call(this, atom0 === Symbol.for('@') || (atom0 === Symbol.for('^') || (atom0 === Symbol.for('not') || (atom0 === Symbol.for('+') || (atom0 === Symbol.for('-') || (atom0 === Symbol.for('~~~') || (atom0 === Symbol.for('&') || atom0 === Symbol.for('!')))))))), () => {
                    return Symbol.for('callable');
                }], [valid_alias__qmark__(charlist0), () => {
                    return Symbol.for('alias');
                }], [true, () => {
                    return ElixirScript.Core.Patterns.defmatch(ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                        values: [ElixirScript.Core.Patterns.variable('kind'), ElixirScript.Core.Patterns.variable('_acc'), [], ElixirScript.Core.Patterns.variable('_'), ElixirScript.Core.Patterns.variable('_'), ElixirScript.Core.Patterns.variable('special')]
                    })], (kind0, _acc0, special0) => {
                        return ElixirScript.Core.Patterns.defmatch(ElixirScript.Core.Patterns.clause([false], () => {
                            return Symbol.for('not_callable');
                        }, () => {
                            return true;
                        }), ElixirScript.Core.Patterns.clause([true], () => {
                            return Symbol.for('callable');
                        }, () => {
                            return true;
                        })).call(this, ElixirScript.Core.Patterns.defmatch(ElixirScript.Core.Patterns.clause([true], () => {
                            return ElixirScript.Core.erlang.not(ElixirScript.Core.lists.member(64, special0));
                        }, () => {
                            return true;
                        }), ElixirScript.Core.Patterns.clause([false], () => {
                            return false;
                        }, () => {
                            return true;
                        })).call(this, ElixirScript.Core.erlang.equals(kind0, Symbol.for('identifier'))));
                    }, (kind0, _acc0, special0) => {
                        return true;
                    }), ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.variable('_')], () => {
                        return Symbol.for('other');
                    }, () => {
                        return true;
                    })).call(this, ElixirScript.Core.elixir_config.safe_get(Symbol.for('identifier_tokenizer'), Elixir.String.Tokenizer.__load(Elixir)).tokenize(charlist0));
                }]);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function trim_leading_while_valid_identifier(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.headTail(ElixirScript.Core.Patterns.variable('char'), ElixirScript.Core.Patterns.variable('rest'))], __function_args__, (char0, rest0) => {
                return char0 >= 97 && char0 <= 122 || char0 >= 65 && char0 <= 90 || char0 >= 48 && char0 <= 57 || ElixirScript.Core.erlang.equals(char0, 95);
            })) !== null) {
                let [char0, rest0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, rest0));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('other')], __function_args__, (other0) => {
                return true;
            })) !== null) {
                let [other0] = __arg_matches__;

                return other0;
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function valid_alias__qmark__(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.headTail([69, 108, 105, 120, 105, 114], ElixirScript.Core.Patterns.variable('rest'))], __function_args__, (rest0) => {
                return true;
            })) !== null) {
                let [rest0] = __arg_matches__;

                return valid_alias_piece__qmark__(rest0);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('_other')], __function_args__, (_other0) => {
                return true;
            })) !== null) {
                let [_other0] = __arg_matches__;

                return false;
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function valid_alias_piece__qmark__(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([[46, ElixirScript.Core.Patterns.headTail(ElixirScript.Core.Patterns.variable('char'), ElixirScript.Core.Patterns.variable('rest'))]], __function_args__, (char0, rest0) => {
                return char0 >= 65 && char0 <= 90;
            })) !== null) {
                let [char0, rest0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, trim_leading_while_valid_identifier(rest0)));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([[]], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return true;
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('_other')], __function_args__, (_other0) => {
                return true;
            })) !== null) {
                let [_other0] = __arg_matches__;

                return false;
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    const __exports = {
        classify_identifier,
        __MODULE__: Symbol.for('Elixir.Macro'),
        __info__
    };

    Elixir.Macro.__exports = __exports

    return __exports;
}
ElixirScript.Core.Functions.build_namespace(Elixir, 'Elixir.Exception').__load = function(Elixir) {
    if (Elixir.Exception.__exports)
        return Elixir.Exception.__exports;

    function __info__(kind) {
        const __info__map__ = new Map([[Symbol.for('functions'), [new ElixirScript.Core.Tuple(Symbol.for('blame'), 3), new ElixirScript.Core.Tuple(Symbol.for('blame_mfa'), 3), new ElixirScript.Core.Tuple(Symbol.for('exception?'), 1), new ElixirScript.Core.Tuple(Symbol.for('format'), 2), new ElixirScript.Core.Tuple(Symbol.for('format'), 3), new ElixirScript.Core.Tuple(Symbol.for('format_banner'), 2), new ElixirScript.Core.Tuple(Symbol.for('format_banner'), 3), new ElixirScript.Core.Tuple(Symbol.for('format_exit'), 1), new ElixirScript.Core.Tuple(Symbol.for('format_fa'), 2), new ElixirScript.Core.Tuple(Symbol.for('format_file_line'), 2), new ElixirScript.Core.Tuple(Symbol.for('format_file_line'), 3), new ElixirScript.Core.Tuple(Symbol.for('format_mfa'), 3), new ElixirScript.Core.Tuple(Symbol.for('format_stacktrace'), 0), new ElixirScript.Core.Tuple(Symbol.for('format_stacktrace'), 1), new ElixirScript.Core.Tuple(Symbol.for('format_stacktrace_entry'), 1), new ElixirScript.Core.Tuple(Symbol.for('message'), 1), new ElixirScript.Core.Tuple(Symbol.for('normalize'), 2), new ElixirScript.Core.Tuple(Symbol.for('normalize'), 3)]], [Symbol.for('macros'), []], [Symbol.for('attributes'), [new ElixirScript.Core.Tuple(Symbol.for('vsn'), [42981897892327218300758844540436993090])]], [Symbol.for('compile'), [new ElixirScript.Core.Tuple(Symbol.for('options'), []), new ElixirScript.Core.Tuple(Symbol.for('version'), [55, 46, 49, 46, 50]), new ElixirScript.Core.Tuple(Symbol.for('source'), '/private/tmp/elixir-20170929-51947-wgj4qu/elixir-1.5.2/lib/elixir/lib/exception.ex')]], [Symbol.for('md5'), new ElixirScript.Core.BitString(ElixirScript.Core.BitString.integer(32), ElixirScript.Core.BitString.integer(86), ElixirScript.Core.BitString.integer(3), ElixirScript.Core.BitString.integer(46), ElixirScript.Core.BitString.integer(18), ElixirScript.Core.BitString.integer(66), ElixirScript.Core.BitString.integer(234), ElixirScript.Core.BitString.integer(231), ElixirScript.Core.BitString.integer(66), ElixirScript.Core.BitString.integer(82), ElixirScript.Core.BitString.integer(57), ElixirScript.Core.BitString.integer(155), ElixirScript.Core.BitString.integer(204), ElixirScript.Core.BitString.integer(237), ElixirScript.Core.BitString.integer(212), ElixirScript.Core.BitString.integer(66))], [Symbol.for('module'), Symbol.for('Elixir.Exception')]]);

        const value = __info__map__.get(kind);

        if (value !== null) {
            return value;
        }

        throw new ElixirScript.Core.Patterns.MatchError(kind);
    }

    function message(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.capture(new Map([[Symbol.for('__struct__'), ElixirScript.Core.Patterns.variable('module')], [Symbol.for('__exception__'), true]]))], __function_args__, (module0, exception0) => {
                return ElixirScript.Core.erlang.is_atom(module0);
            })) !== null) {
                let [module0, exception0] = __arg_matches__;

                return ElixirScript.Core.SpecialForms._try(() => {
                    return module0.message(exception0);
                }, ElixirScript.Core.Patterns.defmatch(ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.variable('e')], (e0) => {
                    return 'got ' + (Elixir.String.Chars.__load(Elixir).to_string(Elixir.Kernel.__load(Elixir).inspect(ElixirScript.Core.Functions.call_property(e0, '__struct__'))) + (' with message ' + (Elixir.String.Chars.__load(Elixir).to_string(Elixir.Kernel.__load(Elixir).inspect(message(e0))) + ' '))) + ('while retrieving Exception.message/1 for ' + Elixir.String.Chars.__load(Elixir).to_string(Elixir.Kernel.__load(Elixir).inspect(exception0)));
                }, (e0) => {
                    return true;
                })), null, (...__function_args__) => {
                    function recur(...__function_args__) {
                        let __arg_matches__ = null;

                        if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('x')], __function_args__, (x0) => {
                            return ElixirScript.Core.erlang.is_binary(x0);
                        })) !== null) {
                            let [x0] = __arg_matches__;

                            return x0;
                        } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('x')], __function_args__, (x0) => {
                            return true;
                        })) !== null) {
                            let [x0] = __arg_matches__;

                            return 'got ' + (Elixir.String.Chars.__load(Elixir).to_string(Elixir.Kernel.__load(Elixir).inspect(x0)) + ' ') + ('while retrieving Exception.message/1 for ' + (Elixir.String.Chars.__load(Elixir).to_string(Elixir.Kernel.__load(Elixir).inspect(exception0)) + ' ') + '(expected a string)');
                        }

                        throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
                    }

                    return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
                }, null);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    const __exports = {
        message,
        __MODULE__: Symbol.for('Elixir.Exception'),
        __info__
    };

    Elixir.Exception.__exports = __exports

    return __exports;
}
ElixirScript.Core.Functions.build_namespace(Elixir, 'Elixir.KeyError').__load = function(Elixir) {
    if (Elixir.KeyError.__exports)
        return Elixir.KeyError.__exports;

    function __info__(kind) {
        const __info__map__ = new Map([[Symbol.for('functions'), [new ElixirScript.Core.Tuple(Symbol.for('__struct__'), 0), new ElixirScript.Core.Tuple(Symbol.for('__struct__'), 1), new ElixirScript.Core.Tuple(Symbol.for('exception'), 1), new ElixirScript.Core.Tuple(Symbol.for('message'), 1)]], [Symbol.for('macros'), []], [Symbol.for('attributes'), [new ElixirScript.Core.Tuple(Symbol.for('vsn'), [225082733096793300280017084026399513992]), new ElixirScript.Core.Tuple(Symbol.for('behaviour'), [Elixir.Exception.__load(Elixir)])]], [Symbol.for('compile'), [new ElixirScript.Core.Tuple(Symbol.for('options'), []), new ElixirScript.Core.Tuple(Symbol.for('version'), [55, 46, 49, 46, 50]), new ElixirScript.Core.Tuple(Symbol.for('source'), '/private/tmp/elixir-20170929-51947-wgj4qu/elixir-1.5.2/lib/elixir/lib/exception.ex')]], [Symbol.for('md5'), new ElixirScript.Core.BitString(ElixirScript.Core.BitString.integer(169), ElixirScript.Core.BitString.integer(85), ElixirScript.Core.BitString.integer(91), ElixirScript.Core.BitString.integer(137), ElixirScript.Core.BitString.integer(73), ElixirScript.Core.BitString.integer(35), ElixirScript.Core.BitString.integer(30), ElixirScript.Core.BitString.integer(46), ElixirScript.Core.BitString.integer(200), ElixirScript.Core.BitString.integer(88), ElixirScript.Core.BitString.integer(59), ElixirScript.Core.BitString.integer(32), ElixirScript.Core.BitString.integer(206), ElixirScript.Core.BitString.integer(192), ElixirScript.Core.BitString.integer(93), ElixirScript.Core.BitString.integer(136))], [Symbol.for('module'), Symbol.for('Elixir.KeyError')]]);

        const value = __info__map__.get(kind);

        if (value !== null) {
            return value;
        }

        throw new ElixirScript.Core.Patterns.MatchError(kind);
    }

    function __struct__(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return new Map([[Symbol.for('__exception__'), true], [Symbol.for('__struct__'), Elixir.KeyError.__load(Elixir)], [Symbol.for('key'), null], [Symbol.for('term'), null]]);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('kv576460752303358399')], __function_args__, (kv5764607523033583990) => {
                return true;
            })) !== null) {
                let [kv5764607523033583990] = __arg_matches__;

                const [map5764607523033583990, keys5764607523033583990] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                    values: [ElixirScript.Core.Patterns.variable('map576460752303358399'), ElixirScript.Core.Patterns.variable('keys576460752303358399')]
                }), Elixir.Enum.__load(Elixir).reduce(kv5764607523033583990, new ElixirScript.Core.Tuple(__struct__(), []), (...__function_args__) => {
                    function recur(...__function_args__) {
                        let __arg_matches__ = null;

                        if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                            values: [ElixirScript.Core.Patterns.variable('key576460752303358399'), ElixirScript.Core.Patterns.variable('val576460752303358399')]
                        }), ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                            values: [ElixirScript.Core.Patterns.variable('map576460752303358399'), ElixirScript.Core.Patterns.variable('keys576460752303358399')]
                        })], __function_args__, (key5764607523033583990, val5764607523033583990, map5764607523033583990, keys5764607523033583990) => {
                            return true;
                        })) !== null) {
                            let [key5764607523033583990, val5764607523033583990, map5764607523033583990, keys5764607523033583990] = __arg_matches__;

                            return new ElixirScript.Core.Tuple(ElixirScript.Core.maps.update(key5764607523033583990, val5764607523033583990, map5764607523033583990), Elixir.List.__load(Elixir).__delete__(keys5764607523033583990, key5764607523033583990));
                        }

                        throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
                    }

                    return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
                }));

                const _ref4910466 = new ElixirScript.Core.Tuple(map5764607523033583990, keys5764607523033583990);

                return ElixirScript.Core.Patterns.defmatch(ElixirScript.Core.Patterns.clause([[]], () => {
                    return map5764607523033583990;
                }, () => {
                    return true;
                }), ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.variable('_')], () => {
                    return ElixirScript.Core.erlang.error(Elixir.ArgumentError.__load(Elixir).exception('the following keys must also be given when building ' + ('struct ' + (Elixir.String.Chars.__load(Elixir).to_string(Elixir.Kernel.__load(Elixir).inspect(Elixir.KeyError.__load(Elixir))) + (': ' + Elixir.String.Chars.__load(Elixir).to_string(Elixir.Kernel.__load(Elixir).inspect(keys5764607523033583990)))))));
                }, () => {
                    return true;
                })).call(this, keys5764607523033583990);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function exception(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('args576460752303366526')], __function_args__, (args5764607523033665260) => {
                return ElixirScript.Core.erlang.is_list(args5764607523033665260);
            })) !== null) {
                let [args5764607523033665260] = __arg_matches__;

                const [struct5764607523033665260] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.variable('struct576460752303366526'), __struct__());

                const [valid5764607523033665260, invalid5764607523033665260] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                    values: [ElixirScript.Core.Patterns.variable('valid576460752303366526'), ElixirScript.Core.Patterns.variable('invalid576460752303366526')]
                }), Elixir.Enum.__load(Elixir).split_with(args5764607523033665260, (...__function_args__) => {
                    function recur(...__function_args__) {
                        let __arg_matches__ = null;

                        if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                            values: [ElixirScript.Core.Patterns.variable('k576460752303366526'), ElixirScript.Core.Patterns.variable('_')]
                        })], __function_args__, (k5764607523033665260) => {
                            return true;
                        })) !== null) {
                            let [k5764607523033665260] = __arg_matches__;

                            return ElixirScript.Core.maps.is_key(k5764607523033665260, struct5764607523033665260);
                        }

                        throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
                    }

                    return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
                }));

                const _ref6289695 = new ElixirScript.Core.Tuple(valid5764607523033665260, invalid5764607523033665260);

                ElixirScript.Core.Patterns.defmatch(ElixirScript.Core.Patterns.clause([[]], () => {
                    return Symbol.for('ok');
                }, () => {
                    return true;
                }), ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.variable('_')], () => {
                    return Elixir.IO.__load(Elixir).warn('the following fields are unknown when raising ' + (Elixir.String.Chars.__load(Elixir).to_string(Elixir.Kernel.__load(Elixir).inspect(Elixir.KeyError.__load(Elixir))) + (': ' + (Elixir.String.Chars.__load(Elixir).to_string(Elixir.Kernel.__load(Elixir).inspect(invalid5764607523033665260)) + '. ')) + ('Please make sure to only give known fields when raising ' + ('or redefine ' + (Elixir.String.Chars.__load(Elixir).to_string(Elixir.Kernel.__load(Elixir).inspect(Elixir.KeyError.__load(Elixir))) + '.exception/1 to ') + ('discard unknown fields. Future Elixir versions will raise on ' + 'unknown fields given to raise/2')))));
                }, () => {
                    return true;
                })).call(this, invalid5764607523033665260)

                return Elixir.Kernel.__load(Elixir).struct__emark__(struct5764607523033665260, valid5764607523033665260);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    const __exports = {
        __struct__,
        exception,
        __MODULE__: Symbol.for('Elixir.KeyError'),
        __info__
    };

    Elixir.KeyError.__exports = __exports

    return __exports;
}
ElixirScript.Core.Functions.build_namespace(Elixir, 'Elixir.Process').__load = function(Elixir) {
    if (Elixir.Process.__exports)
        return Elixir.Process.__exports;

    function __info__(kind) {
        const __info__map__ = new Map([[Symbol.for('functions'), [new ElixirScript.Core.Tuple(Symbol.for('alive?'), 1), new ElixirScript.Core.Tuple(Symbol.for('cancel_timer'), 1), new ElixirScript.Core.Tuple(Symbol.for('cancel_timer'), 2), new ElixirScript.Core.Tuple(Symbol.for('delete'), 1), new ElixirScript.Core.Tuple(Symbol.for('demonitor'), 1), new ElixirScript.Core.Tuple(Symbol.for('demonitor'), 2), new ElixirScript.Core.Tuple(Symbol.for('exit'), 2), new ElixirScript.Core.Tuple(Symbol.for('flag'), 2), new ElixirScript.Core.Tuple(Symbol.for('flag'), 3), new ElixirScript.Core.Tuple(Symbol.for('get'), 0), new ElixirScript.Core.Tuple(Symbol.for('get'), 1), new ElixirScript.Core.Tuple(Symbol.for('get'), 2), new ElixirScript.Core.Tuple(Symbol.for('get_keys'), 0), new ElixirScript.Core.Tuple(Symbol.for('get_keys'), 1), new ElixirScript.Core.Tuple(Symbol.for('group_leader'), 0), new ElixirScript.Core.Tuple(Symbol.for('group_leader'), 2), new ElixirScript.Core.Tuple(Symbol.for('hibernate'), 3), new ElixirScript.Core.Tuple(Symbol.for('info'), 1), new ElixirScript.Core.Tuple(Symbol.for('info'), 2), new ElixirScript.Core.Tuple(Symbol.for('link'), 1), new ElixirScript.Core.Tuple(Symbol.for('list'), 0), new ElixirScript.Core.Tuple(Symbol.for('monitor'), 1), new ElixirScript.Core.Tuple(Symbol.for('put'), 2), new ElixirScript.Core.Tuple(Symbol.for('read_timer'), 1), new ElixirScript.Core.Tuple(Symbol.for('register'), 2), new ElixirScript.Core.Tuple(Symbol.for('registered'), 0), new ElixirScript.Core.Tuple(Symbol.for('send'), 3), new ElixirScript.Core.Tuple(Symbol.for('send_after'), 3), new ElixirScript.Core.Tuple(Symbol.for('send_after'), 4), new ElixirScript.Core.Tuple(Symbol.for('sleep'), 1), new ElixirScript.Core.Tuple(Symbol.for('spawn'), 2), new ElixirScript.Core.Tuple(Symbol.for('spawn'), 4), new ElixirScript.Core.Tuple(Symbol.for('unlink'), 1), new ElixirScript.Core.Tuple(Symbol.for('unregister'), 1), new ElixirScript.Core.Tuple(Symbol.for('whereis'), 1)]], [Symbol.for('macros'), []], [Symbol.for('attributes'), [new ElixirScript.Core.Tuple(Symbol.for('vsn'), [88788520409253139022016211332100090414])]], [Symbol.for('compile'), [new ElixirScript.Core.Tuple(Symbol.for('options'), []), new ElixirScript.Core.Tuple(Symbol.for('version'), [55, 46, 49, 46, 50]), new ElixirScript.Core.Tuple(Symbol.for('source'), '/private/tmp/elixir-20170929-51947-wgj4qu/elixir-1.5.2/lib/elixir/lib/process.ex')]], [Symbol.for('md5'), new ElixirScript.Core.BitString(ElixirScript.Core.BitString.integer(66), ElixirScript.Core.BitString.integer(204), ElixirScript.Core.BitString.integer(12), ElixirScript.Core.BitString.integer(9), ElixirScript.Core.BitString.integer(85), ElixirScript.Core.BitString.integer(27), ElixirScript.Core.BitString.integer(2), ElixirScript.Core.BitString.integer(208), ElixirScript.Core.BitString.integer(168), ElixirScript.Core.BitString.integer(54), ElixirScript.Core.BitString.integer(58), ElixirScript.Core.BitString.integer(63), ElixirScript.Core.BitString.integer(235), ElixirScript.Core.BitString.integer(161), ElixirScript.Core.BitString.integer(106), ElixirScript.Core.BitString.integer(46))], [Symbol.for('module'), Symbol.for('Elixir.Process')]]);

        const value = __info__map__.get(kind);

        if (value !== null) {
            return value;
        }

        throw new ElixirScript.Core.Patterns.MatchError(kind);
    }

    function __delete__(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('key')], __function_args__, (key0) => {
                return true;
            })) !== null) {
                let [key0] = __arg_matches__;

                return nillify(ElixirScript.Core.erlang.erase(key0));
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function get(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('x0')], __function_args__, (x00) => {
                return true;
            })) !== null) {
                let [x00] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, x00, null));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('key'), ElixirScript.Core.Patterns.variable('default')], __function_args__, (key0, __default__0) => {
                return true;
            })) !== null) {
                let [key0, __default__0] = __arg_matches__;

                return ElixirScript.Core.Patterns.defmatch(ElixirScript.Core.Patterns.clause([Symbol.for('undefined')], () => {
                    return __default__0;
                }, () => {
                    return true;
                }), ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.variable('value')], (value0) => {
                    return value0;
                }, (value0) => {
                    return true;
                })).call(this, ElixirScript.Core.erlang.get(key0));
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function info(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('pid'), Symbol.for('registered_name')], __function_args__, (pid0) => {
                return true;
            })) !== null) {
                let [pid0] = __arg_matches__;

                return ElixirScript.Core.Patterns.defmatch(ElixirScript.Core.Patterns.clause([Symbol.for('undefined')], () => {
                    return null;
                }, () => {
                    return true;
                }), ElixirScript.Core.Patterns.clause([[]], () => {
                    return new ElixirScript.Core.Tuple(Symbol.for('registered_name'), []);
                }, () => {
                    return true;
                }), ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.variable('other')], (other0) => {
                    return other0;
                }, (other0) => {
                    return true;
                })).call(this, ElixirScript.Core.erlang.process_info(pid0, Symbol.for('registered_name')));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('pid'), ElixirScript.Core.Patterns.variable('spec')], __function_args__, (pid0, spec0) => {
                return ElixirScript.Core.erlang.is_atom(spec0) || ElixirScript.Core.erlang.is_list(spec0);
            })) !== null) {
                let [pid0, spec0] = __arg_matches__;

                return nillify(ElixirScript.Core.erlang.process_info(pid0, spec0));
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function nillify(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('undefined')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return null;
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('other')], __function_args__, (other0) => {
                return true;
            })) !== null) {
                let [other0] = __arg_matches__;

                return other0;
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function put(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('key'), ElixirScript.Core.Patterns.variable('value')], __function_args__, (key0, value0) => {
                return true;
            })) !== null) {
                let [key0, value0] = __arg_matches__;

                return nillify(ElixirScript.Core.erlang.put(key0, value0));
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    const __exports = {
        __delete__,
        get,
        info,
        put,
        __MODULE__: Symbol.for('Elixir.Process'),
        __info__
    };

    Elixir.Process.__exports = __exports

    return __exports;
}
ElixirScript.Core.Functions.build_namespace(Elixir, 'Elixir.Enumerable.Stream').__load = function(Elixir) {
    if (Elixir.Enumerable.Stream.__exports)
        return Elixir.Enumerable.Stream.__exports;

    function __info__(kind) {
        const __info__map__ = new Map([[Symbol.for('functions'), [new ElixirScript.Core.Tuple(Symbol.for('__impl__'), 1), new ElixirScript.Core.Tuple(Symbol.for('count'), 1), new ElixirScript.Core.Tuple(Symbol.for('member?'), 2), new ElixirScript.Core.Tuple(Symbol.for('reduce'), 3)]], [Symbol.for('macros'), []], [Symbol.for('attributes'), [new ElixirScript.Core.Tuple(Symbol.for('vsn'), [63519441553498825043520250837129339823]), new ElixirScript.Core.Tuple(Symbol.for('behaviour'), [Elixir.Enumerable.__load(Elixir)]), new ElixirScript.Core.Tuple(Symbol.for('protocol_impl'), [new ElixirScript.Core.Tuple(Symbol.for('protocol'), Elixir.Enumerable.__load(Elixir)), new ElixirScript.Core.Tuple(Symbol.for('for'), Elixir.Stream.__load(Elixir))])]], [Symbol.for('compile'), [new ElixirScript.Core.Tuple(Symbol.for('options'), []), new ElixirScript.Core.Tuple(Symbol.for('version'), [55, 46, 49, 46, 50]), new ElixirScript.Core.Tuple(Symbol.for('source'), '/private/tmp/elixir-20170929-51947-wgj4qu/elixir-1.5.2/lib/elixir/lib/stream.ex')]], [Symbol.for('md5'), new ElixirScript.Core.BitString(ElixirScript.Core.BitString.integer(47), ElixirScript.Core.BitString.integer(201), ElixirScript.Core.BitString.integer(102), ElixirScript.Core.BitString.integer(66), ElixirScript.Core.BitString.integer(155), ElixirScript.Core.BitString.integer(193), ElixirScript.Core.BitString.integer(101), ElixirScript.Core.BitString.integer(221), ElixirScript.Core.BitString.integer(147), ElixirScript.Core.BitString.integer(161), ElixirScript.Core.BitString.integer(56), ElixirScript.Core.BitString.integer(203), ElixirScript.Core.BitString.integer(110), ElixirScript.Core.BitString.integer(157), ElixirScript.Core.BitString.integer(163), ElixirScript.Core.BitString.integer(175))], [Symbol.for('module'), Symbol.for('Elixir.Enumerable.Stream')]]);

        const value = __info__map__.get(kind);

        if (value !== null) {
            return value;
        }

        throw new ElixirScript.Core.Patterns.MatchError(kind);
    }

    function __impl__(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('for')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.Stream.__load(Elixir);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('target')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.Enumerable.Stream.__load(Elixir);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('protocol')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.Enumerable.__load(Elixir);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function count(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('_lazy')], __function_args__, (_lazy0) => {
                return true;
            })) !== null) {
                let [_lazy0] = __arg_matches__;

                return new ElixirScript.Core.Tuple(Symbol.for('error'), Elixir.Enumerable.Stream.__load(Elixir));
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function do_done(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                values: [ElixirScript.Core.Patterns.variable('reason'), ElixirScript.Core.Patterns.headTail(ElixirScript.Core.Patterns.variable('acc'), ElixirScript.Core.Patterns.variable('_'))]
            }), null], __function_args__, (reason0, acc0) => {
                return true;
            })) !== null) {
                let [reason0, acc0] = __arg_matches__;

                return new ElixirScript.Core.Tuple(reason0, acc0);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                values: [ElixirScript.Core.Patterns.variable('reason'), ElixirScript.Core.Patterns.headTail(ElixirScript.Core.Patterns.variable('acc'), ElixirScript.Core.Patterns.variable('t'))]
            }), ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                values: [ElixirScript.Core.Patterns.variable('done'), ElixirScript.Core.Patterns.variable('fun')]
            })], __function_args__, (reason0, acc0, t0, done0, fun0) => {
                return true;
            })) !== null) {
                let [reason0, acc0, t0, done0, fun0] = __arg_matches__;

                const [h0] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.headTail(ElixirScript.Core.Patterns.variable('h'), ElixirScript.Core.Patterns.variable('_')), Elixir.Enum.__load(Elixir).reverse(t0));

                const _ref7519265 = [h0];

                return ElixirScript.Core.Patterns.defmatch(ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                    values: [Symbol.for('cont'), ElixirScript.Core.Patterns.headTail(ElixirScript.Core.Patterns.variable('acc'), ElixirScript.Core.Patterns.variable('_'))]
                })], (acc1) => {
                    return new ElixirScript.Core.Tuple(reason0, acc1);
                }, (acc1) => {
                    return true;
                }), ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                    values: [Symbol.for('halt'), ElixirScript.Core.Patterns.headTail(ElixirScript.Core.Patterns.variable('acc'), ElixirScript.Core.Patterns.variable('_'))]
                })], (acc1) => {
                    return new ElixirScript.Core.Tuple(Symbol.for('halted'), acc1);
                }, (acc1) => {
                    return true;
                }), ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                    values: [Symbol.for('suspend'), ElixirScript.Core.Patterns.headTail(ElixirScript.Core.Patterns.variable('acc'), ElixirScript.Core.Patterns.variable('_'))]
                })], (acc1) => {
                    return new ElixirScript.Core.Tuple(Symbol.for('suspended'), acc1, (...__function_args__) => {
                        function recur(...__function_args__) {
                            let __arg_matches__ = null;

                            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('x1')], __function_args__, (x10) => {
                                return true;
                            })) !== null) {
                                let [x10] = __arg_matches__;

                                return new ElixirScript.Core.Tuple(Symbol.for('done'), ElixirScript.Core.erlang.element(2, x10));
                            }

                            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
                        }

                        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
                    });
                }, (acc1) => {
                    return true;
                })).call(this, done0([acc0, h0], fun0));
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function do_each(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('reduce'), ElixirScript.Core.Patterns.variable('done'), ElixirScript.Core.Patterns.variable('accs'), ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                values: [ElixirScript.Core.Patterns.variable('command'), ElixirScript.Core.Patterns.variable('acc')]
            })], __function_args__, (reduce0, done0, accs0, command0, acc0) => {
                return true;
            })) !== null) {
                let [reduce0, done0, accs0, command0, acc0] = __arg_matches__;

                return ElixirScript.Core.Patterns.defmatch(ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                    values: [Symbol.for('suspended'), ElixirScript.Core.Patterns.headTail(ElixirScript.Core.Patterns.variable('acc'), ElixirScript.Core.Patterns.variable('accs')), ElixirScript.Core.Patterns.variable('continuation')]
                })], (acc1, accs1, continuation0) => {
                    return new ElixirScript.Core.Tuple(Symbol.for('suspended'), acc1, (...__function_args__) => {
                        function recur(...__function_args__) {
                            let __arg_matches__ = null;

                            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('x1')], __function_args__, (x10) => {
                                return true;
                            })) !== null) {
                                let [x10] = __arg_matches__;

                                return do_each(continuation0, done0, accs1, x10);
                            }

                            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
                        }

                        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
                    });
                }, (acc1, accs1, continuation0) => {
                    return true;
                }), ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                    values: [Symbol.for('halted'), ElixirScript.Core.Patterns.variable('accs')]
                })], (accs1) => {
                    return do_done(new ElixirScript.Core.Tuple(Symbol.for('halted'), accs1), done0);
                }, (accs1) => {
                    return true;
                }), ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                    values: [Symbol.for('done'), ElixirScript.Core.Patterns.variable('accs')]
                })], (accs1) => {
                    return do_done(new ElixirScript.Core.Tuple(Symbol.for('done'), accs1), done0);
                }, (accs1) => {
                    return true;
                })).call(this, reduce0(new ElixirScript.Core.Tuple(command0, ElixirScript.Core.Functions.concat(acc0, accs0))));
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function do_reduce(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([new Map([[Symbol.for('__struct__'), {
                __MODULE__: Symbol.for('Elixir.Stream')
            }], [Symbol.for('enum'), ElixirScript.Core.Patterns.variable('enum')], [Symbol.for('funs'), ElixirScript.Core.Patterns.variable('funs')], [Symbol.for('accs'), ElixirScript.Core.Patterns.variable('accs')], [Symbol.for('done'), ElixirScript.Core.Patterns.variable('done')]]), ElixirScript.Core.Patterns.variable('acc'), ElixirScript.Core.Patterns.variable('fun')], __function_args__, (enum0, funs0, accs0, done0, acc0, fun0) => {
                return true;
            })) !== null) {
                let [enum0, funs0, accs0, done0, acc0, fun0] = __arg_matches__;

                const [composed0] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.variable('composed'), ElixirScript.Core.lists.foldl((...__function_args__) => {
                    function recur(...__function_args__) {
                        let __arg_matches__ = null;

                        if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('fun'), ElixirScript.Core.Patterns.variable('acc')], __function_args__, (fun1, acc1) => {
                            return true;
                        })) !== null) {
                            let [fun1, acc1] = __arg_matches__;

                            return fun1(acc1);
                        }

                        throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
                    }

                    return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
                }, fun0, funs0));

                return do_each((...__function_args__) => {
                    function recur(...__function_args__) {
                        let __arg_matches__ = null;

                        if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('x1')], __function_args__, (x10) => {
                            return true;
                        })) !== null) {
                            let [x10] = __arg_matches__;

                            return Elixir.Enumerable.__load(Elixir).reduce(enum0, x10, composed0);
                        }

                        throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
                    }

                    return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
                }, ElixirScript.Core.Patterns.defmatch(ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.variable('x576460752303290975')], (x5764607523032909750) => {
                    return x5764607523032909750;
                }, (x5764607523032909750) => {
                    return x5764607523032909750 === null || x5764607523032909750 === false;
                }), ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.variable('_')], () => {
                    return new ElixirScript.Core.Tuple(done0, fun0);
                }, () => {
                    return true;
                })).call(this, done0), ElixirScript.Core.lists.reverse(accs0), acc0);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function member__qmark__(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('_lazy'), ElixirScript.Core.Patterns.variable('_value')], __function_args__, (_lazy0, _value0) => {
                return true;
            })) !== null) {
                let [_lazy0, _value0] = __arg_matches__;

                return new ElixirScript.Core.Tuple(Symbol.for('error'), Elixir.Enumerable.Stream.__load(Elixir));
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function reduce(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('lazy'), ElixirScript.Core.Patterns.variable('acc'), ElixirScript.Core.Patterns.variable('fun')], __function_args__, (lazy0, acc0, fun0) => {
                return true;
            })) !== null) {
                let [lazy0, acc0, fun0] = __arg_matches__;

                return do_reduce(lazy0, acc0, (...__function_args__) => {
                    function recur(...__function_args__) {
                        let __arg_matches__ = null;

                        if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('x'), [ElixirScript.Core.Patterns.variable('acc')]], __function_args__, (x0, acc1) => {
                            return true;
                        })) !== null) {
                            let [x0, acc1] = __arg_matches__;

                            const [reason0, acc2] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                                values: [ElixirScript.Core.Patterns.variable('reason'), ElixirScript.Core.Patterns.variable('acc')]
                            }), fun0(x0, acc1));

                            const _ref2329480 = new ElixirScript.Core.Tuple(reason0, acc2);

                            return new ElixirScript.Core.Tuple(reason0, [acc2]);
                        }

                        throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
                    }

                    return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
                });
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    const __exports = {
        __impl__,
        count,
        member__qmark__,
        reduce,
        __MODULE__: Symbol.for('Elixir.Enumerable.Stream'),
        __info__
    };

    Elixir.Enumerable.Stream.__exports = __exports

    return __exports;
}
ElixirScript.Core.Functions.build_namespace(Elixir, 'Elixir.Inspect.Opts').__load = function(Elixir) {
    if (Elixir.Inspect.Opts.__exports)
        return Elixir.Inspect.Opts.__exports;

    function __info__(kind) {
        const __info__map__ = new Map([[Symbol.for('functions'), [new ElixirScript.Core.Tuple(Symbol.for('__struct__'), 0), new ElixirScript.Core.Tuple(Symbol.for('__struct__'), 1)]], [Symbol.for('macros'), []], [Symbol.for('attributes'), [new ElixirScript.Core.Tuple(Symbol.for('vsn'), [96986139011258206525641885334460402642])]], [Symbol.for('compile'), [new ElixirScript.Core.Tuple(Symbol.for('options'), []), new ElixirScript.Core.Tuple(Symbol.for('version'), [55, 46, 49, 46, 50]), new ElixirScript.Core.Tuple(Symbol.for('source'), '/private/tmp/elixir-20170929-51947-wgj4qu/elixir-1.5.2/lib/elixir/lib/inspect/algebra.ex')]], [Symbol.for('md5'), new ElixirScript.Core.BitString(ElixirScript.Core.BitString.integer(72), ElixirScript.Core.BitString.integer(246), ElixirScript.Core.BitString.integer(217), ElixirScript.Core.BitString.integer(214), ElixirScript.Core.BitString.integer(161), ElixirScript.Core.BitString.integer(5), ElixirScript.Core.BitString.integer(168), ElixirScript.Core.BitString.integer(56), ElixirScript.Core.BitString.integer(193), ElixirScript.Core.BitString.integer(250), ElixirScript.Core.BitString.integer(117), ElixirScript.Core.BitString.integer(197), ElixirScript.Core.BitString.integer(249), ElixirScript.Core.BitString.integer(223), ElixirScript.Core.BitString.integer(139), ElixirScript.Core.BitString.integer(210))], [Symbol.for('module'), Symbol.for('Elixir.Inspect.Opts')]]);

        const value = __info__map__.get(kind);

        if (value !== null) {
            return value;
        }

        throw new ElixirScript.Core.Patterns.MatchError(kind);
    }

    function __struct__(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return new Map([[Symbol.for('__struct__'), Elixir.Inspect.Opts.__load(Elixir)], [Symbol.for('base'), Symbol.for('decimal')], [Symbol.for('binaries'), Symbol.for('infer')], [Symbol.for('char_lists'), Symbol.for('infer')], [Symbol.for('charlists'), Symbol.for('infer')], [Symbol.for('limit'), 50], [Symbol.for('pretty'), false], [Symbol.for('printable_limit'), 4096], [Symbol.for('safe'), true], [Symbol.for('structs'), true], [Symbol.for('syntax_colors'), []], [Symbol.for('width'), 80]]);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('kv576460752303381052')], __function_args__, (kv5764607523033810520) => {
                return true;
            })) !== null) {
                let [kv5764607523033810520] = __arg_matches__;

                const [map5764607523033810520, keys5764607523033810520] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                    values: [ElixirScript.Core.Patterns.variable('map576460752303381052'), ElixirScript.Core.Patterns.variable('keys576460752303381052')]
                }), Elixir.Enum.__load(Elixir).reduce(kv5764607523033810520, new ElixirScript.Core.Tuple(__struct__(), []), (...__function_args__) => {
                    function recur(...__function_args__) {
                        let __arg_matches__ = null;

                        if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                            values: [ElixirScript.Core.Patterns.variable('key576460752303381052'), ElixirScript.Core.Patterns.variable('val576460752303381052')]
                        }), ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                            values: [ElixirScript.Core.Patterns.variable('map576460752303381052'), ElixirScript.Core.Patterns.variable('keys576460752303381052')]
                        })], __function_args__, (key5764607523033810520, val5764607523033810520, map5764607523033810520, keys5764607523033810520) => {
                            return true;
                        })) !== null) {
                            let [key5764607523033810520, val5764607523033810520, map5764607523033810520, keys5764607523033810520] = __arg_matches__;

                            return new ElixirScript.Core.Tuple(ElixirScript.Core.maps.update(key5764607523033810520, val5764607523033810520, map5764607523033810520), Elixir.List.__load(Elixir).__delete__(keys5764607523033810520, key5764607523033810520));
                        }

                        throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
                    }

                    return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
                }));

                const _ref673622 = new ElixirScript.Core.Tuple(map5764607523033810520, keys5764607523033810520);

                return ElixirScript.Core.Patterns.defmatch(ElixirScript.Core.Patterns.clause([[]], () => {
                    return map5764607523033810520;
                }, () => {
                    return true;
                }), ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.variable('_')], () => {
                    return ElixirScript.Core.erlang.error(Elixir.ArgumentError.__load(Elixir).exception('the following keys must also be given when building ' + ('struct ' + (Elixir.String.Chars.__load(Elixir).to_string(Elixir.Kernel.__load(Elixir).inspect(Elixir.Inspect.Opts.__load(Elixir))) + (': ' + Elixir.String.Chars.__load(Elixir).to_string(Elixir.Kernel.__load(Elixir).inspect(keys5764607523033810520)))))));
                }, () => {
                    return true;
                })).call(this, keys5764607523033810520);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    const __exports = {
        __struct__,
        __MODULE__: Symbol.for('Elixir.Inspect.Opts'),
        __info__
    };

    Elixir.Inspect.Opts.__exports = __exports

    return __exports;
}
ElixirScript.Core.Functions.build_namespace(Elixir, 'Elixir.UnicodeConversionError').__load = function(Elixir) {
    if (Elixir.UnicodeConversionError.__exports)
        return Elixir.UnicodeConversionError.__exports;

    function __info__(kind) {
        const __info__map__ = new Map([[Symbol.for('functions'), [new ElixirScript.Core.Tuple(Symbol.for('__struct__'), 0), new ElixirScript.Core.Tuple(Symbol.for('__struct__'), 1), new ElixirScript.Core.Tuple(Symbol.for('exception'), 1), new ElixirScript.Core.Tuple(Symbol.for('message'), 1)]], [Symbol.for('macros'), []], [Symbol.for('attributes'), [new ElixirScript.Core.Tuple(Symbol.for('vsn'), [106689219470822811067429209522873096068]), new ElixirScript.Core.Tuple(Symbol.for('behaviour'), [Elixir.Exception.__load(Elixir)])]], [Symbol.for('compile'), [new ElixirScript.Core.Tuple(Symbol.for('options'), []), new ElixirScript.Core.Tuple(Symbol.for('version'), [55, 46, 49, 46, 50]), new ElixirScript.Core.Tuple(Symbol.for('source'), '/private/tmp/elixir-20170929-51947-wgj4qu/elixir-1.5.2/lib/elixir/lib/exception.ex')]], [Symbol.for('md5'), new ElixirScript.Core.BitString(ElixirScript.Core.BitString.integer(80), ElixirScript.Core.BitString.integer(67), ElixirScript.Core.BitString.integer(152), ElixirScript.Core.BitString.integer(163), ElixirScript.Core.BitString.integer(252), ElixirScript.Core.BitString.integer(55), ElixirScript.Core.BitString.integer(158), ElixirScript.Core.BitString.integer(183), ElixirScript.Core.BitString.integer(4), ElixirScript.Core.BitString.integer(61), ElixirScript.Core.BitString.integer(11), ElixirScript.Core.BitString.integer(106), ElixirScript.Core.BitString.integer(51), ElixirScript.Core.BitString.integer(28), ElixirScript.Core.BitString.integer(215), ElixirScript.Core.BitString.integer(132))], [Symbol.for('module'), Symbol.for('Elixir.UnicodeConversionError')]]);

        const value = __info__map__.get(kind);

        if (value !== null) {
            return value;
        }

        throw new ElixirScript.Core.Patterns.MatchError(kind);
    }

    function __struct__(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return new Map([[Symbol.for('__exception__'), true], [Symbol.for('__struct__'), Elixir.UnicodeConversionError.__load(Elixir)], [Symbol.for('encoded'), null], [Symbol.for('message'), null]]);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('kv576460752303364956')], __function_args__, (kv5764607523033649560) => {
                return true;
            })) !== null) {
                let [kv5764607523033649560] = __arg_matches__;

                const [map5764607523033649560, keys5764607523033649560] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                    values: [ElixirScript.Core.Patterns.variable('map576460752303364956'), ElixirScript.Core.Patterns.variable('keys576460752303364956')]
                }), Elixir.Enum.__load(Elixir).reduce(kv5764607523033649560, new ElixirScript.Core.Tuple(__struct__(), []), (...__function_args__) => {
                    function recur(...__function_args__) {
                        let __arg_matches__ = null;

                        if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                            values: [ElixirScript.Core.Patterns.variable('key576460752303364956'), ElixirScript.Core.Patterns.variable('val576460752303364956')]
                        }), ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                            values: [ElixirScript.Core.Patterns.variable('map576460752303364956'), ElixirScript.Core.Patterns.variable('keys576460752303364956')]
                        })], __function_args__, (key5764607523033649560, val5764607523033649560, map5764607523033649560, keys5764607523033649560) => {
                            return true;
                        })) !== null) {
                            let [key5764607523033649560, val5764607523033649560, map5764607523033649560, keys5764607523033649560] = __arg_matches__;

                            return new ElixirScript.Core.Tuple(ElixirScript.Core.maps.update(key5764607523033649560, val5764607523033649560, map5764607523033649560), Elixir.List.__load(Elixir).__delete__(keys5764607523033649560, key5764607523033649560));
                        }

                        throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
                    }

                    return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
                }));

                const _ref6348245 = new ElixirScript.Core.Tuple(map5764607523033649560, keys5764607523033649560);

                return ElixirScript.Core.Patterns.defmatch(ElixirScript.Core.Patterns.clause([[]], () => {
                    return map5764607523033649560;
                }, () => {
                    return true;
                }), ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.variable('_')], () => {
                    return ElixirScript.Core.erlang.error(Elixir.ArgumentError.__load(Elixir).exception('the following keys must also be given when building ' + ('struct ' + (Elixir.String.Chars.__load(Elixir).to_string(Elixir.Kernel.__load(Elixir).inspect(Elixir.UnicodeConversionError.__load(Elixir))) + (': ' + Elixir.String.Chars.__load(Elixir).to_string(Elixir.Kernel.__load(Elixir).inspect(keys5764607523033649560)))))));
                }, () => {
                    return true;
                })).call(this, keys5764607523033649560);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function detail(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('rest')], __function_args__, (rest0) => {
                return ElixirScript.Core.erlang.is_binary(rest0);
            })) !== null) {
                let [rest0] = __arg_matches__;

                return 'encoding starting at ' + Elixir.String.Chars.__load(Elixir).to_string(Elixir.Kernel.__load(Elixir).inspect(rest0));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.headTail(ElixirScript.Core.Patterns.variable('h'), ElixirScript.Core.Patterns.variable('_'))], __function_args__, (h0) => {
                return ElixirScript.Core.erlang.is_integer(h0);
            })) !== null) {
                let [h0] = __arg_matches__;

                return 'code point ' + Elixir.String.Chars.__load(Elixir).to_string(h0);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.headTail(ElixirScript.Core.Patterns.variable('h'), ElixirScript.Core.Patterns.variable('_'))], __function_args__, (h0) => {
                return true;
            })) !== null) {
                let [h0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, h0));
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function exception(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('opts')], __function_args__, (opts0) => {
                return true;
            })) !== null) {
                let [opts0] = __arg_matches__;

                return Elixir.UnicodeConversionError.__load(Elixir).__struct__(new Map([[Symbol.for('__exception__'), true], [Symbol.for('encoded'), Elixir.Keyword.__load(Elixir).fetch__emark__(opts0, Symbol.for('encoded'))], [Symbol.for('message'), Elixir.String.Chars.__load(Elixir).to_string(Elixir.Keyword.__load(Elixir).fetch__emark__(opts0, Symbol.for('kind'))) + (' ' + Elixir.String.Chars.__load(Elixir).to_string(detail(Elixir.Keyword.__load(Elixir).fetch__emark__(opts0, Symbol.for('rest')))))]]));
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    const __exports = {
        __struct__,
        exception,
        __MODULE__: Symbol.for('Elixir.UnicodeConversionError'),
        __info__
    };

    Elixir.UnicodeConversionError.__exports = __exports

    return __exports;
}
ElixirScript.Core.Functions.build_namespace(Elixir, 'Elixir.List').__load = function(Elixir) {
    if (Elixir.List.__exports)
        return Elixir.List.__exports;

    function __info__(kind) {
        const __info__map__ = new Map([[Symbol.for('functions'), [new ElixirScript.Core.Tuple(Symbol.for('delete'), 2), new ElixirScript.Core.Tuple(Symbol.for('delete_at'), 2), new ElixirScript.Core.Tuple(Symbol.for('duplicate'), 2), new ElixirScript.Core.Tuple(Symbol.for('first'), 1), new ElixirScript.Core.Tuple(Symbol.for('flatten'), 1), new ElixirScript.Core.Tuple(Symbol.for('flatten'), 2), new ElixirScript.Core.Tuple(Symbol.for('foldl'), 3), new ElixirScript.Core.Tuple(Symbol.for('foldr'), 3), new ElixirScript.Core.Tuple(Symbol.for('insert_at'), 3), new ElixirScript.Core.Tuple(Symbol.for('keydelete'), 3), new ElixirScript.Core.Tuple(Symbol.for('keyfind'), 3), new ElixirScript.Core.Tuple(Symbol.for('keyfind'), 4), new ElixirScript.Core.Tuple(Symbol.for('keymember?'), 3), new ElixirScript.Core.Tuple(Symbol.for('keyreplace'), 4), new ElixirScript.Core.Tuple(Symbol.for('keysort'), 2), new ElixirScript.Core.Tuple(Symbol.for('keystore'), 4), new ElixirScript.Core.Tuple(Symbol.for('keytake'), 3), new ElixirScript.Core.Tuple(Symbol.for('last'), 1), new ElixirScript.Core.Tuple(Symbol.for('myers_difference'), 2), new ElixirScript.Core.Tuple(Symbol.for('pop_at'), 2), new ElixirScript.Core.Tuple(Symbol.for('pop_at'), 3), new ElixirScript.Core.Tuple(Symbol.for('replace_at'), 3), new ElixirScript.Core.Tuple(Symbol.for('starts_with?'), 2), new ElixirScript.Core.Tuple(Symbol.for('to_atom'), 1), new ElixirScript.Core.Tuple(Symbol.for('to_existing_atom'), 1), new ElixirScript.Core.Tuple(Symbol.for('to_float'), 1), new ElixirScript.Core.Tuple(Symbol.for('to_integer'), 1), new ElixirScript.Core.Tuple(Symbol.for('to_integer'), 2), new ElixirScript.Core.Tuple(Symbol.for('to_string'), 1), new ElixirScript.Core.Tuple(Symbol.for('to_tuple'), 1), new ElixirScript.Core.Tuple(Symbol.for('update_at'), 3), new ElixirScript.Core.Tuple(Symbol.for('wrap'), 1), new ElixirScript.Core.Tuple(Symbol.for('zip'), 1)]], [Symbol.for('macros'), []], [Symbol.for('attributes'), [new ElixirScript.Core.Tuple(Symbol.for('vsn'), [183401522195816640451078958454226739597])]], [Symbol.for('compile'), [new ElixirScript.Core.Tuple(Symbol.for('options'), []), new ElixirScript.Core.Tuple(Symbol.for('version'), [55, 46, 49, 46, 50]), new ElixirScript.Core.Tuple(Symbol.for('source'), '/private/tmp/elixir-20170929-51947-wgj4qu/elixir-1.5.2/lib/elixir/lib/list.ex')]], [Symbol.for('md5'), new ElixirScript.Core.BitString(ElixirScript.Core.BitString.integer(137), ElixirScript.Core.BitString.integer(249), ElixirScript.Core.BitString.integer(217), ElixirScript.Core.BitString.integer(45), ElixirScript.Core.BitString.integer(23), ElixirScript.Core.BitString.integer(197), ElixirScript.Core.BitString.integer(79), ElixirScript.Core.BitString.integer(84), ElixirScript.Core.BitString.integer(7), ElixirScript.Core.BitString.integer(135), ElixirScript.Core.BitString.integer(36), ElixirScript.Core.BitString.integer(14), ElixirScript.Core.BitString.integer(149), ElixirScript.Core.BitString.integer(94), ElixirScript.Core.BitString.integer(225), ElixirScript.Core.BitString.integer(141))], [Symbol.for('module'), Symbol.for('Elixir.List')]]);

        const value = __info__map__.get(kind);

        if (value !== null) {
            return value;
        }

        throw new ElixirScript.Core.Patterns.MatchError(kind);
    }

    function __delete__(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.headTail(ElixirScript.Core.Patterns.variable('item'), ElixirScript.Core.Patterns.variable('list')), ElixirScript.Core.Patterns.variable('item')], __function_args__, (item0, list0, item1) => {
                return true;
            })) !== null) {
                let [item0, list0, item1] = __arg_matches__;

                return list0;
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.headTail(ElixirScript.Core.Patterns.variable('other'), ElixirScript.Core.Patterns.variable('list')), ElixirScript.Core.Patterns.variable('item')], __function_args__, (other0, list0, item0) => {
                return true;
            })) !== null) {
                let [other0, list0, item0] = __arg_matches__;

                return ElixirScript.Core.Functions.concat(other0, __delete__(list0, item0));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([[], ElixirScript.Core.Patterns.variable('_item')], __function_args__, (_item0) => {
                return true;
            })) !== null) {
                let [_item0] = __arg_matches__;

                return [];
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function to_string(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('list')], __function_args__, (list0) => {
                return ElixirScript.Core.erlang.is_list(list0);
            })) !== null) {
                let [list0] = __arg_matches__;

                return ElixirScript.Core.SpecialForms._try(() => {
                    return ElixirScript.Core.unicode.characters_to_binary(list0);
                }, ElixirScript.Core.Patterns.defmatch(ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.variable('_')], () => {
                    return ElixirScript.Core.erlang.error(Elixir.ArgumentError.__load(Elixir).exception('cannot convert the given list to a string.\n\nTo be converted to a string, a list must contain only:\n\n  * strings\n  * integers representing Unicode codepoints\n  * or a list containing one of these three elements\n\nPlease check the given list or call inspect/1 to get the list representation, got:\n\n' + (Elixir.String.Chars.__load(Elixir).to_string(Elixir.Kernel.__load(Elixir).inspect(list0)) + '\n')));
                }, () => {
                    return Elixir.Enum.__load(Elixir).member__qmark__(_, [Elixir.ArgumentError.__load(Elixir)]);
                })), null, (...__function_args__) => {
                    function recur(...__function_args__) {
                        let __arg_matches__ = null;

                        if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('result')], __function_args__, (result0) => {
                            return ElixirScript.Core.erlang.is_binary(result0);
                        })) !== null) {
                            let [result0] = __arg_matches__;

                            return result0;
                        } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                            values: [Symbol.for('error'), ElixirScript.Core.Patterns.variable('encoded'), ElixirScript.Core.Patterns.variable('rest')]
                        })], __function_args__, (encoded0, rest0) => {
                            return true;
                        })) !== null) {
                            let [encoded0, rest0] = __arg_matches__;

                            return ElixirScript.Core.erlang.error(Elixir.UnicodeConversionError.__load(Elixir).exception([new ElixirScript.Core.Tuple(Symbol.for('encoded'), encoded0), new ElixirScript.Core.Tuple(Symbol.for('rest'), rest0), new ElixirScript.Core.Tuple(Symbol.for('kind'), Symbol.for('invalid'))]));
                        } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                            values: [Symbol.for('incomplete'), ElixirScript.Core.Patterns.variable('encoded'), ElixirScript.Core.Patterns.variable('rest')]
                        })], __function_args__, (encoded0, rest0) => {
                            return true;
                        })) !== null) {
                            let [encoded0, rest0] = __arg_matches__;

                            return ElixirScript.Core.erlang.error(Elixir.UnicodeConversionError.__load(Elixir).exception([new ElixirScript.Core.Tuple(Symbol.for('encoded'), encoded0), new ElixirScript.Core.Tuple(Symbol.for('rest'), rest0), new ElixirScript.Core.Tuple(Symbol.for('kind'), Symbol.for('incomplete'))]));
                        }

                        throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
                    }

                    return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
                }, null);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    const __exports = {
        __delete__,
        to_string,
        __MODULE__: Symbol.for('Elixir.List'),
        __info__
    };

    Elixir.List.__exports = __exports

    return __exports;
}
ElixirScript.Core.Functions.build_namespace(Elixir, 'Elixir.Stream').__load = function(Elixir) {
    if (Elixir.Stream.__exports)
        return Elixir.Stream.__exports;

    function __info__(kind) {
        const __info__map__ = new Map([[Symbol.for('functions'), [new ElixirScript.Core.Tuple(Symbol.for('__struct__'), 0), new ElixirScript.Core.Tuple(Symbol.for('__struct__'), 1), new ElixirScript.Core.Tuple(Symbol.for('chunk'), 2), new ElixirScript.Core.Tuple(Symbol.for('chunk'), 3), new ElixirScript.Core.Tuple(Symbol.for('chunk'), 4), new ElixirScript.Core.Tuple(Symbol.for('chunk_by'), 2), new ElixirScript.Core.Tuple(Symbol.for('chunk_every'), 2), new ElixirScript.Core.Tuple(Symbol.for('chunk_every'), 3), new ElixirScript.Core.Tuple(Symbol.for('chunk_every'), 4), new ElixirScript.Core.Tuple(Symbol.for('chunk_while'), 4), new ElixirScript.Core.Tuple(Symbol.for('concat'), 1), new ElixirScript.Core.Tuple(Symbol.for('concat'), 2), new ElixirScript.Core.Tuple(Symbol.for('cycle'), 1), new ElixirScript.Core.Tuple(Symbol.for('dedup'), 1), new ElixirScript.Core.Tuple(Symbol.for('dedup_by'), 2), new ElixirScript.Core.Tuple(Symbol.for('drop'), 2), new ElixirScript.Core.Tuple(Symbol.for('drop_every'), 2), new ElixirScript.Core.Tuple(Symbol.for('drop_while'), 2), new ElixirScript.Core.Tuple(Symbol.for('each'), 2), new ElixirScript.Core.Tuple(Symbol.for('filter'), 2), new ElixirScript.Core.Tuple(Symbol.for('filter_map'), 3), new ElixirScript.Core.Tuple(Symbol.for('flat_map'), 2), new ElixirScript.Core.Tuple(Symbol.for('interval'), 1), new ElixirScript.Core.Tuple(Symbol.for('into'), 2), new ElixirScript.Core.Tuple(Symbol.for('into'), 3), new ElixirScript.Core.Tuple(Symbol.for('iterate'), 2), new ElixirScript.Core.Tuple(Symbol.for('map'), 2), new ElixirScript.Core.Tuple(Symbol.for('map_every'), 3), new ElixirScript.Core.Tuple(Symbol.for('reject'), 2), new ElixirScript.Core.Tuple(Symbol.for('repeatedly'), 1), new ElixirScript.Core.Tuple(Symbol.for('resource'), 3), new ElixirScript.Core.Tuple(Symbol.for('run'), 1), new ElixirScript.Core.Tuple(Symbol.for('scan'), 2), new ElixirScript.Core.Tuple(Symbol.for('scan'), 3), new ElixirScript.Core.Tuple(Symbol.for('take'), 2), new ElixirScript.Core.Tuple(Symbol.for('take_every'), 2), new ElixirScript.Core.Tuple(Symbol.for('take_while'), 2), new ElixirScript.Core.Tuple(Symbol.for('timer'), 1), new ElixirScript.Core.Tuple(Symbol.for('transform'), 3), new ElixirScript.Core.Tuple(Symbol.for('transform'), 4), new ElixirScript.Core.Tuple(Symbol.for('unfold'), 2), new ElixirScript.Core.Tuple(Symbol.for('uniq'), 1), new ElixirScript.Core.Tuple(Symbol.for('uniq'), 2), new ElixirScript.Core.Tuple(Symbol.for('uniq_by'), 2), new ElixirScript.Core.Tuple(Symbol.for('with_index'), 1), new ElixirScript.Core.Tuple(Symbol.for('with_index'), 2), new ElixirScript.Core.Tuple(Symbol.for('zip'), 1), new ElixirScript.Core.Tuple(Symbol.for('zip'), 2)]], [Symbol.for('macros'), []], [Symbol.for('attributes'), [new ElixirScript.Core.Tuple(Symbol.for('vsn'), [101645120040360073033902312871138972863])]], [Symbol.for('compile'), [new ElixirScript.Core.Tuple(Symbol.for('options'), []), new ElixirScript.Core.Tuple(Symbol.for('version'), [55, 46, 49, 46, 50]), new ElixirScript.Core.Tuple(Symbol.for('source'), '/private/tmp/elixir-20170929-51947-wgj4qu/elixir-1.5.2/lib/elixir/lib/stream.ex')]], [Symbol.for('md5'), new ElixirScript.Core.BitString(ElixirScript.Core.BitString.integer(76), ElixirScript.Core.BitString.integer(120), ElixirScript.Core.BitString.integer(35), ElixirScript.Core.BitString.integer(86), ElixirScript.Core.BitString.integer(128), ElixirScript.Core.BitString.integer(91), ElixirScript.Core.BitString.integer(19), ElixirScript.Core.BitString.integer(6), ElixirScript.Core.BitString.integer(3), ElixirScript.Core.BitString.integer(51), ElixirScript.Core.BitString.integer(162), ElixirScript.Core.BitString.integer(90), ElixirScript.Core.BitString.integer(72), ElixirScript.Core.BitString.integer(4), ElixirScript.Core.BitString.integer(84), ElixirScript.Core.BitString.integer(191))], [Symbol.for('module'), Symbol.for('Elixir.Stream')]]);

        const value = __info__map__.get(kind);

        if (value !== null) {
            return value;
        }

        throw new ElixirScript.Core.Patterns.MatchError(kind);
    }

    function __struct__(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return new Map([[Symbol.for('__struct__'), Elixir.Stream.__load(Elixir)], [Symbol.for('accs'), []], [Symbol.for('done'), null], [Symbol.for('enum'), null], [Symbol.for('funs'), []]]);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('kv576460752303302078')], __function_args__, (kv5764607523033020780) => {
                return true;
            })) !== null) {
                let [kv5764607523033020780] = __arg_matches__;

                const [map5764607523033020780, keys5764607523033020780] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                    values: [ElixirScript.Core.Patterns.variable('map576460752303302078'), ElixirScript.Core.Patterns.variable('keys576460752303302078')]
                }), Elixir.Enum.__load(Elixir).reduce(kv5764607523033020780, new ElixirScript.Core.Tuple(__struct__(), []), (...__function_args__) => {
                    function recur(...__function_args__) {
                        let __arg_matches__ = null;

                        if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                            values: [ElixirScript.Core.Patterns.variable('key576460752303302078'), ElixirScript.Core.Patterns.variable('val576460752303302078')]
                        }), ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                            values: [ElixirScript.Core.Patterns.variable('map576460752303302078'), ElixirScript.Core.Patterns.variable('keys576460752303302078')]
                        })], __function_args__, (key5764607523033020780, val5764607523033020780, map5764607523033020780, keys5764607523033020780) => {
                            return true;
                        })) !== null) {
                            let [key5764607523033020780, val5764607523033020780, map5764607523033020780, keys5764607523033020780] = __arg_matches__;

                            return new ElixirScript.Core.Tuple(ElixirScript.Core.maps.update(key5764607523033020780, val5764607523033020780, map5764607523033020780), Elixir.List.__load(Elixir).__delete__(keys5764607523033020780, key5764607523033020780));
                        }

                        throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
                    }

                    return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
                }));

                const _ref7496014 = new ElixirScript.Core.Tuple(map5764607523033020780, keys5764607523033020780);

                return ElixirScript.Core.Patterns.defmatch(ElixirScript.Core.Patterns.clause([[]], () => {
                    return map5764607523033020780;
                }, () => {
                    return true;
                }), ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.variable('_')], () => {
                    return ElixirScript.Core.erlang.error(Elixir.ArgumentError.__load(Elixir).exception('the following keys must also be given when building ' + ('struct ' + (Elixir.String.Chars.__load(Elixir).to_string(Elixir.Kernel.__load(Elixir).inspect(Elixir.Stream.__load(Elixir))) + (': ' + Elixir.String.Chars.__load(Elixir).to_string(Elixir.Kernel.__load(Elixir).inspect(keys5764607523033020780)))))));
                }, () => {
                    return true;
                })).call(this, keys5764607523033020780);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function do_enum_resource(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('next_acc'), ElixirScript.Core.Patterns.variable('next_fun'), ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                values: [ElixirScript.Core.Patterns.variable('op'), ElixirScript.Core.Patterns.variable('acc')]
            }), ElixirScript.Core.Patterns.variable('fun'), ElixirScript.Core.Patterns.variable('after_fun'), ElixirScript.Core.Patterns.variable('reduce')], __function_args__, (next_acc0, next_fun0, op0, acc0, fun0, after_fun0, reduce0) => {
                return true;
            })) !== null) {
                let [next_acc0, next_fun0, op0, acc0, fun0, after_fun0, reduce0] = __arg_matches__;

                return ElixirScript.Core.SpecialForms._try(() => {
                    return reduce0(new ElixirScript.Core.Tuple(op0, ElixirScript.Core.Functions.concat(Symbol.for('outer'), acc0)));
                }, null, (...__function_args__) => {
                    function recur(...__function_args__) {
                        let __arg_matches__ = null;

                        if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('kind'), ElixirScript.Core.Patterns.variable('reason')], __function_args__, (kind0, reason0) => {
                            return true;
                        })) !== null) {
                            let [kind0, reason0] = __arg_matches__;

                            const [stacktrace0] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.variable('stacktrace'), ElixirScript.Core.Functions.call_property(ElixirScript.Core.erlang.get_stacktrace));

                            after_fun0(next_acc0)

                            return ElixirScript.Core.erlang.raise(kind0, reason0, stacktrace0);
                        }

                        throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
                    }

                    return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
                }, (...__function_args__) => {
                    function recur(...__function_args__) {
                        let __arg_matches__ = null;

                        if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                            values: [Symbol.for('halted'), ElixirScript.Core.Patterns.headTail(Symbol.for('outer'), ElixirScript.Core.Patterns.variable('acc'))]
                        })], __function_args__, (acc1) => {
                            return true;
                        })) !== null) {
                            let [acc1] = __arg_matches__;

                            return do_resource(next_acc0, next_fun0, new ElixirScript.Core.Tuple(Symbol.for('cont'), acc1), fun0, after_fun0);
                        } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                            values: [Symbol.for('halted'), ElixirScript.Core.Patterns.headTail(Symbol.for('inner'), ElixirScript.Core.Patterns.variable('acc'))]
                        })], __function_args__, (acc1) => {
                            return true;
                        })) !== null) {
                            let [acc1] = __arg_matches__;

                            return do_resource(next_acc0, next_fun0, new ElixirScript.Core.Tuple(Symbol.for('halt'), acc1), fun0, after_fun0);
                        } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                            values: [Symbol.for('done'), ElixirScript.Core.Patterns.headTail(ElixirScript.Core.Patterns.variable('_'), ElixirScript.Core.Patterns.variable('acc'))]
                        })], __function_args__, (acc1) => {
                            return true;
                        })) !== null) {
                            let [acc1] = __arg_matches__;

                            return do_resource(next_acc0, next_fun0, new ElixirScript.Core.Tuple(Symbol.for('cont'), acc1), fun0, after_fun0);
                        } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                            values: [Symbol.for('suspended'), ElixirScript.Core.Patterns.headTail(ElixirScript.Core.Patterns.variable('_'), ElixirScript.Core.Patterns.variable('acc')), ElixirScript.Core.Patterns.variable('c')]
                        })], __function_args__, (acc1, c0) => {
                            return true;
                        })) !== null) {
                            let [acc1, c0] = __arg_matches__;

                            return new ElixirScript.Core.Tuple(Symbol.for('suspended'), acc1, (...__function_args__) => {
                                function recur(...__function_args__) {
                                    let __arg_matches__ = null;

                                    if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('x1')], __function_args__, (x10) => {
                                        return true;
                                    })) !== null) {
                                        let [x10] = __arg_matches__;

                                        return do_enum_resource(next_acc0, next_fun0, x10, fun0, after_fun0, c0);
                                    }

                                    throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
                                }

                                return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
                            });
                        }

                        throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
                    }

                    return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
                }, null);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function do_list_resource(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('next_acc'), ElixirScript.Core.Patterns.variable('next_fun'), ElixirScript.Core.Patterns.variable('acc'), ElixirScript.Core.Patterns.variable('fun'), ElixirScript.Core.Patterns.variable('after_fun'), ElixirScript.Core.Patterns.variable('reduce')], __function_args__, (next_acc0, next_fun0, acc0, fun0, after_fun0, reduce0) => {
                return true;
            })) !== null) {
                let [next_acc0, next_fun0, acc0, fun0, after_fun0, reduce0] = __arg_matches__;

                return ElixirScript.Core.SpecialForms._try(() => {
                    return reduce0(acc0);
                }, null, (...__function_args__) => {
                    function recur(...__function_args__) {
                        let __arg_matches__ = null;

                        if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('kind'), ElixirScript.Core.Patterns.variable('reason')], __function_args__, (kind0, reason0) => {
                            return true;
                        })) !== null) {
                            let [kind0, reason0] = __arg_matches__;

                            const [stacktrace0] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.variable('stacktrace'), ElixirScript.Core.Functions.call_property(ElixirScript.Core.erlang.get_stacktrace));

                            after_fun0(next_acc0)

                            return ElixirScript.Core.erlang.raise(kind0, reason0, stacktrace0);
                        }

                        throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
                    }

                    return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
                }, (...__function_args__) => {
                    function recur(...__function_args__) {
                        let __arg_matches__ = null;

                        if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                            values: [Symbol.for('done'), ElixirScript.Core.Patterns.variable('acc')]
                        })], __function_args__, (acc1) => {
                            return true;
                        })) !== null) {
                            let [acc1] = __arg_matches__;

                            return do_resource(next_acc0, next_fun0, new ElixirScript.Core.Tuple(Symbol.for('cont'), acc1), fun0, after_fun0);
                        } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                            values: [Symbol.for('halted'), ElixirScript.Core.Patterns.variable('acc')]
                        })], __function_args__, (acc1) => {
                            return true;
                        })) !== null) {
                            let [acc1] = __arg_matches__;

                            return do_resource(next_acc0, next_fun0, new ElixirScript.Core.Tuple(Symbol.for('halt'), acc1), fun0, after_fun0);
                        } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                            values: [Symbol.for('suspended'), ElixirScript.Core.Patterns.variable('acc'), ElixirScript.Core.Patterns.variable('c')]
                        })], __function_args__, (acc1, c0) => {
                            return true;
                        })) !== null) {
                            let [acc1, c0] = __arg_matches__;

                            return new ElixirScript.Core.Tuple(Symbol.for('suspended'), acc1, (...__function_args__) => {
                                function recur(...__function_args__) {
                                    let __arg_matches__ = null;

                                    if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('x1')], __function_args__, (x10) => {
                                        return true;
                                    })) !== null) {
                                        let [x10] = __arg_matches__;

                                        return do_list_resource(next_acc0, next_fun0, x10, fun0, after_fun0, c0);
                                    }

                                    throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
                                }

                                return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
                            });
                        }

                        throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
                    }

                    return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
                }, null);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function do_resource(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('next_acc'), ElixirScript.Core.Patterns.variable('next_fun'), ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                values: [Symbol.for('suspend'), ElixirScript.Core.Patterns.variable('acc')]
            }), ElixirScript.Core.Patterns.variable('fun'), ElixirScript.Core.Patterns.variable('after_fun')], __function_args__, (next_acc0, next_fun0, acc0, fun0, after_fun0) => {
                return true;
            })) !== null) {
                let [next_acc0, next_fun0, acc0, fun0, after_fun0] = __arg_matches__;

                return new ElixirScript.Core.Tuple(Symbol.for('suspended'), acc0, (...__function_args__) => {
                    function recur(...__function_args__) {
                        let __arg_matches__ = null;

                        if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('x1')], __function_args__, (x10) => {
                            return true;
                        })) !== null) {
                            let [x10] = __arg_matches__;

                            return do_resource(next_acc0, next_fun0, x10, fun0, after_fun0);
                        }

                        throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
                    }

                    return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
                });
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('next_acc'), ElixirScript.Core.Patterns.variable('_next_fun'), ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                values: [Symbol.for('halt'), ElixirScript.Core.Patterns.variable('acc')]
            }), ElixirScript.Core.Patterns.variable('_fun'), ElixirScript.Core.Patterns.variable('after_fun')], __function_args__, (next_acc0, _next_fun0, acc0, _fun0, after_fun0) => {
                return true;
            })) !== null) {
                let [next_acc0, _next_fun0, acc0, _fun0, after_fun0] = __arg_matches__;

                after_fun0(next_acc0)

                return new ElixirScript.Core.Tuple(Symbol.for('halted'), acc0);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('next_acc'), ElixirScript.Core.Patterns.variable('next_fun'), ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                values: [Symbol.for('cont'), ElixirScript.Core.Patterns.variable('acc')]
            }), ElixirScript.Core.Patterns.variable('fun'), ElixirScript.Core.Patterns.variable('after_fun')], __function_args__, (next_acc0, next_fun0, acc0, fun0, after_fun0) => {
                return true;
            })) !== null) {
                let [next_acc0, next_fun0, acc0, fun0, after_fun0] = __arg_matches__;

                return ElixirScript.Core.SpecialForms._try(() => {
                    return ElixirScript.Core.Patterns.defmatch(ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                        values: [[], ElixirScript.Core.Patterns.variable('next_acc')]
                    })], (next_acc1) => {
                        return new ElixirScript.Core.Tuple(Symbol.for('opt'), new ElixirScript.Core.Tuple(Symbol.for('cont'), acc0), next_acc1);
                    }, (next_acc1) => {
                        return true;
                    }), ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                        values: [[ElixirScript.Core.Patterns.variable('v')], ElixirScript.Core.Patterns.variable('next_acc')]
                    })], (v0, next_acc1) => {
                        return new ElixirScript.Core.Tuple(Symbol.for('opt'), fun0(v0, acc0), next_acc1);
                    }, (v0, next_acc1) => {
                        return true;
                    }), ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.capture(ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                        values: [ElixirScript.Core.Patterns.variable('_'), ElixirScript.Core.Patterns.variable('_')]
                    }))], (other0) => {
                        return other0;
                    }, (other0) => {
                        return true;
                    })).call(this, next_fun0(next_acc0));
                }, null, (...__function_args__) => {
                    function recur(...__function_args__) {
                        let __arg_matches__ = null;

                        if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('kind'), ElixirScript.Core.Patterns.variable('reason')], __function_args__, (kind0, reason0) => {
                            return true;
                        })) !== null) {
                            let [kind0, reason0] = __arg_matches__;

                            const [stacktrace0] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.variable('stacktrace'), ElixirScript.Core.Functions.call_property(ElixirScript.Core.erlang.get_stacktrace));

                            after_fun0(next_acc0)

                            return ElixirScript.Core.erlang.raise(kind0, reason0, stacktrace0);
                        }

                        throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
                    }

                    return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
                }, (...__function_args__) => {
                    function recur(...__function_args__) {
                        let __arg_matches__ = null;

                        if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                            values: [Symbol.for('opt'), ElixirScript.Core.Patterns.variable('acc'), ElixirScript.Core.Patterns.variable('next_acc')]
                        })], __function_args__, (acc1, next_acc1) => {
                            return true;
                        })) !== null) {
                            let [acc1, next_acc1] = __arg_matches__;

                            return do_resource(next_acc1, next_fun0, acc1, fun0, after_fun0);
                        } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                            values: [Symbol.for('halt'), ElixirScript.Core.Patterns.variable('next_acc')]
                        })], __function_args__, (next_acc1) => {
                            return true;
                        })) !== null) {
                            let [next_acc1] = __arg_matches__;

                            return do_resource(next_acc1, next_fun0, new ElixirScript.Core.Tuple(Symbol.for('halt'), acc0), fun0, after_fun0);
                        } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                            values: [ElixirScript.Core.Patterns.variable('list'), ElixirScript.Core.Patterns.variable('next_acc')]
                        })], __function_args__, (list0, next_acc1) => {
                            return ElixirScript.Core.erlang.is_list(list0);
                        })) !== null) {
                            let [list0, next_acc1] = __arg_matches__;

                            return do_list_resource(next_acc1, next_fun0, new ElixirScript.Core.Tuple(Symbol.for('cont'), acc0), fun0, after_fun0, (...__function_args__) => {
                                function recur(...__function_args__) {
                                    let __arg_matches__ = null;

                                    if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('x1')], __function_args__, (x10) => {
                                        return true;
                                    })) !== null) {
                                        let [x10] = __arg_matches__;

                                        return Elixir.Enumerable.List.__load(Elixir).reduce(list0, x10, fun0);
                                    }

                                    throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
                                }

                                return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
                            });
                        } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                            values: [ElixirScript.Core.Patterns.variable('enum'), ElixirScript.Core.Patterns.variable('next_acc')]
                        })], __function_args__, (enum0, next_acc1) => {
                            return true;
                        })) !== null) {
                            let [enum0, next_acc1] = __arg_matches__;

                            const [inner0] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.variable('inner'), (...__function_args__) => {
                                function recur(...__function_args__) {
                                    let __arg_matches__ = null;

                                    if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('x1'), ElixirScript.Core.Patterns.variable('x2')], __function_args__, (x10, x20) => {
                                        return true;
                                    })) !== null) {
                                        let [x10, x20] = __arg_matches__;

                                        return do_resource_each(x10, x20, fun0);
                                    }

                                    throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
                                }

                                return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
                            });

                            return do_enum_resource(next_acc1, next_fun0, new ElixirScript.Core.Tuple(Symbol.for('cont'), acc0), fun0, after_fun0, (...__function_args__) => {
                                function recur(...__function_args__) {
                                    let __arg_matches__ = null;

                                    if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('x1')], __function_args__, (x10) => {
                                        return true;
                                    })) !== null) {
                                        let [x10] = __arg_matches__;

                                        return Elixir.Enumerable.__load(Elixir).reduce(enum0, x10, inner0);
                                    }

                                    throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
                                }

                                return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
                            });
                        }

                        throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
                    }

                    return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
                }, null);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function do_resource_each(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('x'), ElixirScript.Core.Patterns.headTail(Symbol.for('outer'), ElixirScript.Core.Patterns.variable('acc')), ElixirScript.Core.Patterns.variable('f')], __function_args__, (x0, acc0, f0) => {
                return true;
            })) !== null) {
                let [x0, acc0, f0] = __arg_matches__;

                return ElixirScript.Core.Patterns.defmatch(ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                    values: [Symbol.for('halt'), ElixirScript.Core.Patterns.variable('res')]
                })], (res0) => {
                    return new ElixirScript.Core.Tuple(Symbol.for('halt'), ElixirScript.Core.Functions.concat(Symbol.for('inner'), res0));
                }, (res0) => {
                    return true;
                }), ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                    values: [ElixirScript.Core.Patterns.variable('op'), ElixirScript.Core.Patterns.variable('res')]
                })], (op0, res0) => {
                    return new ElixirScript.Core.Tuple(op0, ElixirScript.Core.Functions.concat(Symbol.for('outer'), res0));
                }, (op0, res0) => {
                    return true;
                })).call(this, f0(x0, acc0));
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function resource(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('start_fun'), ElixirScript.Core.Patterns.variable('next_fun'), ElixirScript.Core.Patterns.variable('after_fun')], __function_args__, (start_fun0, next_fun0, after_fun0) => {
                return true;
            })) !== null) {
                let [start_fun0, next_fun0, after_fun0] = __arg_matches__;

                return (...__function_args__) => {
                    function recur(...__function_args__) {
                        let __arg_matches__ = null;

                        if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('x1'), ElixirScript.Core.Patterns.variable('x2')], __function_args__, (x10, x20) => {
                            return true;
                        })) !== null) {
                            let [x10, x20] = __arg_matches__;

                            return do_resource(ElixirScript.Core.Functions.call_property(start_fun0), next_fun0, x10, x20, after_fun0);
                        }

                        throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
                    }

                    return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
                };
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    const __exports = {
        __struct__,
        resource,
        __MODULE__: Symbol.for('Elixir.Stream'),
        __info__
    };

    Elixir.Stream.__exports = __exports

    return __exports;
}
ElixirScript.Core.Functions.build_namespace(Elixir, 'Elixir.Inspect.Map').__load = function(Elixir) {
    if (Elixir.Inspect.Map.__exports)
        return Elixir.Inspect.Map.__exports;

    function __info__(kind) {
        const __info__map__ = new Map([[Symbol.for('functions'), [new ElixirScript.Core.Tuple(Symbol.for('__impl__'), 1), new ElixirScript.Core.Tuple(Symbol.for('inspect'), 2), new ElixirScript.Core.Tuple(Symbol.for('inspect'), 3)]], [Symbol.for('macros'), []], [Symbol.for('attributes'), [new ElixirScript.Core.Tuple(Symbol.for('vsn'), [327352431873059261457275411920229861072]), new ElixirScript.Core.Tuple(Symbol.for('behaviour'), [Elixir.Inspect.__load(Elixir)]), new ElixirScript.Core.Tuple(Symbol.for('protocol_impl'), [new ElixirScript.Core.Tuple(Symbol.for('protocol'), Elixir.Inspect.__load(Elixir)), new ElixirScript.Core.Tuple(Symbol.for('for'), Elixir.Map.__load(Elixir))])]], [Symbol.for('compile'), [new ElixirScript.Core.Tuple(Symbol.for('options'), []), new ElixirScript.Core.Tuple(Symbol.for('version'), [55, 46, 49, 46, 50]), new ElixirScript.Core.Tuple(Symbol.for('source'), '/private/tmp/elixir-20170929-51947-wgj4qu/elixir-1.5.2/lib/elixir/lib/inspect.ex')]], [Symbol.for('md5'), new ElixirScript.Core.BitString(ElixirScript.Core.BitString.integer(246), ElixirScript.Core.BitString.integer(69), ElixirScript.Core.BitString.integer(200), ElixirScript.Core.BitString.integer(251), ElixirScript.Core.BitString.integer(189), ElixirScript.Core.BitString.integer(40), ElixirScript.Core.BitString.integer(107), ElixirScript.Core.BitString.integer(163), ElixirScript.Core.BitString.integer(181), ElixirScript.Core.BitString.integer(151), ElixirScript.Core.BitString.integer(58), ElixirScript.Core.BitString.integer(41), ElixirScript.Core.BitString.integer(117), ElixirScript.Core.BitString.integer(217), ElixirScript.Core.BitString.integer(134), ElixirScript.Core.BitString.integer(208))], [Symbol.for('module'), Symbol.for('Elixir.Inspect.Map')]]);

        const value = __info__map__.get(kind);

        if (value !== null) {
            return value;
        }

        throw new ElixirScript.Core.Patterns.MatchError(kind);
    }

    function __impl__(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('for')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.Map.__load(Elixir);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('target')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.Inspect.Map.__load(Elixir);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('protocol')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.Inspect.__load(Elixir);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function inspect(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('map'), ElixirScript.Core.Patterns.variable('opts')], __function_args__, (map0, opts0) => {
                return true;
            })) !== null) {
                let [map0, opts0] = __arg_matches__;

                return Elixir.Inspect.Algebra.__load(Elixir).nest(inspect(map0, '', opts0), 1);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('map'), ElixirScript.Core.Patterns.variable('name'), ElixirScript.Core.Patterns.variable('opts')], __function_args__, (map0, name0, opts0) => {
                return true;
            })) !== null) {
                let [map0, name0, opts0] = __arg_matches__;

                const [map1] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.variable('map'), ElixirScript.Core.maps.to_list(map0));

                const [open0] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.variable('open'), Elixir.Inspect.Algebra.__load(Elixir).color('%' + (name0 + '{'), Symbol.for('map'), opts0));

                const [sep0] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.variable('sep'), Elixir.Inspect.Algebra.__load(Elixir).color(',', Symbol.for('map'), opts0));

                const [close0] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.variable('close'), Elixir.Inspect.Algebra.__load(Elixir).color('}', Symbol.for('map'), opts0));

                return Elixir.Inspect.Algebra.__load(Elixir).surround_many(open0, map1, close0, opts0, traverse_fun(map1, opts0), sep0);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function to_map(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                values: [ElixirScript.Core.Patterns.variable('key'), ElixirScript.Core.Patterns.variable('value')]
            }), ElixirScript.Core.Patterns.variable('opts'), ElixirScript.Core.Patterns.variable('sep')], __function_args__, (key0, value0, opts0, sep0) => {
                return true;
            })) !== null) {
                let [key0, value0, opts0, sep0] = __arg_matches__;

                return Elixir.Inspect.Algebra.__load(Elixir).concat(Elixir.Inspect.Algebra.__load(Elixir).concat(Elixir.Inspect.Algebra.__load(Elixir).to_doc(key0, opts0), sep0), Elixir.Inspect.Algebra.__load(Elixir).to_doc(value0, opts0));
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function traverse_fun(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('list'), ElixirScript.Core.Patterns.variable('opts')], __function_args__, (list0, opts0) => {
                return true;
            })) !== null) {
                let [list0, opts0] = __arg_matches__;

                return ElixirScript.Core.Patterns.defmatch(ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.variable('x576460752303363903')], (x5764607523033639030) => {
                    const [sep0] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.variable('sep'), Elixir.Inspect.Algebra.__load(Elixir).color(' => ', Symbol.for('map'), opts0));

                    return (...__function_args__) => {
                        function recur(...__function_args__) {
                            let __arg_matches__ = null;

                            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('x1'), ElixirScript.Core.Patterns.variable('x2')], __function_args__, (x10, x20) => {
                                return true;
                            })) !== null) {
                                let [x10, x20] = __arg_matches__;

                                return to_map(x10, x20, sep0);
                            }

                            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
                        }

                        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
                    };
                }, (x5764607523033639030) => {
                    return x5764607523033639030 === null || x5764607523033639030 === false;
                }), ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.variable('_')], () => {
                    return Elixir.Inspect.List.__load(Elixir).keyword;
                }, () => {
                    return true;
                })).call(this, Elixir.Inspect.List.__load(Elixir).keyword__qmark__(list0));
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    const __exports = {
        __impl__,
        inspect,
        __MODULE__: Symbol.for('Elixir.Inspect.Map'),
        __info__
    };

    Elixir.Inspect.Map.__exports = __exports

    return __exports;
}
ElixirScript.Core.Functions.build_namespace(Elixir, 'Elixir.Enumerable.Range').__load = function(Elixir) {
    if (Elixir.Enumerable.Range.__exports)
        return Elixir.Enumerable.Range.__exports;

    function __info__(kind) {
        const __info__map__ = new Map([[Symbol.for('functions'), [new ElixirScript.Core.Tuple(Symbol.for('__impl__'), 1), new ElixirScript.Core.Tuple(Symbol.for('count'), 1), new ElixirScript.Core.Tuple(Symbol.for('member?'), 2), new ElixirScript.Core.Tuple(Symbol.for('reduce'), 3)]], [Symbol.for('macros'), []], [Symbol.for('attributes'), [new ElixirScript.Core.Tuple(Symbol.for('vsn'), [306333069189756390115746965732200287761]), new ElixirScript.Core.Tuple(Symbol.for('behaviour'), [Elixir.Enumerable.__load(Elixir)]), new ElixirScript.Core.Tuple(Symbol.for('protocol_impl'), [new ElixirScript.Core.Tuple(Symbol.for('protocol'), Elixir.Enumerable.__load(Elixir)), new ElixirScript.Core.Tuple(Symbol.for('for'), Elixir.Range.__load(Elixir))])]], [Symbol.for('compile'), [new ElixirScript.Core.Tuple(Symbol.for('options'), []), new ElixirScript.Core.Tuple(Symbol.for('version'), [55, 46, 49, 46, 50]), new ElixirScript.Core.Tuple(Symbol.for('source'), '/private/tmp/elixir-20170929-51947-wgj4qu/elixir-1.5.2/lib/elixir/lib/range.ex')]], [Symbol.for('md5'), new ElixirScript.Core.BitString(ElixirScript.Core.BitString.integer(230), ElixirScript.Core.BitString.integer(117), ElixirScript.Core.BitString.integer(154), ElixirScript.Core.BitString.integer(100), ElixirScript.Core.BitString.integer(41), ElixirScript.Core.BitString.integer(159), ElixirScript.Core.BitString.integer(179), ElixirScript.Core.BitString.integer(44), ElixirScript.Core.BitString.integer(116), ElixirScript.Core.BitString.integer(158), ElixirScript.Core.BitString.integer(23), ElixirScript.Core.BitString.integer(129), ElixirScript.Core.BitString.integer(140), ElixirScript.Core.BitString.integer(220), ElixirScript.Core.BitString.integer(14), ElixirScript.Core.BitString.integer(17))], [Symbol.for('module'), Symbol.for('Elixir.Enumerable.Range')]]);

        const value = __info__map__.get(kind);

        if (value !== null) {
            return value;
        }

        throw new ElixirScript.Core.Patterns.MatchError(kind);
    }

    function __impl__(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('for')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.Range.__load(Elixir);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('target')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.Enumerable.Range.__load(Elixir);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('protocol')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.Enumerable.__load(Elixir);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function count(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([new Map([[Symbol.for('__struct__'), Elixir.Range.__load(Elixir)], [Symbol.for('first'), ElixirScript.Core.Patterns.variable('first')], [Symbol.for('last'), ElixirScript.Core.Patterns.variable('last')]])], __function_args__, (first0, last0) => {
                return true;
            })) !== null) {
                let [first0, last0] = __arg_matches__;

                return ElixirScript.Core.Patterns.defmatch(ElixirScript.Core.Patterns.clause([false], () => {
                    return new ElixirScript.Core.Tuple(Symbol.for('ok'), first0 - last0 + 1);
                }, () => {
                    return true;
                }), ElixirScript.Core.Patterns.clause([true], () => {
                    return new ElixirScript.Core.Tuple(Symbol.for('ok'), last0 - first0 + 1);
                }, () => {
                    return true;
                })).call(this, first0 <= last0);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function member__qmark__(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([new Map([[Symbol.for('__struct__'), Elixir.Range.__load(Elixir)], [Symbol.for('first'), ElixirScript.Core.Patterns.variable('first')], [Symbol.for('last'), ElixirScript.Core.Patterns.variable('last')]]), ElixirScript.Core.Patterns.variable('value')], __function_args__, (first0, last0, value0) => {
                return ElixirScript.Core.erlang.is_integer(value0);
            })) !== null) {
                let [first0, last0, value0] = __arg_matches__;

                return ElixirScript.Core.Patterns.defmatch(ElixirScript.Core.Patterns.clause([false], () => {
                    return new ElixirScript.Core.Tuple(Symbol.for('ok'), ElixirScript.Core.Patterns.defmatch(ElixirScript.Core.Patterns.clause([true], () => {
                        return value0 <= first0;
                    }, () => {
                        return true;
                    }), ElixirScript.Core.Patterns.clause([false], () => {
                        return false;
                    }, () => {
                        return true;
                    })).call(this, last0 <= value0));
                }, () => {
                    return true;
                }), ElixirScript.Core.Patterns.clause([true], () => {
                    return new ElixirScript.Core.Tuple(Symbol.for('ok'), ElixirScript.Core.Patterns.defmatch(ElixirScript.Core.Patterns.clause([true], () => {
                        return value0 <= last0;
                    }, () => {
                        return true;
                    }), ElixirScript.Core.Patterns.clause([false], () => {
                        return false;
                    }, () => {
                        return true;
                    })).call(this, first0 <= value0));
                }, () => {
                    return true;
                })).call(this, first0 <= last0);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([new Map([[Symbol.for('__struct__'), Elixir.Range.__load(Elixir)], [Symbol.for('first'), ElixirScript.Core.Patterns.variable('_')], [Symbol.for('last'), ElixirScript.Core.Patterns.variable('_')]]), ElixirScript.Core.Patterns.variable('_value')], __function_args__, (_value0) => {
                return true;
            })) !== null) {
                let [_value0] = __arg_matches__;

                return new ElixirScript.Core.Tuple(Symbol.for('ok'), false);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function reduce(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([new Map([[Symbol.for('__struct__'), Elixir.Range.__load(Elixir)], [Symbol.for('first'), ElixirScript.Core.Patterns.variable('first')], [Symbol.for('last'), ElixirScript.Core.Patterns.variable('last')]]), ElixirScript.Core.Patterns.variable('acc'), ElixirScript.Core.Patterns.variable('fun')], __function_args__, (first0, last0, acc0, fun0) => {
                return true;
            })) !== null) {
                let [first0, last0, acc0, fun0] = __arg_matches__;

                const [_up__qmark__0] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.variable('_up?'), last0 >= first0);

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, first0, last0, acc0, fun0, _up__qmark__0));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('_x'), ElixirScript.Core.Patterns.variable('_y'), ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                values: [Symbol.for('halt'), ElixirScript.Core.Patterns.variable('acc')]
            }), ElixirScript.Core.Patterns.variable('_fun'), ElixirScript.Core.Patterns.variable('_up?')], __function_args__, (_x0, _y0, acc0, _fun0, _up__qmark__0) => {
                return true;
            })) !== null) {
                let [_x0, _y0, acc0, _fun0, _up__qmark__0] = __arg_matches__;

                return new ElixirScript.Core.Tuple(Symbol.for('halted'), acc0);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('x'), ElixirScript.Core.Patterns.variable('y'), ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                values: [Symbol.for('suspend'), ElixirScript.Core.Patterns.variable('acc')]
            }), ElixirScript.Core.Patterns.variable('fun'), ElixirScript.Core.Patterns.variable('up?')], __function_args__, (x0, y0, acc0, fun0, up__qmark__0) => {
                return true;
            })) !== null) {
                let [x0, y0, acc0, fun0, up__qmark__0] = __arg_matches__;

                return new ElixirScript.Core.Tuple(Symbol.for('suspended'), acc0, (...__function_args__) => {
                    function recur(...__function_args__) {
                        let __arg_matches__ = null;

                        if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('x1')], __function_args__, (x10) => {
                            return true;
                        })) !== null) {
                            let [x10] = __arg_matches__;

                            return reduce(x0, y0, x10, fun0, up__qmark__0);
                        }

                        throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
                    }

                    return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
                });
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('x'), ElixirScript.Core.Patterns.variable('y'), ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                values: [Symbol.for('cont'), ElixirScript.Core.Patterns.variable('acc')]
            }), ElixirScript.Core.Patterns.variable('fun'), ElixirScript.Core.Patterns.capture(true)], __function_args__, (x0, y0, acc0, fun0, _up__qmark__0) => {
                return x0 <= y0;
            })) !== null) {
                let [x0, y0, acc0, fun0, _up__qmark__0] = __arg_matches__;

                const [_up__qmark__1] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.variable('_up?'), true);

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, x0 + 1, y0, fun0(x0, acc0), fun0, _up__qmark__1));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('x'), ElixirScript.Core.Patterns.variable('y'), ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                values: [Symbol.for('cont'), ElixirScript.Core.Patterns.variable('acc')]
            }), ElixirScript.Core.Patterns.variable('fun'), ElixirScript.Core.Patterns.capture(false)], __function_args__, (x0, y0, acc0, fun0, _up__qmark__0) => {
                return x0 >= y0;
            })) !== null) {
                let [x0, y0, acc0, fun0, _up__qmark__0] = __arg_matches__;

                const [_up__qmark__1] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.variable('_up?'), false);

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, x0 - 1, y0, fun0(x0, acc0), fun0, _up__qmark__1));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('_'), ElixirScript.Core.Patterns.variable('_'), ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                values: [Symbol.for('cont'), ElixirScript.Core.Patterns.variable('acc')]
            }), ElixirScript.Core.Patterns.variable('_fun'), ElixirScript.Core.Patterns.variable('_up')], __function_args__, (acc0, _fun0, _up0) => {
                return true;
            })) !== null) {
                let [acc0, _fun0, _up0] = __arg_matches__;

                return new ElixirScript.Core.Tuple(Symbol.for('done'), acc0);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    const __exports = {
        __impl__,
        count,
        member__qmark__,
        reduce,
        __MODULE__: Symbol.for('Elixir.Enumerable.Range'),
        __info__
    };

    Elixir.Enumerable.Range.__exports = __exports

    return __exports;
}
ElixirScript.Core.Functions.build_namespace(Elixir, 'Elixir.Enumerable.GenEvent.Stream').__load = function(Elixir) {
    if (Elixir.Enumerable.GenEvent.Stream.__exports)
        return Elixir.Enumerable.GenEvent.Stream.__exports;

    function __info__(kind) {
        const __info__map__ = new Map([[Symbol.for('functions'), [new ElixirScript.Core.Tuple(Symbol.for('__impl__'), 1), new ElixirScript.Core.Tuple(Symbol.for('count'), 1), new ElixirScript.Core.Tuple(Symbol.for('member?'), 2), new ElixirScript.Core.Tuple(Symbol.for('reduce'), 3)]], [Symbol.for('macros'), []], [Symbol.for('attributes'), [new ElixirScript.Core.Tuple(Symbol.for('vsn'), [323584373943665429256416732530077070400]), new ElixirScript.Core.Tuple(Symbol.for('behaviour'), [Elixir.Enumerable.__load(Elixir)]), new ElixirScript.Core.Tuple(Symbol.for('protocol_impl'), [new ElixirScript.Core.Tuple(Symbol.for('protocol'), Elixir.Enumerable.__load(Elixir)), new ElixirScript.Core.Tuple(Symbol.for('for'), Elixir.GenEvent.Stream.__load(Elixir))])]], [Symbol.for('compile'), [new ElixirScript.Core.Tuple(Symbol.for('options'), []), new ElixirScript.Core.Tuple(Symbol.for('version'), [55, 46, 49, 46, 50]), new ElixirScript.Core.Tuple(Symbol.for('source'), '/private/tmp/elixir-20170929-51947-wgj4qu/elixir-1.5.2/lib/elixir/lib/gen_event/stream.ex')]], [Symbol.for('md5'), new ElixirScript.Core.BitString(ElixirScript.Core.BitString.integer(243), ElixirScript.Core.BitString.integer(112), ElixirScript.Core.BitString.integer(21), ElixirScript.Core.BitString.integer(98), ElixirScript.Core.BitString.integer(80), ElixirScript.Core.BitString.integer(45), ElixirScript.Core.BitString.integer(35), ElixirScript.Core.BitString.integer(34), ElixirScript.Core.BitString.integer(80), ElixirScript.Core.BitString.integer(146), ElixirScript.Core.BitString.integer(44), ElixirScript.Core.BitString.integer(53), ElixirScript.Core.BitString.integer(188), ElixirScript.Core.BitString.integer(183), ElixirScript.Core.BitString.integer(244), ElixirScript.Core.BitString.integer(64))], [Symbol.for('module'), Symbol.for('Elixir.Enumerable.GenEvent.Stream')]]);

        const value = __info__map__.get(kind);

        if (value !== null) {
            return value;
        }

        throw new ElixirScript.Core.Patterns.MatchError(kind);
    }

    function __impl__(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('for')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.GenEvent.Stream.__load(Elixir);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('target')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.Enumerable.GenEvent.Stream.__load(Elixir);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('protocol')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.Enumerable.__load(Elixir);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function count(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('_stream')], __function_args__, (_stream0) => {
                return true;
            })) !== null) {
                let [_stream0] = __arg_matches__;

                return new ElixirScript.Core.Tuple(Symbol.for('error'), Elixir.Enumerable.GenEvent.Stream.__load(Elixir));
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function flush_events(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('ref')], __function_args__, (ref0) => {
                return true;
            })) !== null) {
                let [ref0] = __arg_matches__;

                return ElixirScript.Core.SpecialForms.receive([ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                    values: [ElixirScript.Core.Patterns.variable('_from'), ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                        values: [ElixirScript.Core.Patterns.variable('_pid'), ElixirScript.Core.Patterns.bound(ref0)]
                    }), ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                        values: [ElixirScript.Core.Patterns.variable('notify'), ElixirScript.Core.Patterns.variable('_event')]
                    })]
                })], (_from0, _pid0, notify0, _event0) => {
                    return new ElixirScript.Core.Functions.Recurse(recur.bind(null, ref0));
                }, (_from0, _pid0, notify0, _event0) => {
                    return notify0 === Symbol.for('ack_notify') || (notify0 === Symbol.for('sync_notify') || notify0 === Symbol.for('notify'));
                })], 0, () => {
                    Symbol.for('ok')
                });
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function member__qmark__(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('_stream'), ElixirScript.Core.Patterns.variable('_item')], __function_args__, (_stream0, _item0) => {
                return true;
            })) !== null) {
                let [_stream0, _item0] = __arg_matches__;

                return new ElixirScript.Core.Tuple(Symbol.for('error'), Elixir.Enumerable.GenEvent.Stream.__load(Elixir));
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function next(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.capture(new Map([[Symbol.for('timeout'), ElixirScript.Core.Patterns.variable('timeout')]])), ElixirScript.Core.Patterns.capture(ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                values: [ElixirScript.Core.Patterns.variable('pid'), ElixirScript.Core.Patterns.variable('ref'), ElixirScript.Core.Patterns.variable('mon_ref')]
            }))], __function_args__, (timeout0, stream0, pid0, ref0, mon_ref0, acc0) => {
                return true;
            })) !== null) {
                let [timeout0, stream0, pid0, ref0, mon_ref0, acc0] = __arg_matches__;

                const [self0] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.variable('self'), ElixirScript.Core.Functions.call_property(ElixirScript.Core.erlang.self));

                return ElixirScript.Core.SpecialForms.receive([ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                    values: [ElixirScript.Core.Patterns.variable('_from'), ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                        values: [ElixirScript.Core.Patterns.bound(pid0), ElixirScript.Core.Patterns.bound(ref0)]
                    }), ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                        values: [Symbol.for('notify'), ElixirScript.Core.Patterns.variable('event')]
                    })]
                })], (_from0, event0) => {
                    return new ElixirScript.Core.Tuple([new ElixirScript.Core.Tuple(Symbol.for('async'), pid0, ref0, event0)], acc0);
                }, (_from0, event0) => {
                    return true;
                }), ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                    values: [ElixirScript.Core.Patterns.variable('_from'), ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                        values: [ElixirScript.Core.Patterns.bound(pid0), ElixirScript.Core.Patterns.bound(ref0)]
                    }), ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                        values: [Symbol.for('sync_notify'), ElixirScript.Core.Patterns.variable('event')]
                    })]
                })], (_from0, event0) => {
                    return new ElixirScript.Core.Tuple([new ElixirScript.Core.Tuple(Symbol.for('sync'), pid0, ref0, event0)], acc0);
                }, (_from0, event0) => {
                    return true;
                }), ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                    values: [ElixirScript.Core.Patterns.variable('_from'), ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                        values: [ElixirScript.Core.Patterns.bound(pid0), ElixirScript.Core.Patterns.bound(ref0)]
                    }), ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                        values: [Symbol.for('ack_notify'), ElixirScript.Core.Patterns.variable('event')]
                    })]
                })], (_from0, event0) => {
                    return new ElixirScript.Core.Tuple([new ElixirScript.Core.Tuple(Symbol.for('ack'), pid0, ref0, event0)], acc0);
                }, (_from0, event0) => {
                    return true;
                }), ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.capture(ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                    values: [Symbol.for('gen_event_EXIT'), ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                        values: [ElixirScript.Core.Patterns.bound(pid0), ElixirScript.Core.Patterns.bound(ref0)]
                    }), ElixirScript.Core.Patterns.variable('_reason')]
                }))], (_reason0, event0) => {
                    ElixirScript.Core.erlang.demonitor(mon_ref0, [Symbol.for('flush')])

                    ElixirScript.Core.erlang.send(self0, event0)

                    return new ElixirScript.Core.Tuple(Symbol.for('halt'), new ElixirScript.Core.Tuple(Symbol.for('removed'), acc0));
                }, (_reason0, event0) => {
                    return true;
                }), ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.capture(ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                    values: [Symbol.for('DOWN'), ElixirScript.Core.Patterns.bound(mon_ref0), ElixirScript.Core.Patterns.variable('_'), ElixirScript.Core.Patterns.variable('_'), ElixirScript.Core.Patterns.variable('_')]
                }))], (event0) => {
                    ElixirScript.Core.erlang.send(self0, event0)

                    return new ElixirScript.Core.Tuple(Symbol.for('halt'), new ElixirScript.Core.Tuple(Symbol.for('removed'), acc0));
                }, (event0) => {
                    return true;
                })], timeout0, () => {
                    ElixirScript.Core.erlang.exit(new ElixirScript.Core.Tuple(Symbol.for('timeout'), new ElixirScript.Core.Tuple(Elixir.Enumerable.GenEvent.Stream.__load(Elixir), Symbol.for('next'), [stream0, acc0])))
                });
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function reduce(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('stream'), ElixirScript.Core.Patterns.variable('acc'), ElixirScript.Core.Patterns.variable('fun')], __function_args__, (stream0, acc0, fun0) => {
                return true;
            })) !== null) {
                let [stream0, acc0, fun0] = __arg_matches__;

                const [start_fun0] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.variable('start_fun'), (...__function_args__) => {
                    function recur(...__function_args__) {
                        let __arg_matches__ = null;

                        if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([], __function_args__, () => {
                            return true;
                        })) !== null) {
                            let [] = __arg_matches__;

                            return start(stream0);
                        }

                        throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
                    }

                    return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
                });

                const [next_fun0] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.variable('next_fun'), (...__function_args__) => {
                    function recur(...__function_args__) {
                        let __arg_matches__ = null;

                        if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('x1')], __function_args__, (x10) => {
                            return true;
                        })) !== null) {
                            let [x10] = __arg_matches__;

                            return next(stream0, x10);
                        }

                        throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
                    }

                    return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
                });

                const [stop_fun0] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.variable('stop_fun'), (...__function_args__) => {
                    function recur(...__function_args__) {
                        let __arg_matches__ = null;

                        if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('x1')], __function_args__, (x10) => {
                            return true;
                        })) !== null) {
                            let [x10] = __arg_matches__;

                            return stop(stream0, x10);
                        }

                        throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
                    }

                    return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
                });

                return Elixir.Stream.__load(Elixir).resource(start_fun0, next_fun0, stop_fun0)(acc0, wrap_reducer(fun0));
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function start(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.capture(new Map([[Symbol.for('manager'), ElixirScript.Core.Patterns.variable('manager')]]))], __function_args__, (manager0, stream0) => {
                return true;
            })) !== null) {
                let [manager0, stream0] = __arg_matches__;

                return ElixirScript.Core.SpecialForms._try(() => {
                    const [pid0, ref0] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                        values: [Symbol.for('ok'), ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                            values: [ElixirScript.Core.Patterns.variable('pid'), ElixirScript.Core.Patterns.variable('ref')]
                        })]
                    }), ElixirScript.Core.gen.call(manager0, ElixirScript.Core.Functions.call_property(ElixirScript.Core.erlang.self), new ElixirScript.Core.Tuple(Symbol.for('add_process_handler'), ElixirScript.Core.Functions.call_property(ElixirScript.Core.erlang.self), ElixirScript.Core.Functions.call_property(ElixirScript.Core.erlang.self)), Symbol.for('infinity')));

                    const _ref8901571 = new ElixirScript.Core.Tuple(pid0, ref0);

                    const [mon_ref0] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.variable('mon_ref'), ElixirScript.Core.erlang.monitor(Symbol.for('process'), pid0));

                    return new ElixirScript.Core.Tuple(pid0, ref0, mon_ref0);
                }, null, (...__function_args__) => {
                    function recur(...__function_args__) {
                        let __arg_matches__ = null;

                        if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('exit'), ElixirScript.Core.Patterns.variable('reason')], __function_args__, (reason0) => {
                            return true;
                        })) !== null) {
                            let [reason0] = __arg_matches__;

                            return ElixirScript.Core.erlang.exit(new ElixirScript.Core.Tuple(reason0, new ElixirScript.Core.Tuple(Elixir.Enumerable.GenEvent.Stream.__load(Elixir), Symbol.for('start'), [stream0])));
                        }

                        throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
                    }

                    return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
                }, null, null);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function stop(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('stream'), ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                values: [Symbol.for('removed'), ElixirScript.Core.Patterns.capture(ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                    values: [ElixirScript.Core.Patterns.variable('pid'), ElixirScript.Core.Patterns.variable('ref'), ElixirScript.Core.Patterns.variable('mon_ref')]
                }))]
            })], __function_args__, (stream0, pid0, ref0, mon_ref0, acc0) => {
                return true;
            })) !== null) {
                let [stream0, pid0, ref0, mon_ref0, acc0] = __arg_matches__;

                return ElixirScript.Core.Patterns.defmatch(ElixirScript.Core.Patterns.clause([Symbol.for('ok')], () => {
                    return flush_events(ref0);
                }, () => {
                    return true;
                }), ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                    values: [Symbol.for('error'), ElixirScript.Core.Patterns.variable('reason')]
                })], (reason0) => {
                    return ElixirScript.Core.erlang.exit(new ElixirScript.Core.Tuple(reason0, new ElixirScript.Core.Tuple(Elixir.Enumerable.GenEvent.Stream.__load(Elixir), Symbol.for('stop'), [stream0, acc0])));
                }, (reason0) => {
                    return true;
                })).call(this, wait_for_handler_removal(pid0, ref0, mon_ref0));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('stream'), ElixirScript.Core.Patterns.capture(ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                values: [ElixirScript.Core.Patterns.variable('pid'), ElixirScript.Core.Patterns.variable('ref'), ElixirScript.Core.Patterns.variable('_')]
            }))], __function_args__, (stream0, pid0, ref0, acc0) => {
                return true;
            })) !== null) {
                let [stream0, pid0, ref0, acc0] = __arg_matches__;

                const [] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.variable('_'), gen_event.delete_handler(pid0, new ElixirScript.Core.Tuple(pid0, ref0), Symbol.for('shutdown')));

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, stream0, new ElixirScript.Core.Tuple(Symbol.for('removed'), acc0)));
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function wait_for_handler_removal(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('pid'), ElixirScript.Core.Patterns.variable('ref'), ElixirScript.Core.Patterns.variable('mon_ref')], __function_args__, (pid0, ref0, mon_ref0) => {
                return true;
            })) !== null) {
                let [pid0, ref0, mon_ref0] = __arg_matches__;

                return ElixirScript.Core.SpecialForms.receive([ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                    values: [Symbol.for('gen_event_EXIT'), ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                        values: [ElixirScript.Core.Patterns.bound(pid0), ElixirScript.Core.Patterns.bound(ref0)]
                    }), ElixirScript.Core.Patterns.variable('_reason')]
                })], (_reason0) => {
                    ElixirScript.Core.erlang.demonitor(mon_ref0, [Symbol.for('flush')])

                    return Symbol.for('ok');
                }, (_reason0) => {
                    return true;
                }), ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                    values: [Symbol.for('DOWN'), ElixirScript.Core.Patterns.bound(mon_ref0), ElixirScript.Core.Patterns.variable('_'), ElixirScript.Core.Patterns.variable('_'), ElixirScript.Core.Patterns.variable('reason')]
                })], (reason0) => {
                    return new ElixirScript.Core.Tuple(Symbol.for('error'), reason0);
                }, (reason0) => {
                    return true;
                })]);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function wrap_reducer(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('fun')], __function_args__, (fun0) => {
                return true;
            })) !== null) {
                let [fun0] = __arg_matches__;

                return (...__function_args__) => {
                    function recur(...__function_args__) {
                        let __arg_matches__ = null;

                        if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                            values: [Symbol.for('ack'), ElixirScript.Core.Patterns.variable('manager'), ElixirScript.Core.Patterns.variable('ref'), ElixirScript.Core.Patterns.variable('event')]
                        }), ElixirScript.Core.Patterns.variable('acc')], __function_args__, (manager0, ref0, event0, acc0) => {
                            return true;
                        })) !== null) {
                            let [manager0, ref0, event0, acc0] = __arg_matches__;

                            ElixirScript.Core.erlang.send(manager0, new ElixirScript.Core.Tuple(ref0, Symbol.for('ok')))

                            return fun0(event0, acc0);
                        } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                            values: [Symbol.for('async'), ElixirScript.Core.Patterns.variable('_manager'), ElixirScript.Core.Patterns.variable('_ref'), ElixirScript.Core.Patterns.variable('event')]
                        }), ElixirScript.Core.Patterns.variable('acc')], __function_args__, (_manager0, _ref0, event0, acc0) => {
                            return true;
                        })) !== null) {
                            let [_manager0, _ref0, event0, acc0] = __arg_matches__;

                            return fun0(event0, acc0);
                        } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                            values: [Symbol.for('sync'), ElixirScript.Core.Patterns.variable('manager'), ElixirScript.Core.Patterns.variable('ref'), ElixirScript.Core.Patterns.variable('event')]
                        }), ElixirScript.Core.Patterns.variable('acc')], __function_args__, (manager0, ref0, event0, acc0) => {
                            return true;
                        })) !== null) {
                            let [manager0, ref0, event0, acc0] = __arg_matches__;

                            return ElixirScript.Core.SpecialForms._try(() => {
                                return fun0(event0, acc0);
                            }, null, null, null, () => {
                                return ElixirScript.Core.erlang.send(manager0, new ElixirScript.Core.Tuple(ref0, Symbol.for('ok')));
                            });
                        }

                        throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
                    }

                    return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
                };
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    const __exports = {
        __impl__,
        count,
        member__qmark__,
        reduce,
        __MODULE__: Symbol.for('Elixir.Enumerable.GenEvent.Stream'),
        __info__
    };

    Elixir.Enumerable.GenEvent.Stream.__exports = __exports

    return __exports;
}
ElixirScript.Core.Functions.build_namespace(Elixir, 'Elixir.Access').__load = function(Elixir) {
    if (Elixir.Access.__exports)
        return Elixir.Access.__exports;

    function __info__(kind) {
        const __info__map__ = new Map([[Symbol.for('functions'), [new ElixirScript.Core.Tuple(Symbol.for('all'), 0), new ElixirScript.Core.Tuple(Symbol.for('at'), 1), new ElixirScript.Core.Tuple(Symbol.for('elem'), 1), new ElixirScript.Core.Tuple(Symbol.for('fetch'), 2), new ElixirScript.Core.Tuple(Symbol.for('get'), 2), new ElixirScript.Core.Tuple(Symbol.for('get'), 3), new ElixirScript.Core.Tuple(Symbol.for('get_and_update'), 3), new ElixirScript.Core.Tuple(Symbol.for('key'), 1), new ElixirScript.Core.Tuple(Symbol.for('key'), 2), new ElixirScript.Core.Tuple(Symbol.for('key!'), 1), new ElixirScript.Core.Tuple(Symbol.for('pop'), 2)]], [Symbol.for('macros'), []], [Symbol.for('attributes'), [new ElixirScript.Core.Tuple(Symbol.for('vsn'), [187344811387942296974998413081379696924])]], [Symbol.for('compile'), [new ElixirScript.Core.Tuple(Symbol.for('options'), []), new ElixirScript.Core.Tuple(Symbol.for('version'), [55, 46, 49, 46, 50]), new ElixirScript.Core.Tuple(Symbol.for('source'), '/private/tmp/elixir-20170929-51947-wgj4qu/elixir-1.5.2/lib/elixir/lib/access.ex')]], [Symbol.for('md5'), new ElixirScript.Core.BitString(ElixirScript.Core.BitString.integer(140), ElixirScript.Core.BitString.integer(241), ElixirScript.Core.BitString.integer(76), ElixirScript.Core.BitString.integer(87), ElixirScript.Core.BitString.integer(255), ElixirScript.Core.BitString.integer(205), ElixirScript.Core.BitString.integer(139), ElixirScript.Core.BitString.integer(72), ElixirScript.Core.BitString.integer(103), ElixirScript.Core.BitString.integer(168), ElixirScript.Core.BitString.integer(73), ElixirScript.Core.BitString.integer(106), ElixirScript.Core.BitString.integer(140), ElixirScript.Core.BitString.integer(53), ElixirScript.Core.BitString.integer(113), ElixirScript.Core.BitString.integer(28))], [Symbol.for('module'), Symbol.for('Elixir.Access')]]);

        const value = __info__map__.get(kind);

        if (value !== null) {
            return value;
        }

        throw new ElixirScript.Core.Patterns.MatchError(kind);
    }

    function get(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('x0'), ElixirScript.Core.Patterns.variable('x1')], __function_args__, (x00, x10) => {
                return true;
            })) !== null) {
                let [x00, x10] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, x00, x10, null));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.capture(new Map([[Symbol.for('__struct__'), ElixirScript.Core.Patterns.variable('struct')]])), ElixirScript.Core.Patterns.variable('key'), ElixirScript.Core.Patterns.variable('default')], __function_args__, (struct0, container0, key0, __default__0) => {
                return true;
            })) !== null) {
                let [struct0, container0, key0, __default__0] = __arg_matches__;

                return ElixirScript.Core.SpecialForms._try(() => {
                    return struct0.fetch(container0, key0);
                }, ElixirScript.Core.Patterns.defmatch(ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.variable('e')], (e0) => {
                    const [stacktrace5764607523034207330] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.variable('stacktrace576460752303420733'), ElixirScript.Core.Functions.call_property(ElixirScript.Core.erlang.get_stacktrace));

                    const [e5764607523034207330] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.variable('e576460752303420733'), ElixirScript.Core.Patterns.defmatch(ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.headTail(ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                        values: [ElixirScript.Core.Patterns.bound(struct0), Symbol.for('fetch'), [ElixirScript.Core.Patterns.bound(container0), ElixirScript.Core.Patterns.bound(key0)], ElixirScript.Core.Patterns.variable('_')]
                    }), ElixirScript.Core.Patterns.variable('_'))], () => {
                        return new Map([...e0, [Symbol.for('reason'), Elixir.String.Chars.__load(Elixir).to_string(Elixir.Kernel.__load(Elixir).inspect(struct0)) + ' does not implement the Access behaviour']]);
                    }, () => {
                        return true;
                    }), ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.variable('_')], () => {
                        return e0;
                    }, () => {
                        return true;
                    })).call(this, stacktrace5764607523034207330));

                    const [stacktrace5764607523034207010] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.variable('stacktrace576460752303420701'), stacktrace5764607523034207330);

                    return ElixirScript.Core.Patterns.defmatch(ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.variable('message576460752303420701')], (message5764607523034207010) => {
                        return ElixirScript.Core.erlang.raise(Symbol.for('error'), Elixir.RuntimeError.__load(Elixir).exception(message5764607523034207010), stacktrace5764607523034207010);
                    }, (message5764607523034207010) => {
                        return ElixirScript.Core.erlang.is_binary(message5764607523034207010);
                    }), ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.variable('atom576460752303420701')], (atom5764607523034207010) => {
                        return ElixirScript.Core.erlang.raise(Symbol.for('error'), atom5764607523034207010.exception([]), stacktrace5764607523034207010);
                    }, (atom5764607523034207010) => {
                        return ElixirScript.Core.erlang.is_atom(atom5764607523034207010);
                    }), ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.capture(new Map([[Symbol.for('__struct__'), ElixirScript.Core.Patterns.variable('struct576460752303420701')], [Symbol.for('__exception__'), true]]))], (struct5764607523034207010, other5764607523034207010) => {
                        return ElixirScript.Core.erlang.raise(Symbol.for('error'), other5764607523034207010, stacktrace5764607523034207010);
                    }, (struct5764607523034207010, other5764607523034207010) => {
                        return ElixirScript.Core.erlang.is_atom(struct5764607523034207010);
                    }), ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.variable('other576460752303420701')], (other5764607523034207010) => {
                        const [message5764607523034207010] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.variable('message576460752303420701'), 'reraise/2 expects a module name, string or exception as the first argument, got: ' + Elixir.String.Chars.__load(Elixir).to_string(Elixir.Kernel.__load(Elixir).inspect(other5764607523034207010)));

                        return ElixirScript.Core.erlang.error(Elixir.ArgumentError.__load(Elixir).exception(message5764607523034207010));
                    }, (other5764607523034207010) => {
                        return true;
                    })).call(this, e5764607523034207330);
                }, (e0) => {
                    return Elixir.Enum.__load(Elixir).member__qmark__(e0, [Elixir.UndefinedFunctionError.__load(Elixir)]);
                })), null, (...__function_args__) => {
                    function recur(...__function_args__) {
                        let __arg_matches__ = null;

                        if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                            values: [Symbol.for('ok'), ElixirScript.Core.Patterns.variable('value')]
                        })], __function_args__, (value0) => {
                            return true;
                        })) !== null) {
                            let [value0] = __arg_matches__;

                            return value0;
                        } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('error')], __function_args__, () => {
                            return true;
                        })) !== null) {
                            let [] = __arg_matches__;

                            return __default__0;
                        }

                        throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
                    }

                    return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
                }, null);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('map'), ElixirScript.Core.Patterns.variable('key'), ElixirScript.Core.Patterns.variable('default')], __function_args__, (map0, key0, __default__0) => {
                return ElixirScript.Core.erlang.is_map(map0);
            })) !== null) {
                let [map0, key0, __default__0] = __arg_matches__;

                return ElixirScript.Core.Patterns.defmatch(ElixirScript.Core.Patterns.clause([new Map([[key0, ElixirScript.Core.Patterns.variable('value')]])], (value0) => {
                    return value0;
                }, (value0) => {
                    return true;
                }), ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.variable('_')], () => {
                    return __default__0;
                }, () => {
                    return true;
                })).call(this, map0);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('list'), ElixirScript.Core.Patterns.variable('key'), ElixirScript.Core.Patterns.variable('default')], __function_args__, (list0, key0, __default__0) => {
                return ElixirScript.Core.erlang.is_list(list0) && ElixirScript.Core.erlang.is_atom(key0);
            })) !== null) {
                let [list0, key0, __default__0] = __arg_matches__;

                return ElixirScript.Core.Patterns.defmatch(ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                    values: [ElixirScript.Core.Patterns.variable('_'), ElixirScript.Core.Patterns.variable('value')]
                })], (value0) => {
                    return value0;
                }, (value0) => {
                    return true;
                }), ElixirScript.Core.Patterns.clause([false], () => {
                    return __default__0;
                }, () => {
                    return true;
                })).call(this, ElixirScript.Core.lists.keyfind(key0, 1, list0));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('list'), ElixirScript.Core.Patterns.variable('key'), ElixirScript.Core.Patterns.variable('_default')], __function_args__, (list0, key0, _default0) => {
                return ElixirScript.Core.erlang.is_list(list0);
            })) !== null) {
                let [list0, key0, _default0] = __arg_matches__;

                return ElixirScript.Core.erlang.error(Elixir.ArgumentError.__load(Elixir).exception('the Access calls for keywords expect the key to be an atom, got: ' + Elixir.Kernel.__load(Elixir).inspect(key0)));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([null, ElixirScript.Core.Patterns.variable('_key'), ElixirScript.Core.Patterns.variable('default')], __function_args__, (_key0, __default__0) => {
                return true;
            })) !== null) {
                let [_key0, __default__0] = __arg_matches__;

                return __default__0;
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    const __exports = {
        get,
        __MODULE__: Symbol.for('Elixir.Access'),
        __info__
    };

    Elixir.Access.__exports = __exports

    return __exports;
}
ElixirScript.Core.Functions.build_namespace(Elixir, 'Elixir.MapSet').__load = function(Elixir) {
    if (Elixir.MapSet.__exports)
        return Elixir.MapSet.__exports;

    function __info__(kind) {
        const __info__map__ = new Map([[Symbol.for('functions'), [new ElixirScript.Core.Tuple(Symbol.for('__struct__'), 0), new ElixirScript.Core.Tuple(Symbol.for('__struct__'), 1), new ElixirScript.Core.Tuple(Symbol.for('delete'), 2), new ElixirScript.Core.Tuple(Symbol.for('difference'), 2), new ElixirScript.Core.Tuple(Symbol.for('disjoint?'), 2), new ElixirScript.Core.Tuple(Symbol.for('equal?'), 2), new ElixirScript.Core.Tuple(Symbol.for('intersection'), 2), new ElixirScript.Core.Tuple(Symbol.for('member?'), 2), new ElixirScript.Core.Tuple(Symbol.for('new'), 0), new ElixirScript.Core.Tuple(Symbol.for('new'), 1), new ElixirScript.Core.Tuple(Symbol.for('new'), 2), new ElixirScript.Core.Tuple(Symbol.for('put'), 2), new ElixirScript.Core.Tuple(Symbol.for('size'), 1), new ElixirScript.Core.Tuple(Symbol.for('subset?'), 2), new ElixirScript.Core.Tuple(Symbol.for('to_list'), 1), new ElixirScript.Core.Tuple(Symbol.for('union'), 2)]], [Symbol.for('macros'), []], [Symbol.for('attributes'), [new ElixirScript.Core.Tuple(Symbol.for('vsn'), [177677801915726771788579233214503330181])]], [Symbol.for('compile'), [new ElixirScript.Core.Tuple(Symbol.for('options'), []), new ElixirScript.Core.Tuple(Symbol.for('version'), [55, 46, 49, 46, 50]), new ElixirScript.Core.Tuple(Symbol.for('source'), '/private/tmp/elixir-20170929-51947-wgj4qu/elixir-1.5.2/lib/elixir/lib/map_set.ex')]], [Symbol.for('md5'), new ElixirScript.Core.BitString(ElixirScript.Core.BitString.integer(133), ElixirScript.Core.BitString.integer(171), ElixirScript.Core.BitString.integer(127), ElixirScript.Core.BitString.integer(250), ElixirScript.Core.BitString.integer(130), ElixirScript.Core.BitString.integer(190), ElixirScript.Core.BitString.integer(98), ElixirScript.Core.BitString.integer(155), ElixirScript.Core.BitString.integer(83), ElixirScript.Core.BitString.integer(81), ElixirScript.Core.BitString.integer(62), ElixirScript.Core.BitString.integer(130), ElixirScript.Core.BitString.integer(242), ElixirScript.Core.BitString.integer(68), ElixirScript.Core.BitString.integer(33), ElixirScript.Core.BitString.integer(133))], [Symbol.for('module'), Symbol.for('Elixir.MapSet')]]);

        const value = __info__map__.get(kind);

        if (value !== null) {
            return value;
        }

        throw new ElixirScript.Core.Patterns.MatchError(kind);
    }

    function __struct__(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return new Map([[Symbol.for('__struct__'), Elixir.MapSet.__load(Elixir)], [Symbol.for('map'), new Map([])], [Symbol.for('version'), 2]]);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('kv576460752303340700')], __function_args__, (kv5764607523033407000) => {
                return true;
            })) !== null) {
                let [kv5764607523033407000] = __arg_matches__;

                const [map5764607523033407000, keys5764607523033407000] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                    values: [ElixirScript.Core.Patterns.variable('map576460752303340700'), ElixirScript.Core.Patterns.variable('keys576460752303340700')]
                }), Elixir.Enum.__load(Elixir).reduce(kv5764607523033407000, new ElixirScript.Core.Tuple(__struct__(), []), (...__function_args__) => {
                    function recur(...__function_args__) {
                        let __arg_matches__ = null;

                        if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                            values: [ElixirScript.Core.Patterns.variable('key576460752303340700'), ElixirScript.Core.Patterns.variable('val576460752303340700')]
                        }), ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                            values: [ElixirScript.Core.Patterns.variable('map576460752303340700'), ElixirScript.Core.Patterns.variable('keys576460752303340700')]
                        })], __function_args__, (key5764607523033407000, val5764607523033407000, map5764607523033407000, keys5764607523033407000) => {
                            return true;
                        })) !== null) {
                            let [key5764607523033407000, val5764607523033407000, map5764607523033407000, keys5764607523033407000] = __arg_matches__;

                            return new ElixirScript.Core.Tuple(ElixirScript.Core.maps.update(key5764607523033407000, val5764607523033407000, map5764607523033407000), Elixir.List.__load(Elixir).__delete__(keys5764607523033407000, key5764607523033407000));
                        }

                        throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
                    }

                    return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
                }));

                const _ref1788764 = new ElixirScript.Core.Tuple(map5764607523033407000, keys5764607523033407000);

                return ElixirScript.Core.Patterns.defmatch(ElixirScript.Core.Patterns.clause([[]], () => {
                    return map5764607523033407000;
                }, () => {
                    return true;
                }), ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.variable('_')], () => {
                    return ElixirScript.Core.erlang.error(Elixir.ArgumentError.__load(Elixir).exception('the following keys must also be given when building ' + ('struct ' + (Elixir.String.Chars.__load(Elixir).to_string(Elixir.Kernel.__load(Elixir).inspect(Elixir.MapSet.__load(Elixir))) + (': ' + Elixir.String.Chars.__load(Elixir).to_string(Elixir.Kernel.__load(Elixir).inspect(keys5764607523033407000)))))));
                }, () => {
                    return true;
                })).call(this, keys5764607523033407000);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function member__qmark__(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([new Map([[Symbol.for('__struct__'), {
                __MODULE__: Symbol.for('Elixir.MapSet')
            }], [Symbol.for('map'), ElixirScript.Core.Patterns.variable('map')]]), ElixirScript.Core.Patterns.variable('value')], __function_args__, (map0, value0) => {
                return true;
            })) !== null) {
                let [map0, value0] = __arg_matches__;

                return ElixirScript.Core.maps.is_key(value0, map0);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function __new__(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.MapSet.__load(Elixir).__struct__(new Map([[Symbol.for('map'), new Map([])], [Symbol.for('version'), 2]]));
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function put(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.capture(new Map([[Symbol.for('__struct__'), {
                __MODULE__: Symbol.for('Elixir.MapSet')
            }], [Symbol.for('map'), ElixirScript.Core.Patterns.variable('map')]])), ElixirScript.Core.Patterns.variable('value')], __function_args__, (map0, map_set0, value0) => {
                return true;
            })) !== null) {
                let [map0, map_set0, value0] = __arg_matches__;

                return new Map([...map_set0, [Symbol.for('map'), ElixirScript.Core.maps.put(value0, [], map0)]]);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function size(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([new Map([[Symbol.for('__struct__'), {
                __MODULE__: Symbol.for('Elixir.MapSet')
            }], [Symbol.for('map'), ElixirScript.Core.Patterns.variable('map')]])], __function_args__, (map0) => {
                return true;
            })) !== null) {
                let [map0] = __arg_matches__;

                return ElixirScript.Core.erlang.map_size(map0);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function to_list(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([new Map([[Symbol.for('__struct__'), {
                __MODULE__: Symbol.for('Elixir.MapSet')
            }], [Symbol.for('map'), ElixirScript.Core.Patterns.variable('map')]])], __function_args__, (map0) => {
                return true;
            })) !== null) {
                let [map0] = __arg_matches__;

                return ElixirScript.Core.maps.keys(map0);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    const __exports = {
        __struct__,
        member__qmark__,
        __new__,
        put,
        size,
        to_list,
        __MODULE__: Symbol.for('Elixir.MapSet'),
        __info__
    };

    Elixir.MapSet.__exports = __exports

    return __exports;
}
ElixirScript.Core.Functions.build_namespace(Elixir, 'Elixir.Enumerable.File.Stream').__load = function(Elixir) {
    if (Elixir.Enumerable.File.Stream.__exports)
        return Elixir.Enumerable.File.Stream.__exports;

    function __info__(kind) {
        const __info__map__ = new Map([[Symbol.for('functions'), [new ElixirScript.Core.Tuple(Symbol.for('__impl__'), 1), new ElixirScript.Core.Tuple(Symbol.for('count'), 1), new ElixirScript.Core.Tuple(Symbol.for('member?'), 2), new ElixirScript.Core.Tuple(Symbol.for('reduce'), 3)]], [Symbol.for('macros'), []], [Symbol.for('attributes'), [new ElixirScript.Core.Tuple(Symbol.for('vsn'), [272278598113108639011678353623708358332]), new ElixirScript.Core.Tuple(Symbol.for('behaviour'), [Elixir.Enumerable.__load(Elixir)]), new ElixirScript.Core.Tuple(Symbol.for('protocol_impl'), [new ElixirScript.Core.Tuple(Symbol.for('protocol'), Elixir.Enumerable.__load(Elixir)), new ElixirScript.Core.Tuple(Symbol.for('for'), Elixir.File.Stream.__load(Elixir))])]], [Symbol.for('compile'), [new ElixirScript.Core.Tuple(Symbol.for('options'), []), new ElixirScript.Core.Tuple(Symbol.for('version'), [55, 46, 49, 46, 50]), new ElixirScript.Core.Tuple(Symbol.for('source'), '/private/tmp/elixir-20170929-51947-wgj4qu/elixir-1.5.2/lib/elixir/lib/file/stream.ex')]], [Symbol.for('md5'), new ElixirScript.Core.BitString(ElixirScript.Core.BitString.integer(204), ElixirScript.Core.BitString.integer(214), ElixirScript.Core.BitString.integer(243), ElixirScript.Core.BitString.integer(86), ElixirScript.Core.BitString.integer(19), ElixirScript.Core.BitString.integer(184), ElixirScript.Core.BitString.integer(217), ElixirScript.Core.BitString.integer(105), ElixirScript.Core.BitString.integer(226), ElixirScript.Core.BitString.integer(55), ElixirScript.Core.BitString.integer(71), ElixirScript.Core.BitString.integer(213), ElixirScript.Core.BitString.integer(139), ElixirScript.Core.BitString.integer(232), ElixirScript.Core.BitString.integer(86), ElixirScript.Core.BitString.integer(188))], [Symbol.for('module'), Symbol.for('Elixir.Enumerable.File.Stream')]]);

        const value = __info__map__.get(kind);

        if (value !== null) {
            return value;
        }

        throw new ElixirScript.Core.Patterns.MatchError(kind);
    }

    function __impl__(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('for')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.File.Stream.__load(Elixir);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('target')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.Enumerable.File.Stream.__load(Elixir);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('protocol')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.Enumerable.__load(Elixir);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function bom_length(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.bitStringMatch(ElixirScript.Core.BitString.integer(239), ElixirScript.Core.BitString.integer(187), ElixirScript.Core.BitString.integer(191), ElixirScript.Core.BitString.binary({
                'value': ElixirScript.Core.Patterns.variable()
            }))], __function_args__, (_rest0) => {
                return true;
            })) !== null) {
                let [_rest0] = __arg_matches__;

                return 3;
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.bitStringMatch(ElixirScript.Core.BitString.integer(254), ElixirScript.Core.BitString.integer(255), ElixirScript.Core.BitString.binary({
                'value': ElixirScript.Core.Patterns.variable()
            }))], __function_args__, (_rest0) => {
                return true;
            })) !== null) {
                let [_rest0] = __arg_matches__;

                return 2;
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.bitStringMatch(ElixirScript.Core.BitString.integer(255), ElixirScript.Core.BitString.integer(254), ElixirScript.Core.BitString.binary({
                'value': ElixirScript.Core.Patterns.variable()
            }))], __function_args__, (_rest0) => {
                return true;
            })) !== null) {
                let [_rest0] = __arg_matches__;

                return 2;
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.bitStringMatch(ElixirScript.Core.BitString.integer(0), ElixirScript.Core.BitString.integer(0), ElixirScript.Core.BitString.integer(254), ElixirScript.Core.BitString.integer(255), ElixirScript.Core.BitString.binary({
                'value': ElixirScript.Core.Patterns.variable()
            }))], __function_args__, (_rest0) => {
                return true;
            })) !== null) {
                let [_rest0] = __arg_matches__;

                return 4;
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.bitStringMatch(ElixirScript.Core.BitString.integer(254), ElixirScript.Core.BitString.integer(255), ElixirScript.Core.BitString.integer(0), ElixirScript.Core.BitString.integer(0), ElixirScript.Core.BitString.binary({
                'value': ElixirScript.Core.Patterns.variable()
            }))], __function_args__, (_rest0) => {
                return true;
            })) !== null) {
                let [_rest0] = __arg_matches__;

                return 4;
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('_binary')], __function_args__, (_binary0) => {
                return true;
            })) !== null) {
                let [_binary0] = __arg_matches__;

                return 0;
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function count(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.capture(new Map([[Symbol.for('path'), ElixirScript.Core.Patterns.variable('path')], [Symbol.for('modes'), ElixirScript.Core.Patterns.variable('modes')], [Symbol.for('line_or_bytes'), Symbol.for('line')]]))], __function_args__, (path0, modes0, stream0) => {
                return true;
            })) !== null) {
                let [path0, modes0, stream0] = __arg_matches__;

                const [pattern0] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.variable('pattern'), ElixirScript.Core.binary.compile_pattern('\n'));

                const [counter0] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.variable('counter'), (...__function_args__) => {
                    function recur(...__function_args__) {
                        let __arg_matches__ = null;

                        if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('x1')], __function_args__, (x10) => {
                            return true;
                        })) !== null) {
                            let [x10] = __arg_matches__;

                            return count_lines(x10, path0, pattern0, read_function(stream0), 0);
                        }

                        throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
                    }

                    return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
                });

                return ElixirScript.Core.Patterns.defmatch(ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                    values: [Symbol.for('ok'), ElixirScript.Core.Patterns.variable('count')]
                })], (count0) => {
                    return new ElixirScript.Core.Tuple(Symbol.for('ok'), count0);
                }, (count0) => {
                    return true;
                }), ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                    values: [Symbol.for('error'), ElixirScript.Core.Patterns.variable('reason')]
                })], (reason0) => {
                    return ElixirScript.Core.erlang.error(Elixir.File.Error.__load(Elixir).exception([new ElixirScript.Core.Tuple(Symbol.for('reason'), reason0), new ElixirScript.Core.Tuple(Symbol.for('action'), 'stream'), new ElixirScript.Core.Tuple(Symbol.for('path'), path0)]));
                }, (reason0) => {
                    return true;
                })).call(this, Elixir.File.__load(Elixir).open(path0, read_modes(modes0), counter0));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([new Map([[Symbol.for('path'), ElixirScript.Core.Patterns.variable('path')], [Symbol.for('line_or_bytes'), ElixirScript.Core.Patterns.variable('bytes')]])], __function_args__, (path0, bytes0) => {
                return true;
            })) !== null) {
                let [path0, bytes0] = __arg_matches__;

                return ElixirScript.Core.Patterns.defmatch(ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                    values: [Symbol.for('ok'), new Map([[Symbol.for('size'), 0]])]
                })], () => {
                    return new ElixirScript.Core.Tuple(Symbol.for('error'), Elixir.Enumerable.File.Stream.__load(Elixir));
                }, () => {
                    return true;
                }), ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                    values: [Symbol.for('ok'), new Map([[Symbol.for('size'), ElixirScript.Core.Patterns.variable('size')]])]
                })], (size0) => {
                    return new ElixirScript.Core.Tuple(Symbol.for('ok'), ElixirScript.Core.erlang.div(size0, bytes0) + ElixirScript.Core.Patterns.defmatch(ElixirScript.Core.Patterns.clause([false], () => {
                        return 1;
                    }, () => {
                        return true;
                    }), ElixirScript.Core.Patterns.clause([true], () => {
                        return 0;
                    }, () => {
                        return true;
                    })).call(this, ElixirScript.Core.erlang.equals(ElixirScript.Core.erlang.rem(size0, bytes0), 0)));
                }, (size0) => {
                    return true;
                }), ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                    values: [Symbol.for('error'), ElixirScript.Core.Patterns.variable('reason')]
                })], (reason0) => {
                    return ElixirScript.Core.erlang.error(Elixir.File.Error.__load(Elixir).exception([new ElixirScript.Core.Tuple(Symbol.for('reason'), reason0), new ElixirScript.Core.Tuple(Symbol.for('action'), 'stream'), new ElixirScript.Core.Tuple(Symbol.for('path'), path0)]));
                }, (reason0) => {
                    return true;
                })).call(this, Elixir.File.__load(Elixir).stat(path0));
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function count_lines(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('data'), ElixirScript.Core.Patterns.variable('pattern')], __function_args__, (data0, pattern0) => {
                return true;
            })) !== null) {
                let [data0, pattern0] = __arg_matches__;

                return ElixirScript.Core.erlang.length(ElixirScript.Core.binary.matches(data0, pattern0));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('device'), ElixirScript.Core.Patterns.variable('path'), ElixirScript.Core.Patterns.variable('pattern'), ElixirScript.Core.Patterns.variable('read'), ElixirScript.Core.Patterns.variable('count')], __function_args__, (device0, path0, pattern0, read0, count0) => {
                return true;
            })) !== null) {
                let [device0, path0, pattern0, read0, count0] = __arg_matches__;

                return ElixirScript.Core.Patterns.defmatch(ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.variable('data')], (data0) => {
                    return new ElixirScript.Core.Functions.Recurse(recur.bind(null, device0, path0, pattern0, read0, count0 + count_lines(data0, pattern0)));
                }, (data0) => {
                    return ElixirScript.Core.erlang.is_binary(data0);
                }), ElixirScript.Core.Patterns.clause([Symbol.for('eof')], () => {
                    return count0;
                }, () => {
                    return true;
                }), ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                    values: [Symbol.for('error'), ElixirScript.Core.Patterns.variable('reason')]
                })], (reason0) => {
                    return ElixirScript.Core.erlang.error(Elixir.File.Error.__load(Elixir).exception([new ElixirScript.Core.Tuple(Symbol.for('reason'), reason0), new ElixirScript.Core.Tuple(Symbol.for('action'), 'stream'), new ElixirScript.Core.Tuple(Symbol.for('path'), path0)]));
                }, (reason0) => {
                    return true;
                })).call(this, read0(device0));
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function member__qmark__(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('_stream'), ElixirScript.Core.Patterns.variable('_term')], __function_args__, (_stream0, _term0) => {
                return true;
            })) !== null) {
                let [_stream0, _term0] = __arg_matches__;

                return new ElixirScript.Core.Tuple(Symbol.for('error'), Elixir.Enumerable.File.Stream.__load(Elixir));
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function read_function(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([new Map([[Symbol.for('raw'), true]])], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return (...__function_args__) => {
                    function recur(...__function_args__) {
                        let __arg_matches__ = null;

                        if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('x1')], __function_args__, (x10) => {
                            return true;
                        })) !== null) {
                            let [x10] = __arg_matches__;

                            return Elixir.IO.__load(Elixir).binread(x10, 65536);
                        }

                        throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
                    }

                    return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
                };
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([new Map([[Symbol.for('raw'), false]])], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return (...__function_args__) => {
                    function recur(...__function_args__) {
                        let __arg_matches__ = null;

                        if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('x1')], __function_args__, (x10) => {
                            return true;
                        })) !== null) {
                            let [x10] = __arg_matches__;

                            return Elixir.IO.__load(Elixir).read(x10, 65536);
                        }

                        throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
                    }

                    return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
                };
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function read_modes(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('modes')], __function_args__, (modes0) => {
                return true;
            })) !== null) {
                let [modes0] = __arg_matches__;

                return ElixirScript.Core.SpecialForms._for(ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.variable('mode')], (mode0) => {
                    return mode;
                }, (mode0) => {
                    return ElixirScript.Core.erlang.not(mode === Symbol.for('append') || (mode === Symbol.for('trim_bom') || mode === Symbol.for('write')));
                }), [ElixirScript.Core.Patterns.list_generator(ElixirScript.Core.Patterns.variable('mode'), modes0)], Elixir.Collectable.__load(Elixir), []);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function reduce(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([new Map([[Symbol.for('path'), ElixirScript.Core.Patterns.variable('path')], [Symbol.for('modes'), ElixirScript.Core.Patterns.variable('modes')], [Symbol.for('line_or_bytes'), ElixirScript.Core.Patterns.variable('line_or_bytes')], [Symbol.for('raw'), ElixirScript.Core.Patterns.variable('raw')]]), ElixirScript.Core.Patterns.variable('acc'), ElixirScript.Core.Patterns.variable('fun')], __function_args__, (path0, modes0, line_or_bytes0, raw0, acc0, fun0) => {
                return true;
            })) !== null) {
                let [path0, modes0, line_or_bytes0, raw0, acc0, fun0] = __arg_matches__;

                const [start_fun0] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.variable('start_fun'), (...__function_args__) => {
                    function recur(...__function_args__) {
                        let __arg_matches__ = null;

                        if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([], __function_args__, () => {
                            return true;
                        })) !== null) {
                            let [] = __arg_matches__;

                            return ElixirScript.Core.Patterns.defmatch(ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                                values: [Symbol.for('ok'), ElixirScript.Core.Patterns.variable('device')]
                            })], (device0) => {
                                return ElixirScript.Core.Patterns.defmatch(ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.variable('x576460752303391710')], (x5764607523033917100) => {
                                    return device0;
                                }, (x5764607523033917100) => {
                                    return x5764607523033917100 === null || x5764607523033917100 === false;
                                }), ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.variable('_')], () => {
                                    return trim_bom(device0);
                                }, () => {
                                    return true;
                                })).call(this, Elixir.Enum.__load(Elixir).member__qmark__(modes0, Symbol.for('trim_bom')));
                            }, (device0) => {
                                return true;
                            }), ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                                values: [Symbol.for('error'), ElixirScript.Core.Patterns.variable('reason')]
                            })], (reason0) => {
                                return ElixirScript.Core.erlang.error(Elixir.File.Error.__load(Elixir).exception([new ElixirScript.Core.Tuple(Symbol.for('reason'), reason0), new ElixirScript.Core.Tuple(Symbol.for('action'), 'stream'), new ElixirScript.Core.Tuple(Symbol.for('path'), path0)]));
                            }, (reason0) => {
                                return true;
                            })).call(this, ElixirScript.Core.file.open(path0, read_modes(modes0)));
                        }

                        throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
                    }

                    return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
                });

                const [next_fun0] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.variable('next_fun'), ElixirScript.Core.Patterns.defmatch(ElixirScript.Core.Patterns.clause([true], () => {
                    return (...__function_args__) => {
                        function recur(...__function_args__) {
                            let __arg_matches__ = null;

                            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('x1')], __function_args__, (x10) => {
                                return true;
                            })) !== null) {
                                let [x10] = __arg_matches__;

                                return Elixir.IO.__load(Elixir).each_binstream(x10, line_or_bytes0);
                            }

                            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
                        }

                        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
                    };
                }, () => {
                    return true;
                }), ElixirScript.Core.Patterns.clause([false], () => {
                    return (...__function_args__) => {
                        function recur(...__function_args__) {
                            let __arg_matches__ = null;

                            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('x1')], __function_args__, (x10) => {
                                return true;
                            })) !== null) {
                                let [x10] = __arg_matches__;

                                return Elixir.IO.__load(Elixir).each_stream(x10, line_or_bytes0);
                            }

                            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
                        }

                        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
                    };
                }, () => {
                    return true;
                })).call(this, raw0));

                return Elixir.Stream.__load(Elixir).resource(start_fun0, next_fun0, ElixirScript.Core.file.close)(acc0, fun0);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function trim_bom(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('device')], __function_args__, (device0) => {
                return true;
            })) !== null) {
                let [device0] = __arg_matches__;

                const [header0] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.variable('header'), Elixir.IO.__load(Elixir).binread(device0, 4));

                const [_new_pos0] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                    values: [Symbol.for('ok'), ElixirScript.Core.Patterns.variable('_new_pos')]
                }), ElixirScript.Core.file.position(device0, bom_length(header0)));

                const _ref1499382 = new ElixirScript.Core.Tuple(_new_pos0);

                return device0;
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    const __exports = {
        __impl__,
        count,
        member__qmark__,
        reduce,
        __MODULE__: Symbol.for('Elixir.Enumerable.File.Stream'),
        __info__
    };

    Elixir.Enumerable.File.Stream.__exports = __exports

    return __exports;
}
ElixirScript.Core.Functions.build_namespace(Elixir, 'Elixir.Enumerable.MapSet').__load = function(Elixir) {
    if (Elixir.Enumerable.MapSet.__exports)
        return Elixir.Enumerable.MapSet.__exports;

    function __info__(kind) {
        const __info__map__ = new Map([[Symbol.for('functions'), [new ElixirScript.Core.Tuple(Symbol.for('__impl__'), 1), new ElixirScript.Core.Tuple(Symbol.for('count'), 1), new ElixirScript.Core.Tuple(Symbol.for('member?'), 2), new ElixirScript.Core.Tuple(Symbol.for('reduce'), 3)]], [Symbol.for('macros'), []], [Symbol.for('attributes'), [new ElixirScript.Core.Tuple(Symbol.for('vsn'), [60011642930429269673849551126667568266]), new ElixirScript.Core.Tuple(Symbol.for('behaviour'), [Elixir.Enumerable.__load(Elixir)]), new ElixirScript.Core.Tuple(Symbol.for('protocol_impl'), [new ElixirScript.Core.Tuple(Symbol.for('protocol'), Elixir.Enumerable.__load(Elixir)), new ElixirScript.Core.Tuple(Symbol.for('for'), Elixir.MapSet.__load(Elixir))])]], [Symbol.for('compile'), [new ElixirScript.Core.Tuple(Symbol.for('options'), []), new ElixirScript.Core.Tuple(Symbol.for('version'), [55, 46, 49, 46, 50]), new ElixirScript.Core.Tuple(Symbol.for('source'), '/private/tmp/elixir-20170929-51947-wgj4qu/elixir-1.5.2/lib/elixir/lib/map_set.ex')]], [Symbol.for('md5'), new ElixirScript.Core.BitString(ElixirScript.Core.BitString.integer(45), ElixirScript.Core.BitString.integer(37), ElixirScript.Core.BitString.integer(210), ElixirScript.Core.BitString.integer(111), ElixirScript.Core.BitString.integer(116), ElixirScript.Core.BitString.integer(82), ElixirScript.Core.BitString.integer(14), ElixirScript.Core.BitString.integer(90), ElixirScript.Core.BitString.integer(96), ElixirScript.Core.BitString.integer(186), ElixirScript.Core.BitString.integer(59), ElixirScript.Core.BitString.integer(145), ElixirScript.Core.BitString.integer(188), ElixirScript.Core.BitString.integer(145), ElixirScript.Core.BitString.integer(164), ElixirScript.Core.BitString.integer(138))], [Symbol.for('module'), Symbol.for('Elixir.Enumerable.MapSet')]]);

        const value = __info__map__.get(kind);

        if (value !== null) {
            return value;
        }

        throw new ElixirScript.Core.Patterns.MatchError(kind);
    }

    function __impl__(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('for')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.MapSet.__load(Elixir);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('target')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.Enumerable.MapSet.__load(Elixir);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('protocol')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.Enumerable.__load(Elixir);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function count(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('map_set')], __function_args__, (map_set0) => {
                return true;
            })) !== null) {
                let [map_set0] = __arg_matches__;

                return new ElixirScript.Core.Tuple(Symbol.for('ok'), Elixir.MapSet.__load(Elixir).size(map_set0));
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function member__qmark__(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('map_set'), ElixirScript.Core.Patterns.variable('val')], __function_args__, (map_set0, val0) => {
                return true;
            })) !== null) {
                let [map_set0, val0] = __arg_matches__;

                return new ElixirScript.Core.Tuple(Symbol.for('ok'), Elixir.MapSet.__load(Elixir).member__qmark__(map_set0, val0));
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function reduce(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('map_set'), ElixirScript.Core.Patterns.variable('acc'), ElixirScript.Core.Patterns.variable('fun')], __function_args__, (map_set0, acc0, fun0) => {
                return true;
            })) !== null) {
                let [map_set0, acc0, fun0] = __arg_matches__;

                return Elixir.Enumerable.List.__load(Elixir).reduce(Elixir.MapSet.__load(Elixir).to_list(map_set0), acc0, fun0);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    const __exports = {
        __impl__,
        count,
        member__qmark__,
        reduce,
        __MODULE__: Symbol.for('Elixir.Enumerable.MapSet'),
        __info__
    };

    Elixir.Enumerable.MapSet.__exports = __exports

    return __exports;
}
ElixirScript.Core.Functions.build_namespace(Elixir, 'Elixir.Enumerable.Map').__load = function(Elixir) {
    if (Elixir.Enumerable.Map.__exports)
        return Elixir.Enumerable.Map.__exports;

    function __info__(kind) {
        const __info__map__ = new Map([[Symbol.for('functions'), [new ElixirScript.Core.Tuple(Symbol.for('__impl__'), 1), new ElixirScript.Core.Tuple(Symbol.for('count'), 1), new ElixirScript.Core.Tuple(Symbol.for('member?'), 2), new ElixirScript.Core.Tuple(Symbol.for('reduce'), 3)]], [Symbol.for('macros'), []], [Symbol.for('attributes'), [new ElixirScript.Core.Tuple(Symbol.for('vsn'), [149380522820473093543120499350511023585]), new ElixirScript.Core.Tuple(Symbol.for('behaviour'), [Elixir.Enumerable.__load(Elixir)]), new ElixirScript.Core.Tuple(Symbol.for('protocol_impl'), [new ElixirScript.Core.Tuple(Symbol.for('protocol'), Elixir.Enumerable.__load(Elixir)), new ElixirScript.Core.Tuple(Symbol.for('for'), Elixir.Map.__load(Elixir))])]], [Symbol.for('compile'), [new ElixirScript.Core.Tuple(Symbol.for('options'), []), new ElixirScript.Core.Tuple(Symbol.for('version'), [55, 46, 49, 46, 50]), new ElixirScript.Core.Tuple(Symbol.for('source'), '/private/tmp/elixir-20170929-51947-wgj4qu/elixir-1.5.2/lib/elixir/lib/enum.ex')]], [Symbol.for('md5'), new ElixirScript.Core.BitString(ElixirScript.Core.BitString.integer(112), ElixirScript.Core.BitString.integer(97), ElixirScript.Core.BitString.integer(164), ElixirScript.Core.BitString.integer(103), ElixirScript.Core.BitString.integer(69), ElixirScript.Core.BitString.integer(210), ElixirScript.Core.BitString.integer(118), ElixirScript.Core.BitString.integer(125), ElixirScript.Core.BitString.integer(136), ElixirScript.Core.BitString.integer(250), ElixirScript.Core.BitString.integer(254), ElixirScript.Core.BitString.integer(107), ElixirScript.Core.BitString.integer(93), ElixirScript.Core.BitString.integer(27), ElixirScript.Core.BitString.integer(245), ElixirScript.Core.BitString.integer(225))], [Symbol.for('module'), Symbol.for('Elixir.Enumerable.Map')]]);

        const value = __info__map__.get(kind);

        if (value !== null) {
            return value;
        }

        throw new ElixirScript.Core.Patterns.MatchError(kind);
    }

    function __impl__(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('for')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.Map.__load(Elixir);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('target')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.Enumerable.Map.__load(Elixir);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('protocol')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.Enumerable.__load(Elixir);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function count(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('map')], __function_args__, (map0) => {
                return true;
            })) !== null) {
                let [map0] = __arg_matches__;

                return new ElixirScript.Core.Tuple(Symbol.for('ok'), ElixirScript.Core.erlang.map_size(map0));
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function member__qmark__(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('map'), ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                values: [ElixirScript.Core.Patterns.variable('key'), ElixirScript.Core.Patterns.variable('value')]
            })], __function_args__, (map0, key0, value0) => {
                return true;
            })) !== null) {
                let [map0, key0, value0] = __arg_matches__;

                return new ElixirScript.Core.Tuple(Symbol.for('ok'), ElixirScript.Core.Patterns.defmatch(ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                    values: [Symbol.for('ok'), ElixirScript.Core.Patterns.bound(value0)]
                })], () => {
                    return true;
                }, () => {
                    return true;
                }), ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.variable('_')], () => {
                    return false;
                }, () => {
                    return true;
                })).call(this, ElixirScript.Core.maps.find(key0, map0)));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('_map'), ElixirScript.Core.Patterns.variable('_other')], __function_args__, (_map0, _other0) => {
                return true;
            })) !== null) {
                let [_map0, _other0] = __arg_matches__;

                return new ElixirScript.Core.Tuple(Symbol.for('ok'), false);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function reduce(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('map'), ElixirScript.Core.Patterns.variable('acc'), ElixirScript.Core.Patterns.variable('fun')], __function_args__, (map0, acc0, fun0) => {
                return true;
            })) !== null) {
                let [map0, acc0, fun0] = __arg_matches__;

                return reduce_list(ElixirScript.Core.maps.to_list(map0), acc0, fun0);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function reduce_list(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('_'), ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                values: [Symbol.for('halt'), ElixirScript.Core.Patterns.variable('acc')]
            }), ElixirScript.Core.Patterns.variable('_fun')], __function_args__, (acc0, _fun0) => {
                return true;
            })) !== null) {
                let [acc0, _fun0] = __arg_matches__;

                return new ElixirScript.Core.Tuple(Symbol.for('halted'), acc0);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('list'), ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                values: [Symbol.for('suspend'), ElixirScript.Core.Patterns.variable('acc')]
            }), ElixirScript.Core.Patterns.variable('fun')], __function_args__, (list0, acc0, fun0) => {
                return true;
            })) !== null) {
                let [list0, acc0, fun0] = __arg_matches__;

                return new ElixirScript.Core.Tuple(Symbol.for('suspended'), acc0, (...__function_args__) => {
                    function recur(...__function_args__) {
                        let __arg_matches__ = null;

                        if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('x1')], __function_args__, (x10) => {
                            return true;
                        })) !== null) {
                            let [x10] = __arg_matches__;

                            return reduce_list(list0, x10, fun0);
                        }

                        throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
                    }

                    return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
                });
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([[], ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                values: [Symbol.for('cont'), ElixirScript.Core.Patterns.variable('acc')]
            }), ElixirScript.Core.Patterns.variable('_fun')], __function_args__, (acc0, _fun0) => {
                return true;
            })) !== null) {
                let [acc0, _fun0] = __arg_matches__;

                return new ElixirScript.Core.Tuple(Symbol.for('done'), acc0);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.headTail(ElixirScript.Core.Patterns.variable('h'), ElixirScript.Core.Patterns.variable('t')), ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                values: [Symbol.for('cont'), ElixirScript.Core.Patterns.variable('acc')]
            }), ElixirScript.Core.Patterns.variable('fun')], __function_args__, (h0, t0, acc0, fun0) => {
                return true;
            })) !== null) {
                let [h0, t0, acc0, fun0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, t0, fun0(h0, acc0), fun0));
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    const __exports = {
        __impl__,
        count,
        member__qmark__,
        reduce,
        __MODULE__: Symbol.for('Elixir.Enumerable.Map'),
        __info__
    };

    Elixir.Enumerable.Map.__exports = __exports

    return __exports;
}
ElixirScript.Core.Functions.build_namespace(Elixir, 'Elixir.Enumerable.List').__load = function(Elixir) {
    if (Elixir.Enumerable.List.__exports)
        return Elixir.Enumerable.List.__exports;

    function __info__(kind) {
        const __info__map__ = new Map([[Symbol.for('functions'), [new ElixirScript.Core.Tuple(Symbol.for('__impl__'), 1), new ElixirScript.Core.Tuple(Symbol.for('count'), 1), new ElixirScript.Core.Tuple(Symbol.for('member?'), 2), new ElixirScript.Core.Tuple(Symbol.for('reduce'), 3)]], [Symbol.for('macros'), []], [Symbol.for('attributes'), [new ElixirScript.Core.Tuple(Symbol.for('vsn'), [232399217649002885584584850094459085908]), new ElixirScript.Core.Tuple(Symbol.for('behaviour'), [Elixir.Enumerable.__load(Elixir)]), new ElixirScript.Core.Tuple(Symbol.for('protocol_impl'), [new ElixirScript.Core.Tuple(Symbol.for('protocol'), Elixir.Enumerable.__load(Elixir)), new ElixirScript.Core.Tuple(Symbol.for('for'), Elixir.List.__load(Elixir))])]], [Symbol.for('compile'), [new ElixirScript.Core.Tuple(Symbol.for('options'), []), new ElixirScript.Core.Tuple(Symbol.for('version'), [55, 46, 49, 46, 50]), new ElixirScript.Core.Tuple(Symbol.for('source'), '/private/tmp/elixir-20170929-51947-wgj4qu/elixir-1.5.2/lib/elixir/lib/enum.ex')]], [Symbol.for('md5'), new ElixirScript.Core.BitString(ElixirScript.Core.BitString.integer(174), ElixirScript.Core.BitString.integer(214), ElixirScript.Core.BitString.integer(118), ElixirScript.Core.BitString.integer(19), ElixirScript.Core.BitString.integer(80), ElixirScript.Core.BitString.integer(226), ElixirScript.Core.BitString.integer(155), ElixirScript.Core.BitString.integer(104), ElixirScript.Core.BitString.integer(173), ElixirScript.Core.BitString.integer(41), ElixirScript.Core.BitString.integer(191), ElixirScript.Core.BitString.integer(218), ElixirScript.Core.BitString.integer(20), ElixirScript.Core.BitString.integer(86), ElixirScript.Core.BitString.integer(100), ElixirScript.Core.BitString.integer(84))], [Symbol.for('module'), Symbol.for('Elixir.Enumerable.List')]]);

        const value = __info__map__.get(kind);

        if (value !== null) {
            return value;
        }

        throw new ElixirScript.Core.Patterns.MatchError(kind);
    }

    function __impl__(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('for')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.List.__load(Elixir);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('target')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.Enumerable.List.__load(Elixir);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('protocol')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.Enumerable.__load(Elixir);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function count(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('_list')], __function_args__, (_list0) => {
                return true;
            })) !== null) {
                let [_list0] = __arg_matches__;

                return new ElixirScript.Core.Tuple(Symbol.for('error'), Elixir.Enumerable.List.__load(Elixir));
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function member__qmark__(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('_list'), ElixirScript.Core.Patterns.variable('_value')], __function_args__, (_list0, _value0) => {
                return true;
            })) !== null) {
                let [_list0, _value0] = __arg_matches__;

                return new ElixirScript.Core.Tuple(Symbol.for('error'), Elixir.Enumerable.List.__load(Elixir));
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function reduce(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('_'), ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                values: [Symbol.for('halt'), ElixirScript.Core.Patterns.variable('acc')]
            }), ElixirScript.Core.Patterns.variable('_fun')], __function_args__, (acc0, _fun0) => {
                return true;
            })) !== null) {
                let [acc0, _fun0] = __arg_matches__;

                return new ElixirScript.Core.Tuple(Symbol.for('halted'), acc0);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('list'), ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                values: [Symbol.for('suspend'), ElixirScript.Core.Patterns.variable('acc')]
            }), ElixirScript.Core.Patterns.variable('fun')], __function_args__, (list0, acc0, fun0) => {
                return true;
            })) !== null) {
                let [list0, acc0, fun0] = __arg_matches__;

                return new ElixirScript.Core.Tuple(Symbol.for('suspended'), acc0, (...__function_args__) => {
                    function recur(...__function_args__) {
                        let __arg_matches__ = null;

                        if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('x1')], __function_args__, (x10) => {
                            return true;
                        })) !== null) {
                            let [x10] = __arg_matches__;

                            return reduce(list0, x10, fun0);
                        }

                        throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
                    }

                    return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
                });
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([[], ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                values: [Symbol.for('cont'), ElixirScript.Core.Patterns.variable('acc')]
            }), ElixirScript.Core.Patterns.variable('_fun')], __function_args__, (acc0, _fun0) => {
                return true;
            })) !== null) {
                let [acc0, _fun0] = __arg_matches__;

                return new ElixirScript.Core.Tuple(Symbol.for('done'), acc0);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.headTail(ElixirScript.Core.Patterns.variable('h'), ElixirScript.Core.Patterns.variable('t')), ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                values: [Symbol.for('cont'), ElixirScript.Core.Patterns.variable('acc')]
            }), ElixirScript.Core.Patterns.variable('fun')], __function_args__, (h0, t0, acc0, fun0) => {
                return true;
            })) !== null) {
                let [h0, t0, acc0, fun0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, t0, fun0(h0, acc0), fun0));
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    const __exports = {
        __impl__,
        count,
        member__qmark__,
        reduce,
        __MODULE__: Symbol.for('Elixir.Enumerable.List'),
        __info__
    };

    Elixir.Enumerable.List.__exports = __exports

    return __exports;
}
ElixirScript.Core.Functions.build_namespace(Elixir, 'Elixir.Enumerable.IO.Stream').__load = function(Elixir) {
    if (Elixir.Enumerable.IO.Stream.__exports)
        return Elixir.Enumerable.IO.Stream.__exports;

    function __info__(kind) {
        const __info__map__ = new Map([[Symbol.for('functions'), [new ElixirScript.Core.Tuple(Symbol.for('__impl__'), 1), new ElixirScript.Core.Tuple(Symbol.for('count'), 1), new ElixirScript.Core.Tuple(Symbol.for('member?'), 2), new ElixirScript.Core.Tuple(Symbol.for('reduce'), 3)]], [Symbol.for('macros'), []], [Symbol.for('attributes'), [new ElixirScript.Core.Tuple(Symbol.for('vsn'), [246323666854171726478968809576807816527]), new ElixirScript.Core.Tuple(Symbol.for('behaviour'), [Elixir.Enumerable.__load(Elixir)]), new ElixirScript.Core.Tuple(Symbol.for('protocol_impl'), [new ElixirScript.Core.Tuple(Symbol.for('protocol'), Elixir.Enumerable.__load(Elixir)), new ElixirScript.Core.Tuple(Symbol.for('for'), Elixir.IO.Stream.__load(Elixir))])]], [Symbol.for('compile'), [new ElixirScript.Core.Tuple(Symbol.for('options'), []), new ElixirScript.Core.Tuple(Symbol.for('version'), [55, 46, 49, 46, 50]), new ElixirScript.Core.Tuple(Symbol.for('source'), '/private/tmp/elixir-20170929-51947-wgj4qu/elixir-1.5.2/lib/elixir/lib/io/stream.ex')]], [Symbol.for('md5'), new ElixirScript.Core.BitString(ElixirScript.Core.BitString.integer(185), ElixirScript.Core.BitString.integer(80), ElixirScript.Core.BitString.integer(54), ElixirScript.Core.BitString.integer(108), ElixirScript.Core.BitString.integer(253), ElixirScript.Core.BitString.integer(181), ElixirScript.Core.BitString.integer(176), ElixirScript.Core.BitString.integer(46), ElixirScript.Core.BitString.integer(104), ElixirScript.Core.BitString.integer(124), ElixirScript.Core.BitString.integer(50), ElixirScript.Core.BitString.integer(22), ElixirScript.Core.BitString.integer(58), ElixirScript.Core.BitString.integer(24), ElixirScript.Core.BitString.integer(93), ElixirScript.Core.BitString.integer(79))], [Symbol.for('module'), Symbol.for('Elixir.Enumerable.IO.Stream')]]);

        const value = __info__map__.get(kind);

        if (value !== null) {
            return value;
        }

        throw new ElixirScript.Core.Patterns.MatchError(kind);
    }

    function __impl__(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('for')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.IO.Stream.__load(Elixir);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('target')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.Enumerable.IO.Stream.__load(Elixir);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('protocol')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.Enumerable.__load(Elixir);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function count(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('_stream')], __function_args__, (_stream0) => {
                return true;
            })) !== null) {
                let [_stream0] = __arg_matches__;

                return new ElixirScript.Core.Tuple(Symbol.for('error'), Elixir.Enumerable.IO.Stream.__load(Elixir));
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function member__qmark__(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('_stream'), ElixirScript.Core.Patterns.variable('_term')], __function_args__, (_stream0, _term0) => {
                return true;
            })) !== null) {
                let [_stream0, _term0] = __arg_matches__;

                return new ElixirScript.Core.Tuple(Symbol.for('error'), Elixir.Enumerable.IO.Stream.__load(Elixir));
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function reduce(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([new Map([[Symbol.for('device'), ElixirScript.Core.Patterns.variable('device')], [Symbol.for('raw'), ElixirScript.Core.Patterns.variable('raw')], [Symbol.for('line_or_bytes'), ElixirScript.Core.Patterns.variable('line_or_bytes')]]), ElixirScript.Core.Patterns.variable('acc'), ElixirScript.Core.Patterns.variable('fun')], __function_args__, (device0, raw0, line_or_bytes0, acc0, fun0) => {
                return true;
            })) !== null) {
                let [device0, raw0, line_or_bytes0, acc0, fun0] = __arg_matches__;

                const [next_fun0] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.variable('next_fun'), ElixirScript.Core.Patterns.defmatch(ElixirScript.Core.Patterns.clause([true], () => {
                    return (...__function_args__) => {
                        function recur(...__function_args__) {
                            let __arg_matches__ = null;

                            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('x1')], __function_args__, (x10) => {
                                return true;
                            })) !== null) {
                                let [x10] = __arg_matches__;

                                return Elixir.IO.__load(Elixir).each_binstream(x10, line_or_bytes0);
                            }

                            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
                        }

                        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
                    };
                }, () => {
                    return true;
                }), ElixirScript.Core.Patterns.clause([false], () => {
                    return (...__function_args__) => {
                        function recur(...__function_args__) {
                            let __arg_matches__ = null;

                            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('x1')], __function_args__, (x10) => {
                                return true;
                            })) !== null) {
                                let [x10] = __arg_matches__;

                                return Elixir.IO.__load(Elixir).each_stream(x10, line_or_bytes0);
                            }

                            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
                        }

                        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
                    };
                }, () => {
                    return true;
                })).call(this, raw0));

                return Elixir.Stream.__load(Elixir).resource((...__function_args__) => {
                    function recur(...__function_args__) {
                        let __arg_matches__ = null;

                        if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([], __function_args__, () => {
                            return true;
                        })) !== null) {
                            let [] = __arg_matches__;

                            return device0;
                        }

                        throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
                    }

                    return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
                }, next_fun0, (...__function_args__) => {
                    function recur(...__function_args__) {
                        let __arg_matches__ = null;

                        if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('x1')], __function_args__, (x10) => {
                            return true;
                        })) !== null) {
                            let [x10] = __arg_matches__;

                            return x10;
                        }

                        throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
                    }

                    return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
                })(acc0, fun0);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    const __exports = {
        __impl__,
        count,
        member__qmark__,
        reduce,
        __MODULE__: Symbol.for('Elixir.Enumerable.IO.Stream'),
        __info__
    };

    Elixir.Enumerable.IO.Stream.__exports = __exports

    return __exports;
}
ElixirScript.Core.Functions.build_namespace(Elixir, 'Elixir.IO.StreamError').__load = function(Elixir) {
    if (Elixir.IO.StreamError.__exports)
        return Elixir.IO.StreamError.__exports;

    function __info__(kind) {
        const __info__map__ = new Map([[Symbol.for('functions'), [new ElixirScript.Core.Tuple(Symbol.for('__struct__'), 0), new ElixirScript.Core.Tuple(Symbol.for('__struct__'), 1), new ElixirScript.Core.Tuple(Symbol.for('exception'), 1), new ElixirScript.Core.Tuple(Symbol.for('message'), 1)]], [Symbol.for('macros'), []], [Symbol.for('attributes'), [new ElixirScript.Core.Tuple(Symbol.for('vsn'), [39384535476127070889022742654045423495]), new ElixirScript.Core.Tuple(Symbol.for('behaviour'), [Elixir.Exception.__load(Elixir)])]], [Symbol.for('compile'), [new ElixirScript.Core.Tuple(Symbol.for('options'), []), new ElixirScript.Core.Tuple(Symbol.for('version'), [55, 46, 49, 46, 50]), new ElixirScript.Core.Tuple(Symbol.for('source'), '/private/tmp/elixir-20170929-51947-wgj4qu/elixir-1.5.2/lib/elixir/lib/io/stream.ex')]], [Symbol.for('md5'), new ElixirScript.Core.BitString(ElixirScript.Core.BitString.integer(29), ElixirScript.Core.BitString.integer(161), ElixirScript.Core.BitString.integer(47), ElixirScript.Core.BitString.integer(132), ElixirScript.Core.BitString.integer(235), ElixirScript.Core.BitString.integer(35), ElixirScript.Core.BitString.integer(61), ElixirScript.Core.BitString.integer(110), ElixirScript.Core.BitString.integer(139), ElixirScript.Core.BitString.integer(1), ElixirScript.Core.BitString.integer(224), ElixirScript.Core.BitString.integer(107), ElixirScript.Core.BitString.integer(240), ElixirScript.Core.BitString.integer(164), ElixirScript.Core.BitString.integer(135), ElixirScript.Core.BitString.integer(135))], [Symbol.for('module'), Symbol.for('Elixir.IO.StreamError')]]);

        const value = __info__map__.get(kind);

        if (value !== null) {
            return value;
        }

        throw new ElixirScript.Core.Patterns.MatchError(kind);
    }

    function __struct__(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return new Map([[Symbol.for('__exception__'), true], [Symbol.for('__struct__'), Elixir.IO.StreamError.__load(Elixir)], [Symbol.for('message'), null], [Symbol.for('reason'), null]]);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('kv576460752303357567')], __function_args__, (kv5764607523033575670) => {
                return true;
            })) !== null) {
                let [kv5764607523033575670] = __arg_matches__;

                const [map5764607523033575670, keys5764607523033575670] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                    values: [ElixirScript.Core.Patterns.variable('map576460752303357567'), ElixirScript.Core.Patterns.variable('keys576460752303357567')]
                }), Elixir.Enum.__load(Elixir).reduce(kv5764607523033575670, new ElixirScript.Core.Tuple(__struct__(), []), (...__function_args__) => {
                    function recur(...__function_args__) {
                        let __arg_matches__ = null;

                        if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                            values: [ElixirScript.Core.Patterns.variable('key576460752303357567'), ElixirScript.Core.Patterns.variable('val576460752303357567')]
                        }), ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                            values: [ElixirScript.Core.Patterns.variable('map576460752303357567'), ElixirScript.Core.Patterns.variable('keys576460752303357567')]
                        })], __function_args__, (key5764607523033575670, val5764607523033575670, map5764607523033575670, keys5764607523033575670) => {
                            return true;
                        })) !== null) {
                            let [key5764607523033575670, val5764607523033575670, map5764607523033575670, keys5764607523033575670] = __arg_matches__;

                            return new ElixirScript.Core.Tuple(ElixirScript.Core.maps.update(key5764607523033575670, val5764607523033575670, map5764607523033575670), Elixir.List.__load(Elixir).__delete__(keys5764607523033575670, key5764607523033575670));
                        }

                        throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
                    }

                    return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
                }));

                const _ref2901288 = new ElixirScript.Core.Tuple(map5764607523033575670, keys5764607523033575670);

                return ElixirScript.Core.Patterns.defmatch(ElixirScript.Core.Patterns.clause([[]], () => {
                    return map5764607523033575670;
                }, () => {
                    return true;
                }), ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.variable('_')], () => {
                    return ElixirScript.Core.erlang.error(Elixir.ArgumentError.__load(Elixir).exception('the following keys must also be given when building ' + ('struct ' + (Elixir.String.Chars.__load(Elixir).to_string(Elixir.Kernel.__load(Elixir).inspect(Elixir.IO.StreamError.__load(Elixir))) + (': ' + Elixir.String.Chars.__load(Elixir).to_string(Elixir.Kernel.__load(Elixir).inspect(keys5764607523033575670)))))));
                }, () => {
                    return true;
                })).call(this, keys5764607523033575670);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function exception(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('opts')], __function_args__, (opts0) => {
                return true;
            })) !== null) {
                let [opts0] = __arg_matches__;

                const [reason0] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.variable('reason'), Elixir.Access.__load(Elixir).get(opts0, Symbol.for('reason')));

                const [formatted0] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.variable('formatted'), ElixirScript.Core.erlang.iolist_to_binary(ElixirScript.Core.file.format_error(reason0)));

                return Elixir.IO.StreamError.__load(Elixir).__struct__(new Map([[Symbol.for('__exception__'), true], [Symbol.for('message'), 'error during streaming: ' + Elixir.String.Chars.__load(Elixir).to_string(formatted0)], [Symbol.for('reason'), reason0]]));
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    const __exports = {
        __struct__,
        exception,
        __MODULE__: Symbol.for('Elixir.IO.StreamError'),
        __info__
    };

    Elixir.IO.StreamError.__exports = __exports

    return __exports;
}
ElixirScript.Core.Functions.build_namespace(Elixir, 'Elixir.File').__load = function(Elixir) {
    if (Elixir.File.__exports)
        return Elixir.File.__exports;

    function __info__(kind) {
        const __info__map__ = new Map([[Symbol.for('functions'), [new ElixirScript.Core.Tuple(Symbol.for('cd'), 1), new ElixirScript.Core.Tuple(Symbol.for('cd!'), 1), new ElixirScript.Core.Tuple(Symbol.for('cd!'), 2), new ElixirScript.Core.Tuple(Symbol.for('chgrp'), 2), new ElixirScript.Core.Tuple(Symbol.for('chgrp!'), 2), new ElixirScript.Core.Tuple(Symbol.for('chmod'), 2), new ElixirScript.Core.Tuple(Symbol.for('chmod!'), 2), new ElixirScript.Core.Tuple(Symbol.for('chown'), 2), new ElixirScript.Core.Tuple(Symbol.for('chown!'), 2), new ElixirScript.Core.Tuple(Symbol.for('close'), 1), new ElixirScript.Core.Tuple(Symbol.for('copy'), 2), new ElixirScript.Core.Tuple(Symbol.for('copy'), 3), new ElixirScript.Core.Tuple(Symbol.for('copy!'), 2), new ElixirScript.Core.Tuple(Symbol.for('copy!'), 3), new ElixirScript.Core.Tuple(Symbol.for('cp'), 2), new ElixirScript.Core.Tuple(Symbol.for('cp'), 3), new ElixirScript.Core.Tuple(Symbol.for('cp!'), 2), new ElixirScript.Core.Tuple(Symbol.for('cp!'), 3), new ElixirScript.Core.Tuple(Symbol.for('cp_r'), 2), new ElixirScript.Core.Tuple(Symbol.for('cp_r'), 3), new ElixirScript.Core.Tuple(Symbol.for('cp_r!'), 2), new ElixirScript.Core.Tuple(Symbol.for('cp_r!'), 3), new ElixirScript.Core.Tuple(Symbol.for('cwd'), 0), new ElixirScript.Core.Tuple(Symbol.for('cwd!'), 0), new ElixirScript.Core.Tuple(Symbol.for('dir?'), 1), new ElixirScript.Core.Tuple(Symbol.for('exists?'), 1), new ElixirScript.Core.Tuple(Symbol.for('ln'), 2), new ElixirScript.Core.Tuple(Symbol.for('ln!'), 2), new ElixirScript.Core.Tuple(Symbol.for('ln_s'), 2), new ElixirScript.Core.Tuple(Symbol.for('ln_s!'), 2), new ElixirScript.Core.Tuple(Symbol.for('ls'), 0), new ElixirScript.Core.Tuple(Symbol.for('ls'), 1), new ElixirScript.Core.Tuple(Symbol.for('ls!'), 0), new ElixirScript.Core.Tuple(Symbol.for('ls!'), 1), new ElixirScript.Core.Tuple(Symbol.for('lstat'), 1), new ElixirScript.Core.Tuple(Symbol.for('lstat'), 2), new ElixirScript.Core.Tuple(Symbol.for('lstat!'), 1), new ElixirScript.Core.Tuple(Symbol.for('lstat!'), 2), new ElixirScript.Core.Tuple(Symbol.for('mkdir'), 1), new ElixirScript.Core.Tuple(Symbol.for('mkdir!'), 1), new ElixirScript.Core.Tuple(Symbol.for('mkdir_p'), 1), new ElixirScript.Core.Tuple(Symbol.for('mkdir_p!'), 1), new ElixirScript.Core.Tuple(Symbol.for('open'), 1), new ElixirScript.Core.Tuple(Symbol.for('open'), 2), new ElixirScript.Core.Tuple(Symbol.for('open'), 3), new ElixirScript.Core.Tuple(Symbol.for('open!'), 1), new ElixirScript.Core.Tuple(Symbol.for('open!'), 2), new ElixirScript.Core.Tuple(Symbol.for('open!'), 3), new ElixirScript.Core.Tuple(Symbol.for('read'), 1), new ElixirScript.Core.Tuple(Symbol.for('read!'), 1), new ElixirScript.Core.Tuple(Symbol.for('read_link'), 1), new ElixirScript.Core.Tuple(Symbol.for('read_link!'), 1), new ElixirScript.Core.Tuple(Symbol.for('regular?'), 1), new ElixirScript.Core.Tuple(Symbol.for('rename'), 2), new ElixirScript.Core.Tuple(Symbol.for('rm'), 1), new ElixirScript.Core.Tuple(Symbol.for('rm!'), 1), new ElixirScript.Core.Tuple(Symbol.for('rm_rf'), 1), new ElixirScript.Core.Tuple(Symbol.for('rm_rf!'), 1), new ElixirScript.Core.Tuple(Symbol.for('rmdir'), 1), new ElixirScript.Core.Tuple(Symbol.for('rmdir!'), 1), new ElixirScript.Core.Tuple(Symbol.for('stat'), 1), new ElixirScript.Core.Tuple(Symbol.for('stat'), 2), new ElixirScript.Core.Tuple(Symbol.for('stat!'), 1), new ElixirScript.Core.Tuple(Symbol.for('stat!'), 2), new ElixirScript.Core.Tuple(Symbol.for('stream!'), 1), new ElixirScript.Core.Tuple(Symbol.for('stream!'), 2), new ElixirScript.Core.Tuple(Symbol.for('stream!'), 3), new ElixirScript.Core.Tuple(Symbol.for('touch'), 1), new ElixirScript.Core.Tuple(Symbol.for('touch'), 2), new ElixirScript.Core.Tuple(Symbol.for('touch!'), 1), new ElixirScript.Core.Tuple(Symbol.for('touch!'), 2), new ElixirScript.Core.Tuple(Symbol.for('write'), 2), new ElixirScript.Core.Tuple(Symbol.for('write'), 3), new ElixirScript.Core.Tuple(Symbol.for('write!'), 2), new ElixirScript.Core.Tuple(Symbol.for('write!'), 3), new ElixirScript.Core.Tuple(Symbol.for('write_stat'), 2), new ElixirScript.Core.Tuple(Symbol.for('write_stat'), 3), new ElixirScript.Core.Tuple(Symbol.for('write_stat!'), 2), new ElixirScript.Core.Tuple(Symbol.for('write_stat!'), 3)]], [Symbol.for('macros'), []], [Symbol.for('attributes'), [new ElixirScript.Core.Tuple(Symbol.for('vsn'), [148242840408392423407295935578678119201])]], [Symbol.for('compile'), [new ElixirScript.Core.Tuple(Symbol.for('options'), []), new ElixirScript.Core.Tuple(Symbol.for('version'), [55, 46, 49, 46, 50]), new ElixirScript.Core.Tuple(Symbol.for('source'), '/private/tmp/elixir-20170929-51947-wgj4qu/elixir-1.5.2/lib/elixir/lib/file.ex')]], [Symbol.for('md5'), new ElixirScript.Core.BitString(ElixirScript.Core.BitString.integer(111), ElixirScript.Core.BitString.integer(134), ElixirScript.Core.BitString.integer(136), ElixirScript.Core.BitString.integer(84), ElixirScript.Core.BitString.integer(110), ElixirScript.Core.BitString.integer(254), ElixirScript.Core.BitString.integer(196), ElixirScript.Core.BitString.integer(160), ElixirScript.Core.BitString.integer(187), ElixirScript.Core.BitString.integer(190), ElixirScript.Core.BitString.integer(211), ElixirScript.Core.BitString.integer(175), ElixirScript.Core.BitString.integer(133), ElixirScript.Core.BitString.integer(222), ElixirScript.Core.BitString.integer(75), ElixirScript.Core.BitString.integer(33))], [Symbol.for('module'), Symbol.for('Elixir.File')]]);

        const value = __info__map__.get(kind);

        if (value !== null) {
            return value;
        }

        throw new ElixirScript.Core.Patterns.MatchError(kind);
    }

    function close(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('io_device')], __function_args__, (io_device0) => {
                return true;
            })) !== null) {
                let [io_device0] = __arg_matches__;

                return ElixirScript.Core.file.close(io_device0);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function normalize_modes(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.headTail(Symbol.for('utf8'), ElixirScript.Core.Patterns.variable('rest')), ElixirScript.Core.Patterns.variable('binary?')], __function_args__, (rest0, binary__qmark__0) => {
                return true;
            })) !== null) {
                let [rest0, binary__qmark__0] = __arg_matches__;

                return ElixirScript.Core.erlang.list_concatenation([new ElixirScript.Core.Tuple(Symbol.for('encoding'), Symbol.for('utf8'))], normalize_modes(rest0, binary__qmark__0));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.headTail(Symbol.for('read_ahead'), ElixirScript.Core.Patterns.variable('rest')), ElixirScript.Core.Patterns.variable('binary?')], __function_args__, (rest0, binary__qmark__0) => {
                return true;
            })) !== null) {
                let [rest0, binary__qmark__0] = __arg_matches__;

                return ElixirScript.Core.erlang.list_concatenation([new ElixirScript.Core.Tuple(Symbol.for('read_ahead'), 65536)], normalize_modes(rest0, binary__qmark__0));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.headTail(ElixirScript.Core.Patterns.variable('mode'), ElixirScript.Core.Patterns.variable('rest')), ElixirScript.Core.Patterns.variable('_binary?')], __function_args__, (mode0, rest0, _binary__qmark__0) => {
                return mode0 === Symbol.for('char_list') || mode0 === Symbol.for('charlist');
            })) !== null) {
                let [mode0, rest0, _binary__qmark__0] = __arg_matches__;

                ElixirScript.Core.Patterns.defmatch(ElixirScript.Core.Patterns.clause([false], () => {
                    return null;
                }, () => {
                    return true;
                }), ElixirScript.Core.Patterns.clause([true], () => {
                    return Elixir.IO.__load(Elixir).warn('the :char_list mode is deprecated, use :charlist');
                }, () => {
                    return true;
                })).call(this, ElixirScript.Core.erlang.equals(mode0, Symbol.for('char_list')))

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, rest0, false));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.headTail(ElixirScript.Core.Patterns.variable('mode'), ElixirScript.Core.Patterns.variable('rest')), ElixirScript.Core.Patterns.variable('binary?')], __function_args__, (mode0, rest0, binary__qmark__0) => {
                return true;
            })) !== null) {
                let [mode0, rest0, binary__qmark__0] = __arg_matches__;

                return ElixirScript.Core.Functions.concat(mode0, normalize_modes(rest0, binary__qmark__0));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([[], true], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return [Symbol.for('binary')];
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([[], false], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return [];
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function open(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('path'), ElixirScript.Core.Patterns.variable('modes')], __function_args__, (path0, modes0) => {
                return ElixirScript.Core.erlang.is_list(modes0);
            })) !== null) {
                let [path0, modes0] = __arg_matches__;

                return ElixirScript.Core.file.open(Elixir.IO.__load(Elixir).chardata_to_string(path0), normalize_modes(modes0, true));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('path'), ElixirScript.Core.Patterns.variable('function')], __function_args__, (path0, __function__0) => {
                return ElixirScript.Core.erlang.is_function(__function__0, 1);
            })) !== null) {
                let [path0, __function__0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, path0, [], __function__0));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('path'), ElixirScript.Core.Patterns.variable('modes'), ElixirScript.Core.Patterns.variable('function')], __function_args__, (path0, modes0, __function__0) => {
                return ElixirScript.Core.erlang.is_list(modes0) && ElixirScript.Core.erlang.is_function(__function__0, 1);
            })) !== null) {
                let [path0, modes0, __function__0] = __arg_matches__;

                return ElixirScript.Core.Patterns.defmatch(ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                    values: [Symbol.for('ok'), ElixirScript.Core.Patterns.variable('io_device')]
                })], (io_device0) => {
                    return ElixirScript.Core.SpecialForms._try(() => {
                        return new ElixirScript.Core.Tuple(Symbol.for('ok'), __function__0(io_device0));
                    }, null, null, null, () => {
                        const [] = ElixirScript.Core.Patterns.match(Symbol.for('ok'), close(io_device0));

                        return [];
                    });
                }, (io_device0) => {
                    return true;
                }), ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.variable('other')], (other0) => {
                    return other0;
                }, (other0) => {
                    return true;
                })).call(this, open(path0, modes0));
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function stat(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('x0')], __function_args__, (x00) => {
                return true;
            })) !== null) {
                let [x00] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, x00, []));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('path'), ElixirScript.Core.Patterns.variable('opts')], __function_args__, (path0, opts0) => {
                return true;
            })) !== null) {
                let [path0, opts0] = __arg_matches__;

                const [opts1] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.variable('opts'), Elixir.Keyword.__load(Elixir).put_new(opts0, Symbol.for('time'), Symbol.for('universal')));

                return ElixirScript.Core.Patterns.defmatch(ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                    values: [Symbol.for('ok'), ElixirScript.Core.Patterns.variable('fileinfo')]
                })], (fileinfo0) => {
                    return new ElixirScript.Core.Tuple(Symbol.for('ok'), Elixir.File.Stat.__load(Elixir).from_record(fileinfo0));
                }, (fileinfo0) => {
                    return true;
                }), ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.variable('error')], (error0) => {
                    return error0;
                }, (error0) => {
                    return true;
                })).call(this, ElixirScript.Core.file.read_file_info(Elixir.IO.__load(Elixir).chardata_to_string(path0), opts1));
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    const __exports = {
        close,
        open,
        stat,
        __MODULE__: Symbol.for('Elixir.File'),
        __info__
    };

    Elixir.File.__exports = __exports

    return __exports;
}
ElixirScript.Core.Functions.build_namespace(Elixir, 'Elixir.File.Error').__load = function(Elixir) {
    if (Elixir.File.Error.__exports)
        return Elixir.File.Error.__exports;

    function __info__(kind) {
        const __info__map__ = new Map([[Symbol.for('functions'), [new ElixirScript.Core.Tuple(Symbol.for('__struct__'), 0), new ElixirScript.Core.Tuple(Symbol.for('__struct__'), 1), new ElixirScript.Core.Tuple(Symbol.for('exception'), 1), new ElixirScript.Core.Tuple(Symbol.for('message'), 1)]], [Symbol.for('macros'), []], [Symbol.for('attributes'), [new ElixirScript.Core.Tuple(Symbol.for('vsn'), [47509202473523436012368381899347079190]), new ElixirScript.Core.Tuple(Symbol.for('behaviour'), [Elixir.Exception.__load(Elixir)])]], [Symbol.for('compile'), [new ElixirScript.Core.Tuple(Symbol.for('options'), []), new ElixirScript.Core.Tuple(Symbol.for('version'), [55, 46, 49, 46, 50]), new ElixirScript.Core.Tuple(Symbol.for('source'), '/private/tmp/elixir-20170929-51947-wgj4qu/elixir-1.5.2/lib/elixir/lib/exception.ex')]], [Symbol.for('md5'), new ElixirScript.Core.BitString(ElixirScript.Core.BitString.integer(35), ElixirScript.Core.BitString.integer(189), ElixirScript.Core.BitString.integer(240), ElixirScript.Core.BitString.integer(135), ElixirScript.Core.BitString.integer(131), ElixirScript.Core.BitString.integer(114), ElixirScript.Core.BitString.integer(238), ElixirScript.Core.BitString.integer(241), ElixirScript.Core.BitString.integer(186), ElixirScript.Core.BitString.integer(114), ElixirScript.Core.BitString.integer(210), ElixirScript.Core.BitString.integer(118), ElixirScript.Core.BitString.integer(208), ElixirScript.Core.BitString.integer(116), ElixirScript.Core.BitString.integer(48), ElixirScript.Core.BitString.integer(22))], [Symbol.for('module'), Symbol.for('Elixir.File.Error')]]);

        const value = __info__map__.get(kind);

        if (value !== null) {
            return value;
        }

        throw new ElixirScript.Core.Patterns.MatchError(kind);
    }

    function __struct__(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return new Map([[Symbol.for('__exception__'), true], [Symbol.for('__struct__'), Elixir.File.Error.__load(Elixir)], [Symbol.for('action'), ''], [Symbol.for('path'), null], [Symbol.for('reason'), null]]);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('kv576460752303361564')], __function_args__, (kv5764607523033615640) => {
                return true;
            })) !== null) {
                let [kv5764607523033615640] = __arg_matches__;

                const [map5764607523033615640, keys5764607523033615640] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                    values: [ElixirScript.Core.Patterns.variable('map576460752303361564'), ElixirScript.Core.Patterns.variable('keys576460752303361564')]
                }), Elixir.Enum.__load(Elixir).reduce(kv5764607523033615640, new ElixirScript.Core.Tuple(__struct__(), []), (...__function_args__) => {
                    function recur(...__function_args__) {
                        let __arg_matches__ = null;

                        if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                            values: [ElixirScript.Core.Patterns.variable('key576460752303361564'), ElixirScript.Core.Patterns.variable('val576460752303361564')]
                        }), ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                            values: [ElixirScript.Core.Patterns.variable('map576460752303361564'), ElixirScript.Core.Patterns.variable('keys576460752303361564')]
                        })], __function_args__, (key5764607523033615640, val5764607523033615640, map5764607523033615640, keys5764607523033615640) => {
                            return true;
                        })) !== null) {
                            let [key5764607523033615640, val5764607523033615640, map5764607523033615640, keys5764607523033615640] = __arg_matches__;

                            return new ElixirScript.Core.Tuple(ElixirScript.Core.maps.update(key5764607523033615640, val5764607523033615640, map5764607523033615640), Elixir.List.__load(Elixir).__delete__(keys5764607523033615640, key5764607523033615640));
                        }

                        throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
                    }

                    return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
                }));

                const _ref5954272 = new ElixirScript.Core.Tuple(map5764607523033615640, keys5764607523033615640);

                return ElixirScript.Core.Patterns.defmatch(ElixirScript.Core.Patterns.clause([[]], () => {
                    return map5764607523033615640;
                }, () => {
                    return true;
                }), ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.variable('_')], () => {
                    return ElixirScript.Core.erlang.error(Elixir.ArgumentError.__load(Elixir).exception('the following keys must also be given when building ' + ('struct ' + (Elixir.String.Chars.__load(Elixir).to_string(Elixir.Kernel.__load(Elixir).inspect(Elixir.File.Error.__load(Elixir))) + (': ' + Elixir.String.Chars.__load(Elixir).to_string(Elixir.Kernel.__load(Elixir).inspect(keys5764607523033615640)))))));
                }, () => {
                    return true;
                })).call(this, keys5764607523033615640);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function exception(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('args576460752303361628')], __function_args__, (args5764607523033616280) => {
                return ElixirScript.Core.erlang.is_list(args5764607523033616280);
            })) !== null) {
                let [args5764607523033616280] = __arg_matches__;

                const [struct5764607523033616280] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.variable('struct576460752303361628'), __struct__());

                const [valid5764607523033616280, invalid5764607523033616280] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                    values: [ElixirScript.Core.Patterns.variable('valid576460752303361628'), ElixirScript.Core.Patterns.variable('invalid576460752303361628')]
                }), Elixir.Enum.__load(Elixir).split_with(args5764607523033616280, (...__function_args__) => {
                    function recur(...__function_args__) {
                        let __arg_matches__ = null;

                        if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                            values: [ElixirScript.Core.Patterns.variable('k576460752303361628'), ElixirScript.Core.Patterns.variable('_')]
                        })], __function_args__, (k5764607523033616280) => {
                            return true;
                        })) !== null) {
                            let [k5764607523033616280] = __arg_matches__;

                            return ElixirScript.Core.maps.is_key(k5764607523033616280, struct5764607523033616280);
                        }

                        throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
                    }

                    return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
                }));

                const _ref2645632 = new ElixirScript.Core.Tuple(valid5764607523033616280, invalid5764607523033616280);

                ElixirScript.Core.Patterns.defmatch(ElixirScript.Core.Patterns.clause([[]], () => {
                    return Symbol.for('ok');
                }, () => {
                    return true;
                }), ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.variable('_')], () => {
                    return Elixir.IO.__load(Elixir).warn('the following fields are unknown when raising ' + (Elixir.String.Chars.__load(Elixir).to_string(Elixir.Kernel.__load(Elixir).inspect(Elixir.File.Error.__load(Elixir))) + (': ' + (Elixir.String.Chars.__load(Elixir).to_string(Elixir.Kernel.__load(Elixir).inspect(invalid5764607523033616280)) + '. ')) + ('Please make sure to only give known fields when raising ' + ('or redefine ' + (Elixir.String.Chars.__load(Elixir).to_string(Elixir.Kernel.__load(Elixir).inspect(Elixir.File.Error.__load(Elixir))) + '.exception/1 to ') + ('discard unknown fields. Future Elixir versions will raise on ' + 'unknown fields given to raise/2')))));
                }, () => {
                    return true;
                })).call(this, invalid5764607523033616280)

                return Elixir.Kernel.__load(Elixir).struct__emark__(struct5764607523033616280, valid5764607523033616280);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    const __exports = {
        __struct__,
        exception,
        __MODULE__: Symbol.for('Elixir.File.Error'),
        __info__
    };

    Elixir.File.Error.__exports = __exports

    return __exports;
}
ElixirScript.Core.Functions.build_namespace(Elixir, 'Elixir.Protocol.UndefinedError').__load = function(Elixir) {
    if (Elixir.Protocol.UndefinedError.__exports)
        return Elixir.Protocol.UndefinedError.__exports;

    function __info__(kind) {
        const __info__map__ = new Map([[Symbol.for('functions'), [new ElixirScript.Core.Tuple(Symbol.for('__struct__'), 0), new ElixirScript.Core.Tuple(Symbol.for('__struct__'), 1), new ElixirScript.Core.Tuple(Symbol.for('exception'), 1), new ElixirScript.Core.Tuple(Symbol.for('message'), 1)]], [Symbol.for('macros'), []], [Symbol.for('attributes'), [new ElixirScript.Core.Tuple(Symbol.for('vsn'), [235305223164949534635361447175377613475]), new ElixirScript.Core.Tuple(Symbol.for('behaviour'), [Elixir.Exception.__load(Elixir)])]], [Symbol.for('compile'), [new ElixirScript.Core.Tuple(Symbol.for('options'), []), new ElixirScript.Core.Tuple(Symbol.for('version'), [55, 46, 49, 46, 50]), new ElixirScript.Core.Tuple(Symbol.for('source'), '/private/tmp/elixir-20170929-51947-wgj4qu/elixir-1.5.2/lib/elixir/lib/exception.ex')]], [Symbol.for('md5'), new ElixirScript.Core.BitString(ElixirScript.Core.BitString.integer(177), ElixirScript.Core.BitString.integer(6), ElixirScript.Core.BitString.integer(35), ElixirScript.Core.BitString.integer(53), ElixirScript.Core.BitString.integer(150), ElixirScript.Core.BitString.integer(13), ElixirScript.Core.BitString.integer(213), ElixirScript.Core.BitString.integer(93), ElixirScript.Core.BitString.integer(175), ElixirScript.Core.BitString.integer(237), ElixirScript.Core.BitString.integer(86), ElixirScript.Core.BitString.integer(59), ElixirScript.Core.BitString.integer(73), ElixirScript.Core.BitString.integer(63), ElixirScript.Core.BitString.integer(114), ElixirScript.Core.BitString.integer(163))], [Symbol.for('module'), Symbol.for('Elixir.Protocol.UndefinedError')]]);

        const value = __info__map__.get(kind);

        if (value !== null) {
            return value;
        }

        throw new ElixirScript.Core.Patterns.MatchError(kind);
    }

    function __struct__(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return new Map([[Symbol.for('__exception__'), true], [Symbol.for('__struct__'), Elixir.Protocol.UndefinedError.__load(Elixir)], [Symbol.for('description'), ''], [Symbol.for('protocol'), null], [Symbol.for('value'), null]]);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('kv576460752303368252')], __function_args__, (kv5764607523033682520) => {
                return true;
            })) !== null) {
                let [kv5764607523033682520] = __arg_matches__;

                const [map5764607523033682520, keys5764607523033682520] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                    values: [ElixirScript.Core.Patterns.variable('map576460752303368252'), ElixirScript.Core.Patterns.variable('keys576460752303368252')]
                }), Elixir.Enum.__load(Elixir).reduce(kv5764607523033682520, new ElixirScript.Core.Tuple(__struct__(), []), (...__function_args__) => {
                    function recur(...__function_args__) {
                        let __arg_matches__ = null;

                        if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                            values: [ElixirScript.Core.Patterns.variable('key576460752303368252'), ElixirScript.Core.Patterns.variable('val576460752303368252')]
                        }), ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                            values: [ElixirScript.Core.Patterns.variable('map576460752303368252'), ElixirScript.Core.Patterns.variable('keys576460752303368252')]
                        })], __function_args__, (key5764607523033682520, val5764607523033682520, map5764607523033682520, keys5764607523033682520) => {
                            return true;
                        })) !== null) {
                            let [key5764607523033682520, val5764607523033682520, map5764607523033682520, keys5764607523033682520] = __arg_matches__;

                            return new ElixirScript.Core.Tuple(ElixirScript.Core.maps.update(key5764607523033682520, val5764607523033682520, map5764607523033682520), Elixir.List.__load(Elixir).__delete__(keys5764607523033682520, key5764607523033682520));
                        }

                        throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
                    }

                    return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
                }));

                const _ref4408775 = new ElixirScript.Core.Tuple(map5764607523033682520, keys5764607523033682520);

                return ElixirScript.Core.Patterns.defmatch(ElixirScript.Core.Patterns.clause([[]], () => {
                    return map5764607523033682520;
                }, () => {
                    return true;
                }), ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.variable('_')], () => {
                    return ElixirScript.Core.erlang.error(Elixir.ArgumentError.__load(Elixir).exception('the following keys must also be given when building ' + ('struct ' + (Elixir.String.Chars.__load(Elixir).to_string(Elixir.Kernel.__load(Elixir).inspect(Elixir.Protocol.UndefinedError.__load(Elixir))) + (': ' + Elixir.String.Chars.__load(Elixir).to_string(Elixir.Kernel.__load(Elixir).inspect(keys5764607523033682520)))))));
                }, () => {
                    return true;
                })).call(this, keys5764607523033682520);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function exception(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('args576460752303367326')], __function_args__, (args5764607523033673260) => {
                return ElixirScript.Core.erlang.is_list(args5764607523033673260);
            })) !== null) {
                let [args5764607523033673260] = __arg_matches__;

                const [struct5764607523033673260] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.variable('struct576460752303367326'), __struct__());

                const [valid5764607523033673260, invalid5764607523033673260] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                    values: [ElixirScript.Core.Patterns.variable('valid576460752303367326'), ElixirScript.Core.Patterns.variable('invalid576460752303367326')]
                }), Elixir.Enum.__load(Elixir).split_with(args5764607523033673260, (...__function_args__) => {
                    function recur(...__function_args__) {
                        let __arg_matches__ = null;

                        if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                            values: [ElixirScript.Core.Patterns.variable('k576460752303367326'), ElixirScript.Core.Patterns.variable('_')]
                        })], __function_args__, (k5764607523033673260) => {
                            return true;
                        })) !== null) {
                            let [k5764607523033673260] = __arg_matches__;

                            return ElixirScript.Core.maps.is_key(k5764607523033673260, struct5764607523033673260);
                        }

                        throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
                    }

                    return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
                }));

                const _ref183956 = new ElixirScript.Core.Tuple(valid5764607523033673260, invalid5764607523033673260);

                ElixirScript.Core.Patterns.defmatch(ElixirScript.Core.Patterns.clause([[]], () => {
                    return Symbol.for('ok');
                }, () => {
                    return true;
                }), ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.variable('_')], () => {
                    return Elixir.IO.__load(Elixir).warn('the following fields are unknown when raising ' + (Elixir.String.Chars.__load(Elixir).to_string(Elixir.Kernel.__load(Elixir).inspect(Elixir.Protocol.UndefinedError.__load(Elixir))) + (': ' + (Elixir.String.Chars.__load(Elixir).to_string(Elixir.Kernel.__load(Elixir).inspect(invalid5764607523033673260)) + '. ')) + ('Please make sure to only give known fields when raising ' + ('or redefine ' + (Elixir.String.Chars.__load(Elixir).to_string(Elixir.Kernel.__load(Elixir).inspect(Elixir.Protocol.UndefinedError.__load(Elixir))) + '.exception/1 to ') + ('discard unknown fields. Future Elixir versions will raise on ' + 'unknown fields given to raise/2')))));
                }, () => {
                    return true;
                })).call(this, invalid5764607523033673260)

                return Elixir.Kernel.__load(Elixir).struct__emark__(struct5764607523033673260, valid5764607523033673260);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    const __exports = {
        __struct__,
        exception,
        __MODULE__: Symbol.for('Elixir.Protocol.UndefinedError'),
        __info__
    };

    Elixir.Protocol.UndefinedError.__exports = __exports

    return __exports;
}
ElixirScript.Core.Functions.build_namespace(Elixir, 'Elixir.Enumerable.HashDict').__load = function(Elixir) {
    if (Elixir.Enumerable.HashDict.__exports)
        return Elixir.Enumerable.HashDict.__exports;

    function __info__(kind) {
        const __info__map__ = new Map([[Symbol.for('functions'), [new ElixirScript.Core.Tuple(Symbol.for('__impl__'), 1), new ElixirScript.Core.Tuple(Symbol.for('count'), 1), new ElixirScript.Core.Tuple(Symbol.for('member?'), 2), new ElixirScript.Core.Tuple(Symbol.for('reduce'), 3)]], [Symbol.for('macros'), []], [Symbol.for('attributes'), [new ElixirScript.Core.Tuple(Symbol.for('vsn'), [137229011705551921882350661307484497374]), new ElixirScript.Core.Tuple(Symbol.for('behaviour'), [Elixir.Enumerable.__load(Elixir)]), new ElixirScript.Core.Tuple(Symbol.for('protocol_impl'), [new ElixirScript.Core.Tuple(Symbol.for('protocol'), Elixir.Enumerable.__load(Elixir)), new ElixirScript.Core.Tuple(Symbol.for('for'), Elixir.HashDict.__load(Elixir))])]], [Symbol.for('compile'), [new ElixirScript.Core.Tuple(Symbol.for('options'), []), new ElixirScript.Core.Tuple(Symbol.for('version'), [55, 46, 49, 46, 50]), new ElixirScript.Core.Tuple(Symbol.for('source'), '/private/tmp/elixir-20170929-51947-wgj4qu/elixir-1.5.2/lib/elixir/lib/hash_dict.ex')]], [Symbol.for('md5'), new ElixirScript.Core.BitString(ElixirScript.Core.BitString.integer(103), ElixirScript.Core.BitString.integer(61), ElixirScript.Core.BitString.integer(88), ElixirScript.Core.BitString.integer(166), ElixirScript.Core.BitString.integer(88), ElixirScript.Core.BitString.integer(149), ElixirScript.Core.BitString.integer(11), ElixirScript.Core.BitString.integer(55), ElixirScript.Core.BitString.integer(14), ElixirScript.Core.BitString.integer(102), ElixirScript.Core.BitString.integer(116), ElixirScript.Core.BitString.integer(49), ElixirScript.Core.BitString.integer(192), ElixirScript.Core.BitString.integer(62), ElixirScript.Core.BitString.integer(101), ElixirScript.Core.BitString.integer(222))], [Symbol.for('module'), Symbol.for('Elixir.Enumerable.HashDict')]]);

        const value = __info__map__.get(kind);

        if (value !== null) {
            return value;
        }

        throw new ElixirScript.Core.Patterns.MatchError(kind);
    }

    function __impl__(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('for')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.HashDict.__load(Elixir);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('target')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.Enumerable.HashDict.__load(Elixir);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('protocol')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.Enumerable.__load(Elixir);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function count(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('dict')], __function_args__, (dict0) => {
                return true;
            })) !== null) {
                let [dict0] = __arg_matches__;

                const [module0] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.variable('module'), Elixir.HashDict.__load(Elixir));

                return new ElixirScript.Core.Tuple(Symbol.for('ok'), module0.size(dict0));
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function member__qmark__(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('dict'), ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                values: [ElixirScript.Core.Patterns.variable('key'), ElixirScript.Core.Patterns.variable('value')]
            })], __function_args__, (dict0, key0, value0) => {
                return true;
            })) !== null) {
                let [dict0, key0, value0] = __arg_matches__;

                const [module0] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.variable('module'), Elixir.HashDict.__load(Elixir));

                return new ElixirScript.Core.Tuple(Symbol.for('ok'), ElixirScript.Core.Patterns.defmatch(ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                    values: [Symbol.for('ok'), ElixirScript.Core.Patterns.bound(value0)]
                })], () => {
                    return true;
                }, () => {
                    return true;
                }), ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.variable('_')], () => {
                    return false;
                }, () => {
                    return true;
                })).call(this, module0.fetch(dict0, key0)));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('_dict'), ElixirScript.Core.Patterns.variable('_')], __function_args__, (_dict0) => {
                return true;
            })) !== null) {
                let [_dict0] = __arg_matches__;

                return new ElixirScript.Core.Tuple(Symbol.for('ok'), false);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function reduce(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('dict'), ElixirScript.Core.Patterns.variable('acc'), ElixirScript.Core.Patterns.variable('fun')], __function_args__, (dict0, acc0, fun0) => {
                return true;
            })) !== null) {
                let [dict0, acc0, fun0] = __arg_matches__;

                const [module0] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.variable('module'), Elixir.HashDict.__load(Elixir));

                return module0.reduce(dict0, acc0, fun0);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    const __exports = {
        __impl__,
        count,
        member__qmark__,
        reduce,
        __MODULE__: Symbol.for('Elixir.Enumerable.HashDict'),
        __info__
    };

    Elixir.Enumerable.HashDict.__exports = __exports

    return __exports;
}
ElixirScript.Core.Functions.build_namespace(Elixir, 'Elixir.Enumerable.HashSet').__load = function(Elixir) {
    if (Elixir.Enumerable.HashSet.__exports)
        return Elixir.Enumerable.HashSet.__exports;

    function __info__(kind) {
        const __info__map__ = new Map([[Symbol.for('functions'), [new ElixirScript.Core.Tuple(Symbol.for('__impl__'), 1), new ElixirScript.Core.Tuple(Symbol.for('count'), 1), new ElixirScript.Core.Tuple(Symbol.for('member?'), 2), new ElixirScript.Core.Tuple(Symbol.for('reduce'), 3)]], [Symbol.for('macros'), []], [Symbol.for('attributes'), [new ElixirScript.Core.Tuple(Symbol.for('vsn'), [79574681374943783881605710047048620718]), new ElixirScript.Core.Tuple(Symbol.for('behaviour'), [Elixir.Enumerable.__load(Elixir)]), new ElixirScript.Core.Tuple(Symbol.for('protocol_impl'), [new ElixirScript.Core.Tuple(Symbol.for('protocol'), Elixir.Enumerable.__load(Elixir)), new ElixirScript.Core.Tuple(Symbol.for('for'), Elixir.HashSet.__load(Elixir))])]], [Symbol.for('compile'), [new ElixirScript.Core.Tuple(Symbol.for('options'), []), new ElixirScript.Core.Tuple(Symbol.for('version'), [55, 46, 49, 46, 50]), new ElixirScript.Core.Tuple(Symbol.for('source'), '/private/tmp/elixir-20170929-51947-wgj4qu/elixir-1.5.2/lib/elixir/lib/hash_set.ex')]], [Symbol.for('md5'), new ElixirScript.Core.BitString(ElixirScript.Core.BitString.integer(59), ElixirScript.Core.BitString.integer(221), ElixirScript.Core.BitString.integer(134), ElixirScript.Core.BitString.integer(178), ElixirScript.Core.BitString.integer(233), ElixirScript.Core.BitString.integer(238), ElixirScript.Core.BitString.integer(0), ElixirScript.Core.BitString.integer(107), ElixirScript.Core.BitString.integer(58), ElixirScript.Core.BitString.integer(228), ElixirScript.Core.BitString.integer(125), ElixirScript.Core.BitString.integer(90), ElixirScript.Core.BitString.integer(88), ElixirScript.Core.BitString.integer(187), ElixirScript.Core.BitString.integer(218), ElixirScript.Core.BitString.integer(174))], [Symbol.for('module'), Symbol.for('Elixir.Enumerable.HashSet')]]);

        const value = __info__map__.get(kind);

        if (value !== null) {
            return value;
        }

        throw new ElixirScript.Core.Patterns.MatchError(kind);
    }

    function __impl__(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('for')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.HashSet.__load(Elixir);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('target')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.Enumerable.HashSet.__load(Elixir);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('protocol')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.Enumerable.__load(Elixir);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function count(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('set')], __function_args__, (set0) => {
                return true;
            })) !== null) {
                let [set0] = __arg_matches__;

                const [module0] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.variable('module'), Elixir.HashSet.__load(Elixir));

                return new ElixirScript.Core.Tuple(Symbol.for('ok'), module0.size(set0));
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function member__qmark__(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('set'), ElixirScript.Core.Patterns.variable('term')], __function_args__, (set0, term0) => {
                return true;
            })) !== null) {
                let [set0, term0] = __arg_matches__;

                const [module0] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.variable('module'), Elixir.HashSet.__load(Elixir));

                return new ElixirScript.Core.Tuple(Symbol.for('ok'), module0.member__qmark__(set0, term0));
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function reduce(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('set'), ElixirScript.Core.Patterns.variable('acc'), ElixirScript.Core.Patterns.variable('fun')], __function_args__, (set0, acc0, fun0) => {
                return true;
            })) !== null) {
                let [set0, acc0, fun0] = __arg_matches__;

                const [module0] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.variable('module'), Elixir.HashSet.__load(Elixir));

                return module0.reduce(set0, acc0, fun0);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    const __exports = {
        __impl__,
        count,
        member__qmark__,
        reduce,
        __MODULE__: Symbol.for('Elixir.Enumerable.HashSet'),
        __info__
    };

    Elixir.Enumerable.HashSet.__exports = __exports

    return __exports;
}
ElixirScript.Core.Functions.build_namespace(Elixir, 'Elixir.Keyword').__load = function(Elixir) {
    if (Elixir.Keyword.__exports)
        return Elixir.Keyword.__exports;

    function __info__(kind) {
        const __info__map__ = new Map([[Symbol.for('functions'), [new ElixirScript.Core.Tuple(Symbol.for('delete'), 2), new ElixirScript.Core.Tuple(Symbol.for('delete'), 3), new ElixirScript.Core.Tuple(Symbol.for('delete_first'), 2), new ElixirScript.Core.Tuple(Symbol.for('drop'), 2), new ElixirScript.Core.Tuple(Symbol.for('equal?'), 2), new ElixirScript.Core.Tuple(Symbol.for('fetch'), 2), new ElixirScript.Core.Tuple(Symbol.for('fetch!'), 2), new ElixirScript.Core.Tuple(Symbol.for('get'), 2), new ElixirScript.Core.Tuple(Symbol.for('get'), 3), new ElixirScript.Core.Tuple(Symbol.for('get_and_update'), 3), new ElixirScript.Core.Tuple(Symbol.for('get_and_update!'), 3), new ElixirScript.Core.Tuple(Symbol.for('get_lazy'), 3), new ElixirScript.Core.Tuple(Symbol.for('get_values'), 2), new ElixirScript.Core.Tuple(Symbol.for('has_key?'), 2), new ElixirScript.Core.Tuple(Symbol.for('keys'), 1), new ElixirScript.Core.Tuple(Symbol.for('keyword?'), 1), new ElixirScript.Core.Tuple(Symbol.for('merge'), 2), new ElixirScript.Core.Tuple(Symbol.for('merge'), 3), new ElixirScript.Core.Tuple(Symbol.for('new'), 0), new ElixirScript.Core.Tuple(Symbol.for('new'), 1), new ElixirScript.Core.Tuple(Symbol.for('new'), 2), new ElixirScript.Core.Tuple(Symbol.for('pop'), 2), new ElixirScript.Core.Tuple(Symbol.for('pop'), 3), new ElixirScript.Core.Tuple(Symbol.for('pop_first'), 2), new ElixirScript.Core.Tuple(Symbol.for('pop_first'), 3), new ElixirScript.Core.Tuple(Symbol.for('pop_lazy'), 3), new ElixirScript.Core.Tuple(Symbol.for('put'), 3), new ElixirScript.Core.Tuple(Symbol.for('put_new'), 3), new ElixirScript.Core.Tuple(Symbol.for('put_new_lazy'), 3), new ElixirScript.Core.Tuple(Symbol.for('replace'), 3), new ElixirScript.Core.Tuple(Symbol.for('replace!'), 3), new ElixirScript.Core.Tuple(Symbol.for('size'), 1), new ElixirScript.Core.Tuple(Symbol.for('split'), 2), new ElixirScript.Core.Tuple(Symbol.for('take'), 2), new ElixirScript.Core.Tuple(Symbol.for('to_list'), 1), new ElixirScript.Core.Tuple(Symbol.for('update'), 4), new ElixirScript.Core.Tuple(Symbol.for('update!'), 3), new ElixirScript.Core.Tuple(Symbol.for('values'), 1)]], [Symbol.for('macros'), []], [Symbol.for('attributes'), [new ElixirScript.Core.Tuple(Symbol.for('vsn'), [275970530505707129807132243880086217764])]], [Symbol.for('compile'), [new ElixirScript.Core.Tuple(Symbol.for('options'), []), new ElixirScript.Core.Tuple(Symbol.for('version'), [55, 46, 49, 46, 50]), new ElixirScript.Core.Tuple(Symbol.for('source'), '/private/tmp/elixir-20170929-51947-wgj4qu/elixir-1.5.2/lib/elixir/lib/keyword.ex')]], [Symbol.for('md5'), new ElixirScript.Core.BitString(ElixirScript.Core.BitString.integer(207), ElixirScript.Core.BitString.integer(157), ElixirScript.Core.BitString.integer(253), ElixirScript.Core.BitString.integer(168), ElixirScript.Core.BitString.integer(37), ElixirScript.Core.BitString.integer(22), ElixirScript.Core.BitString.integer(213), ElixirScript.Core.BitString.integer(125), ElixirScript.Core.BitString.integer(111), ElixirScript.Core.BitString.integer(54), ElixirScript.Core.BitString.integer(161), ElixirScript.Core.BitString.integer(155), ElixirScript.Core.BitString.integer(94), ElixirScript.Core.BitString.integer(30), ElixirScript.Core.BitString.integer(36), ElixirScript.Core.BitString.integer(36))], [Symbol.for('module'), Symbol.for('Elixir.Keyword')]]);

        const value = __info__map__.get(kind);

        if (value !== null) {
            return value;
        }

        throw new ElixirScript.Core.Patterns.MatchError(kind);
    }

    function fetch__emark__(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('keywords'), ElixirScript.Core.Patterns.variable('key')], __function_args__, (keywords0, key0) => {
                return ElixirScript.Core.erlang.is_list(keywords0) && ElixirScript.Core.erlang.is_atom(key0);
            })) !== null) {
                let [keywords0, key0] = __arg_matches__;

                return ElixirScript.Core.Patterns.defmatch(ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                    values: [ElixirScript.Core.Patterns.bound(key0), ElixirScript.Core.Patterns.variable('value')]
                })], (value0) => {
                    return value0;
                }, (value0) => {
                    return true;
                }), ElixirScript.Core.Patterns.clause([false], () => {
                    return ElixirScript.Core.erlang.error(Elixir.KeyError.__load(Elixir).exception([new ElixirScript.Core.Tuple(Symbol.for('key'), key0), new ElixirScript.Core.Tuple(Symbol.for('term'), keywords0)]));
                }, () => {
                    return true;
                })).call(this, ElixirScript.Core.lists.keyfind(key0, 1, keywords0));
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function get(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('x0'), ElixirScript.Core.Patterns.variable('x1')], __function_args__, (x00, x10) => {
                return true;
            })) !== null) {
                let [x00, x10] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, x00, x10, null));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('keywords'), ElixirScript.Core.Patterns.variable('key'), ElixirScript.Core.Patterns.variable('default')], __function_args__, (keywords0, key0, __default__0) => {
                return ElixirScript.Core.erlang.is_list(keywords0) && ElixirScript.Core.erlang.is_atom(key0);
            })) !== null) {
                let [keywords0, key0, __default__0] = __arg_matches__;

                return ElixirScript.Core.Patterns.defmatch(ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                    values: [ElixirScript.Core.Patterns.bound(key0), ElixirScript.Core.Patterns.variable('value')]
                })], (value0) => {
                    return value0;
                }, (value0) => {
                    return true;
                }), ElixirScript.Core.Patterns.clause([false], () => {
                    return __default__0;
                }, () => {
                    return true;
                })).call(this, ElixirScript.Core.lists.keyfind(key0, 1, keywords0));
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function put_new(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('keywords'), ElixirScript.Core.Patterns.variable('key'), ElixirScript.Core.Patterns.variable('value')], __function_args__, (keywords0, key0, value0) => {
                return ElixirScript.Core.erlang.is_list(keywords0) && ElixirScript.Core.erlang.is_atom(key0);
            })) !== null) {
                let [keywords0, key0, value0] = __arg_matches__;

                return ElixirScript.Core.Patterns.defmatch(ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                    values: [ElixirScript.Core.Patterns.bound(key0), ElixirScript.Core.Patterns.variable('_')]
                })], () => {
                    return keywords0;
                }, () => {
                    return true;
                }), ElixirScript.Core.Patterns.clause([false], () => {
                    return ElixirScript.Core.Functions.concat(new ElixirScript.Core.Tuple(key0, value0), keywords0);
                }, () => {
                    return true;
                })).call(this, ElixirScript.Core.lists.keyfind(key0, 1, keywords0));
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    const __exports = {
        fetch__emark__,
        get,
        put_new,
        __MODULE__: Symbol.for('Elixir.Keyword'),
        __info__
    };

    Elixir.Keyword.__exports = __exports

    return __exports;
}
ElixirScript.Core.Functions.build_namespace(Elixir, 'Elixir.Enumerable.Function').__load = function(Elixir) {
    if (Elixir.Enumerable.Function.__exports)
        return Elixir.Enumerable.Function.__exports;

    function __info__(kind) {
        const __info__map__ = new Map([[Symbol.for('functions'), [new ElixirScript.Core.Tuple(Symbol.for('__impl__'), 1), new ElixirScript.Core.Tuple(Symbol.for('count'), 1), new ElixirScript.Core.Tuple(Symbol.for('member?'), 2), new ElixirScript.Core.Tuple(Symbol.for('reduce'), 3)]], [Symbol.for('macros'), []], [Symbol.for('attributes'), [new ElixirScript.Core.Tuple(Symbol.for('vsn'), [190334158210904882719921066892047587686]), new ElixirScript.Core.Tuple(Symbol.for('behaviour'), [Elixir.Enumerable.__load(Elixir)]), new ElixirScript.Core.Tuple(Symbol.for('protocol_impl'), [new ElixirScript.Core.Tuple(Symbol.for('protocol'), Elixir.Enumerable.__load(Elixir)), new ElixirScript.Core.Tuple(Symbol.for('for'), Elixir.Function.__load(Elixir))])]], [Symbol.for('compile'), [new ElixirScript.Core.Tuple(Symbol.for('options'), []), new ElixirScript.Core.Tuple(Symbol.for('version'), [55, 46, 49, 46, 50]), new ElixirScript.Core.Tuple(Symbol.for('source'), '/private/tmp/elixir-20170929-51947-wgj4qu/elixir-1.5.2/lib/elixir/lib/enum.ex')]], [Symbol.for('md5'), new ElixirScript.Core.BitString(ElixirScript.Core.BitString.integer(143), ElixirScript.Core.BitString.integer(49), ElixirScript.Core.BitString.integer(6), ElixirScript.Core.BitString.integer(133), ElixirScript.Core.BitString.integer(115), ElixirScript.Core.BitString.integer(165), ElixirScript.Core.BitString.integer(46), ElixirScript.Core.BitString.integer(212), ElixirScript.Core.BitString.integer(61), ElixirScript.Core.BitString.integer(158), ElixirScript.Core.BitString.integer(164), ElixirScript.Core.BitString.integer(87), ElixirScript.Core.BitString.integer(207), ElixirScript.Core.BitString.integer(250), ElixirScript.Core.BitString.integer(153), ElixirScript.Core.BitString.integer(102))], [Symbol.for('module'), Symbol.for('Elixir.Enumerable.Function')]]);

        const value = __info__map__.get(kind);

        if (value !== null) {
            return value;
        }

        throw new ElixirScript.Core.Patterns.MatchError(kind);
    }

    function __impl__(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('for')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.Function.__load(Elixir);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('target')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.Enumerable.Function.__load(Elixir);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('protocol')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.Enumerable.__load(Elixir);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function count(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('_function')], __function_args__, (_function0) => {
                return true;
            })) !== null) {
                let [_function0] = __arg_matches__;

                return new ElixirScript.Core.Tuple(Symbol.for('error'), Elixir.Enumerable.Function.__load(Elixir));
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function member__qmark__(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('_function'), ElixirScript.Core.Patterns.variable('_value')], __function_args__, (_function0, _value0) => {
                return true;
            })) !== null) {
                let [_function0, _value0] = __arg_matches__;

                return new ElixirScript.Core.Tuple(Symbol.for('error'), Elixir.Enumerable.Function.__load(Elixir));
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function reduce(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('function'), ElixirScript.Core.Patterns.variable('acc'), ElixirScript.Core.Patterns.variable('fun')], __function_args__, (__function__0, acc0, fun0) => {
                return ElixirScript.Core.erlang.is_function(__function__0, 2);
            })) !== null) {
                let [__function__0, acc0, fun0] = __arg_matches__;

                return __function__0(acc0, fun0);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('function'), ElixirScript.Core.Patterns.variable('_acc'), ElixirScript.Core.Patterns.variable('_fun')], __function_args__, (__function__0, _acc0, _fun0) => {
                return true;
            })) !== null) {
                let [__function__0, _acc0, _fun0] = __arg_matches__;

                return ElixirScript.Core.erlang.error(Elixir.Protocol.UndefinedError.__load(Elixir).exception([new ElixirScript.Core.Tuple(Symbol.for('protocol'), Elixir.Enumerable.__load(Elixir)), new ElixirScript.Core.Tuple(Symbol.for('value'), __function__0), new ElixirScript.Core.Tuple(Symbol.for('description'), 'only anonymous functions of arity 2 are enumerable')]));
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    const __exports = {
        __impl__,
        count,
        member__qmark__,
        reduce,
        __MODULE__: Symbol.for('Elixir.Enumerable.Function'),
        __info__
    };

    Elixir.Enumerable.Function.__exports = __exports

    return __exports;
}
ElixirScript.Core.Functions.build_namespace(Elixir, 'Elixir.File.Stat').__load = function(Elixir) {
    if (Elixir.File.Stat.__exports)
        return Elixir.File.Stat.__exports;

    function __info__(kind) {
        const __info__map__ = new Map([[Symbol.for('functions'), [new ElixirScript.Core.Tuple(Symbol.for('__struct__'), 0), new ElixirScript.Core.Tuple(Symbol.for('__struct__'), 1), new ElixirScript.Core.Tuple(Symbol.for('from_record'), 1), new ElixirScript.Core.Tuple(Symbol.for('to_record'), 1)]], [Symbol.for('macros'), []], [Symbol.for('attributes'), [new ElixirScript.Core.Tuple(Symbol.for('vsn'), [253670265643889226480533203944692006041])]], [Symbol.for('compile'), [new ElixirScript.Core.Tuple(Symbol.for('options'), []), new ElixirScript.Core.Tuple(Symbol.for('version'), [55, 46, 49, 46, 50]), new ElixirScript.Core.Tuple(Symbol.for('source'), '/private/tmp/elixir-20170929-51947-wgj4qu/elixir-1.5.2/lib/elixir/lib/file/stat.ex')]], [Symbol.for('md5'), new ElixirScript.Core.BitString(ElixirScript.Core.BitString.integer(190), ElixirScript.Core.BitString.integer(215), ElixirScript.Core.BitString.integer(29), ElixirScript.Core.BitString.integer(182), ElixirScript.Core.BitString.integer(34), ElixirScript.Core.BitString.integer(201), ElixirScript.Core.BitString.integer(138), ElixirScript.Core.BitString.integer(167), ElixirScript.Core.BitString.integer(45), ElixirScript.Core.BitString.integer(114), ElixirScript.Core.BitString.integer(200), ElixirScript.Core.BitString.integer(89), ElixirScript.Core.BitString.integer(25), ElixirScript.Core.BitString.integer(244), ElixirScript.Core.BitString.integer(60), ElixirScript.Core.BitString.integer(153))], [Symbol.for('module'), Symbol.for('Elixir.File.Stat')]]);

        const value = __info__map__.get(kind);

        if (value !== null) {
            return value;
        }

        throw new ElixirScript.Core.Patterns.MatchError(kind);
    }

    function __struct__(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return new Map([[Symbol.for('__struct__'), Elixir.File.Stat.__load(Elixir)], [Symbol.for('access'), null], [Symbol.for('atime'), null], [Symbol.for('ctime'), null], [Symbol.for('gid'), null], [Symbol.for('inode'), null], [Symbol.for('links'), null], [Symbol.for('major_device'), null], [Symbol.for('minor_device'), null], [Symbol.for('mode'), null], [Symbol.for('mtime'), null], [Symbol.for('size'), null], [Symbol.for('type'), null], [Symbol.for('uid'), null]]);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('kv576460752303301407')], __function_args__, (kv5764607523033014070) => {
                return true;
            })) !== null) {
                let [kv5764607523033014070] = __arg_matches__;

                const [map5764607523033014070, keys5764607523033014070] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                    values: [ElixirScript.Core.Patterns.variable('map576460752303301407'), ElixirScript.Core.Patterns.variable('keys576460752303301407')]
                }), Elixir.Enum.__load(Elixir).reduce(kv5764607523033014070, new ElixirScript.Core.Tuple(__struct__(), []), (...__function_args__) => {
                    function recur(...__function_args__) {
                        let __arg_matches__ = null;

                        if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                            values: [ElixirScript.Core.Patterns.variable('key576460752303301407'), ElixirScript.Core.Patterns.variable('val576460752303301407')]
                        }), ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                            values: [ElixirScript.Core.Patterns.variable('map576460752303301407'), ElixirScript.Core.Patterns.variable('keys576460752303301407')]
                        })], __function_args__, (key5764607523033014070, val5764607523033014070, map5764607523033014070, keys5764607523033014070) => {
                            return true;
                        })) !== null) {
                            let [key5764607523033014070, val5764607523033014070, map5764607523033014070, keys5764607523033014070] = __arg_matches__;

                            return new ElixirScript.Core.Tuple(ElixirScript.Core.maps.update(key5764607523033014070, val5764607523033014070, map5764607523033014070), Elixir.List.__load(Elixir).__delete__(keys5764607523033014070, key5764607523033014070));
                        }

                        throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
                    }

                    return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
                }));

                const _ref6115573 = new ElixirScript.Core.Tuple(map5764607523033014070, keys5764607523033014070);

                return ElixirScript.Core.Patterns.defmatch(ElixirScript.Core.Patterns.clause([[]], () => {
                    return map5764607523033014070;
                }, () => {
                    return true;
                }), ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.variable('_')], () => {
                    return ElixirScript.Core.erlang.error(Elixir.ArgumentError.__load(Elixir).exception('the following keys must also be given when building ' + ('struct ' + (Elixir.String.Chars.__load(Elixir).to_string(Elixir.Kernel.__load(Elixir).inspect(Elixir.File.Stat.__load(Elixir))) + (': ' + Elixir.String.Chars.__load(Elixir).to_string(Elixir.Kernel.__load(Elixir).inspect(keys5764607523033014070)))))));
                }, () => {
                    return true;
                })).call(this, keys5764607523033014070);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function from_record(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                values: [Symbol.for('file_info'), ElixirScript.Core.Patterns.variable('size'), ElixirScript.Core.Patterns.variable('type'), ElixirScript.Core.Patterns.variable('access'), ElixirScript.Core.Patterns.variable('atime'), ElixirScript.Core.Patterns.variable('mtime'), ElixirScript.Core.Patterns.variable('ctime'), ElixirScript.Core.Patterns.variable('mode'), ElixirScript.Core.Patterns.variable('links'), ElixirScript.Core.Patterns.variable('major_device'), ElixirScript.Core.Patterns.variable('minor_device'), ElixirScript.Core.Patterns.variable('inode'), ElixirScript.Core.Patterns.variable('uid'), ElixirScript.Core.Patterns.variable('gid')]
            })], __function_args__, (size0, type0, access0, atime0, mtime0, ctime0, mode0, links0, major_device0, minor_device0, inode0, uid0, gid0) => {
                return true;
            })) !== null) {
                let [size0, type0, access0, atime0, mtime0, ctime0, mode0, links0, major_device0, minor_device0, inode0, uid0, gid0] = __arg_matches__;

                return Elixir.File.Stat.__load(Elixir).__struct__(new Map([[Symbol.for('size'), size0], [Symbol.for('type'), type0], [Symbol.for('access'), access0], [Symbol.for('atime'), atime0], [Symbol.for('mtime'), mtime0], [Symbol.for('ctime'), ctime0], [Symbol.for('mode'), mode0], [Symbol.for('links'), links0], [Symbol.for('major_device'), major_device0], [Symbol.for('minor_device'), minor_device0], [Symbol.for('inode'), inode0], [Symbol.for('uid'), uid0], [Symbol.for('gid'), gid0]]));
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    const __exports = {
        __struct__,
        from_record,
        __MODULE__: Symbol.for('Elixir.File.Stat'),
        __info__
    };

    Elixir.File.Stat.__exports = __exports

    return __exports;
}
ElixirScript.Core.Functions.build_namespace(Elixir, 'Elixir.String.Chars.Version').__load = function(Elixir) {
    if (Elixir.String.Chars.Version.__exports)
        return Elixir.String.Chars.Version.__exports;

    function __info__(kind) {
        const __info__map__ = new Map([[Symbol.for('functions'), [new ElixirScript.Core.Tuple(Symbol.for('__impl__'), 1), new ElixirScript.Core.Tuple(Symbol.for('to_string'), 1)]], [Symbol.for('macros'), []], [Symbol.for('attributes'), [new ElixirScript.Core.Tuple(Symbol.for('vsn'), [277467372937582409401064142997552032580]), new ElixirScript.Core.Tuple(Symbol.for('behaviour'), [Elixir.String.Chars.__load(Elixir)]), new ElixirScript.Core.Tuple(Symbol.for('protocol_impl'), [new ElixirScript.Core.Tuple(Symbol.for('protocol'), Elixir.String.Chars.__load(Elixir)), new ElixirScript.Core.Tuple(Symbol.for('for'), Elixir.Version.__load(Elixir))])]], [Symbol.for('compile'), [new ElixirScript.Core.Tuple(Symbol.for('options'), []), new ElixirScript.Core.Tuple(Symbol.for('version'), [55, 46, 49, 46, 50]), new ElixirScript.Core.Tuple(Symbol.for('source'), '/private/tmp/elixir-20170929-51947-wgj4qu/elixir-1.5.2/lib/elixir/lib/version.ex')]], [Symbol.for('md5'), new ElixirScript.Core.BitString(ElixirScript.Core.BitString.integer(208), ElixirScript.Core.BitString.integer(190), ElixirScript.Core.BitString.integer(69), ElixirScript.Core.BitString.integer(175), ElixirScript.Core.BitString.integer(193), ElixirScript.Core.BitString.integer(228), ElixirScript.Core.BitString.integer(202), ElixirScript.Core.BitString.integer(147), ElixirScript.Core.BitString.integer(194), ElixirScript.Core.BitString.integer(217), ElixirScript.Core.BitString.integer(221), ElixirScript.Core.BitString.integer(93), ElixirScript.Core.BitString.integer(119), ElixirScript.Core.BitString.integer(46), ElixirScript.Core.BitString.integer(235), ElixirScript.Core.BitString.integer(68))], [Symbol.for('module'), Symbol.for('Elixir.String.Chars.Version')]]);

        const value = __info__map__.get(kind);

        if (value !== null) {
            return value;
        }

        throw new ElixirScript.Core.Patterns.MatchError(kind);
    }

    function __impl__(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('for')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.Version.__load(Elixir);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('target')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.String.Chars.Version.__load(Elixir);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('protocol')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.String.Chars.__load(Elixir);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function pre(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([[]], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return '';
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('pre')], __function_args__, (pre0) => {
                return true;
            })) !== null) {
                let [pre0] = __arg_matches__;

                return '-' + Elixir.Enum.__load(Elixir).map_join(pre0, '.', (...__function_args__) => {
                    function recur(...__function_args__) {
                        let __arg_matches__ = null;

                        if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('int')], __function_args__, (int0) => {
                            return ElixirScript.Core.erlang.is_integer(int0);
                        })) !== null) {
                            let [int0] = __arg_matches__;

                            return ElixirScript.Core.erlang.integer_to_binary(int0);
                        } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('string')], __function_args__, (string0) => {
                            return ElixirScript.Core.erlang.is_binary(string0);
                        })) !== null) {
                            let [string0] = __arg_matches__;

                            return string0;
                        }

                        throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
                    }

                    return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
                });
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function to_string(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('version')], __function_args__, (version0) => {
                return true;
            })) !== null) {
                let [version0] = __arg_matches__;

                const [pre0] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.variable('pre'), pre(ElixirScript.Core.Functions.call_property(version0, 'pre')));

                const [build0] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.variable('build'), ElixirScript.Core.Functions.call_property(version0, 'build'));

                const [build1] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.variable('build'), ElixirScript.Core.Patterns.defmatch(ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.variable('x576460752303278270')], (x5764607523032782700) => {
                    return null;
                }, (x5764607523032782700) => {
                    return x5764607523032782700 === null || x5764607523032782700 === false;
                }), ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.variable('_')], () => {
                    return '+' + Elixir.String.Chars.__load(Elixir).to_string(build0);
                }, () => {
                    return true;
                })).call(this, build0));

                return Elixir.String.Chars.__load(Elixir).to_string(ElixirScript.Core.Functions.call_property(version0, 'major')) + ('.' + (Elixir.String.Chars.__load(Elixir).to_string(ElixirScript.Core.Functions.call_property(version0, 'minor')) + ('.' + (Elixir.String.Chars.__load(Elixir).to_string(ElixirScript.Core.Functions.call_property(version0, 'patch')) + (Elixir.String.Chars.__load(Elixir).to_string(pre0) + Elixir.String.Chars.__load(Elixir).to_string(build1))))));
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    const __exports = {
        __impl__,
        to_string,
        __MODULE__: Symbol.for('Elixir.String.Chars.Version'),
        __info__
    };

    Elixir.String.Chars.Version.__exports = __exports

    return __exports;
}
ElixirScript.Core.Functions.build_namespace(Elixir, 'Elixir.Inspect.Algebra').__load = function(Elixir) {
    if (Elixir.Inspect.Algebra.__exports)
        return Elixir.Inspect.Algebra.__exports;

    function __info__(kind) {
        const __info__map__ = new Map([[Symbol.for('functions'), [new ElixirScript.Core.Tuple(Symbol.for('break'), 0), new ElixirScript.Core.Tuple(Symbol.for('break'), 1), new ElixirScript.Core.Tuple(Symbol.for('color'), 3), new ElixirScript.Core.Tuple(Symbol.for('concat'), 1), new ElixirScript.Core.Tuple(Symbol.for('concat'), 2), new ElixirScript.Core.Tuple(Symbol.for('empty'), 0), new ElixirScript.Core.Tuple(Symbol.for('fold_doc'), 2), new ElixirScript.Core.Tuple(Symbol.for('format'), 2), new ElixirScript.Core.Tuple(Symbol.for('glue'), 2), new ElixirScript.Core.Tuple(Symbol.for('glue'), 3), new ElixirScript.Core.Tuple(Symbol.for('group'), 1), new ElixirScript.Core.Tuple(Symbol.for('line'), 2), new ElixirScript.Core.Tuple(Symbol.for('nest'), 2), new ElixirScript.Core.Tuple(Symbol.for('space'), 2), new ElixirScript.Core.Tuple(Symbol.for('surround'), 3), new ElixirScript.Core.Tuple(Symbol.for('surround_many'), 5), new ElixirScript.Core.Tuple(Symbol.for('surround_many'), 6), new ElixirScript.Core.Tuple(Symbol.for('to_doc'), 2)]], [Symbol.for('macros'), []], [Symbol.for('attributes'), [new ElixirScript.Core.Tuple(Symbol.for('vsn'), [92052329103143643867501591451600306816])]], [Symbol.for('compile'), [new ElixirScript.Core.Tuple(Symbol.for('options'), []), new ElixirScript.Core.Tuple(Symbol.for('version'), [55, 46, 49, 46, 50]), new ElixirScript.Core.Tuple(Symbol.for('source'), '/private/tmp/elixir-20170929-51947-wgj4qu/elixir-1.5.2/lib/elixir/lib/inspect/algebra.ex')]], [Symbol.for('md5'), new ElixirScript.Core.BitString(ElixirScript.Core.BitString.integer(69), ElixirScript.Core.BitString.integer(64), ElixirScript.Core.BitString.integer(162), ElixirScript.Core.BitString.integer(58), ElixirScript.Core.BitString.integer(159), ElixirScript.Core.BitString.integer(199), ElixirScript.Core.BitString.integer(65), ElixirScript.Core.BitString.integer(136), ElixirScript.Core.BitString.integer(120), ElixirScript.Core.BitString.integer(177), ElixirScript.Core.BitString.integer(184), ElixirScript.Core.BitString.integer(69), ElixirScript.Core.BitString.integer(33), ElixirScript.Core.BitString.integer(142), ElixirScript.Core.BitString.integer(66), ElixirScript.Core.BitString.integer(128))], [Symbol.for('module'), Symbol.for('Elixir.Inspect.Algebra')]]);

        const value = __info__map__.get(kind);

        if (value !== null) {
            return value;
        }

        throw new ElixirScript.Core.Patterns.MatchError(kind);
    }

    function ansi(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('color')], __function_args__, (color0) => {
                return true;
            })) !== null) {
                let [color0] = __arg_matches__;

                return Elixir.IO.ANSI.__load(Elixir).format_fragment(color0, true);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function __break__(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return new ElixirScript.Core.Tuple(Symbol.for('doc_break'), ' ');
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function color(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('doc'), ElixirScript.Core.Patterns.variable('color_key'), new Map([[Symbol.for('__struct__'), {
                __MODULE__: Symbol.for('Elixir.Inspect.Opts')
            }], [Symbol.for('syntax_colors'), ElixirScript.Core.Patterns.variable('syntax_colors')]])], __function_args__, (doc0, color_key0, syntax_colors0) => {
                return ElixirScript.Core.erlang.is_binary(doc0) || (doc0 === Symbol.for('doc_line') || doc0 === Symbol.for('doc_nil')) || ElixirScript.Core.erlang.is_tuple(doc0) && (ElixirScript.Core.erlang.element(1, doc0) === Symbol.for('doc_nest') || (ElixirScript.Core.erlang.element(1, doc0) === Symbol.for('doc_break') || (ElixirScript.Core.erlang.element(1, doc0) === Symbol.for('doc_group') || (ElixirScript.Core.erlang.element(1, doc0) === Symbol.for('doc_color') || ElixirScript.Core.erlang.element(1, doc0) === Symbol.for('doc_cons')))));
            })) !== null) {
                let [doc0, color_key0, syntax_colors0] = __arg_matches__;

                const [precolor0] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.variable('precolor'), Elixir.Keyword.__load(Elixir).get(syntax_colors0, color_key0));

                return ElixirScript.Core.Patterns.defmatch(ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.variable('x576460752303327229')], (x5764607523033272290) => {
                    return doc0;
                }, (x5764607523033272290) => {
                    return x5764607523033272290 === null || x5764607523033272290 === false;
                }), ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.variable('_')], () => {
                    const [postcolor0] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.variable('postcolor'), Elixir.Keyword.__load(Elixir).get(syntax_colors0, Symbol.for('reset'), Symbol.for('reset')));

                    return concat(new ElixirScript.Core.Tuple(Symbol.for('doc_color'), doc0, precolor0), new ElixirScript.Core.Tuple(Symbol.for('doc_color'), empty(), postcolor0));
                }, () => {
                    return true;
                })).call(this, precolor0);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function concat(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('docs')], __function_args__, (docs0) => {
                return ElixirScript.Core.erlang.is_list(docs0);
            })) !== null) {
                let [docs0] = __arg_matches__;

                return fold_doc(docs0, concat);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('doc1'), ElixirScript.Core.Patterns.variable('doc2')], __function_args__, (doc10, doc20) => {
                return (ElixirScript.Core.erlang.is_binary(doc10) || (doc10 === Symbol.for('doc_line') || doc10 === Symbol.for('doc_nil')) || ElixirScript.Core.erlang.is_tuple(doc10) && (ElixirScript.Core.erlang.element(1, doc10) === Symbol.for('doc_nest') || (ElixirScript.Core.erlang.element(1, doc10) === Symbol.for('doc_break') || (ElixirScript.Core.erlang.element(1, doc10) === Symbol.for('doc_group') || (ElixirScript.Core.erlang.element(1, doc10) === Symbol.for('doc_color') || ElixirScript.Core.erlang.element(1, doc10) === Symbol.for('doc_cons')))))) && (ElixirScript.Core.erlang.is_binary(doc20) || (doc20 === Symbol.for('doc_line') || doc20 === Symbol.for('doc_nil')) || ElixirScript.Core.erlang.is_tuple(doc20) && (ElixirScript.Core.erlang.element(1, doc20) === Symbol.for('doc_nest') || (ElixirScript.Core.erlang.element(1, doc20) === Symbol.for('doc_break') || (ElixirScript.Core.erlang.element(1, doc20) === Symbol.for('doc_group') || (ElixirScript.Core.erlang.element(1, doc20) === Symbol.for('doc_color') || ElixirScript.Core.erlang.element(1, doc20) === Symbol.for('doc_cons'))))));
            })) !== null) {
                let [doc10, doc20] = __arg_matches__;

                return new ElixirScript.Core.Tuple(Symbol.for('doc_cons'), doc10, doc20);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function decrement(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('infinity')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Symbol.for('infinity');
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('counter')], __function_args__, (counter0) => {
                return true;
            })) !== null) {
                let [counter0] = __arg_matches__;

                return counter0 - 1;
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function default_mode(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('infinity')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Symbol.for('flat');
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('_')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Symbol.for('break');
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function do_join(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('doc_nil'), Symbol.for('doc_nil'), ElixirScript.Core.Patterns.variable('_')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Symbol.for('doc_nil');
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('h'), Symbol.for('doc_nil'), ElixirScript.Core.Patterns.variable('_')], __function_args__, (h0) => {
                return true;
            })) !== null) {
                let [h0] = __arg_matches__;

                return h0;
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('doc_nil'), ElixirScript.Core.Patterns.variable('t'), ElixirScript.Core.Patterns.variable('_')], __function_args__, (t0) => {
                return true;
            })) !== null) {
                let [t0] = __arg_matches__;

                return t0;
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('h'), ElixirScript.Core.Patterns.variable('t'), ElixirScript.Core.Patterns.variable('sep')], __function_args__, (h0, t0, sep0) => {
                return true;
            })) !== null) {
                let [h0, t0, sep0] = __arg_matches__;

                return glue(concat(h0, sep0), t0);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function do_surround_many(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('_'), 0, ElixirScript.Core.Patterns.variable('_opts'), ElixirScript.Core.Patterns.variable('_fun'), ElixirScript.Core.Patterns.variable('_sep')], __function_args__, (_opts0, _fun0, _sep0) => {
                return true;
            })) !== null) {
                let [_opts0, _fun0, _sep0] = __arg_matches__;

                return '...';
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([[], ElixirScript.Core.Patterns.variable('_limit'), ElixirScript.Core.Patterns.variable('_opts'), ElixirScript.Core.Patterns.variable('_fun'), ElixirScript.Core.Patterns.variable('_sep')], __function_args__, (_limit0, _opts0, _fun0, _sep0) => {
                return true;
            })) !== null) {
                let [_limit0, _opts0, _fun0, _sep0] = __arg_matches__;

                return Symbol.for('doc_nil');
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([[ElixirScript.Core.Patterns.variable('h')], ElixirScript.Core.Patterns.variable('limit'), ElixirScript.Core.Patterns.variable('opts'), ElixirScript.Core.Patterns.variable('fun'), ElixirScript.Core.Patterns.variable('_sep')], __function_args__, (h0, limit0, opts0, fun0, _sep0) => {
                return true;
            })) !== null) {
                let [h0, limit0, opts0, fun0, _sep0] = __arg_matches__;

                return fun0(h0, new Map([...opts0, [Symbol.for('limit'), limit0]]));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.headTail(ElixirScript.Core.Patterns.variable('h'), ElixirScript.Core.Patterns.variable('t')), ElixirScript.Core.Patterns.variable('limit'), ElixirScript.Core.Patterns.variable('opts'), ElixirScript.Core.Patterns.variable('fun'), ElixirScript.Core.Patterns.variable('sep')], __function_args__, (h0, t0, limit0, opts0, fun0, sep0) => {
                return ElixirScript.Core.erlang.is_list(t0);
            })) !== null) {
                let [h0, t0, limit0, opts0, fun0, sep0] = __arg_matches__;

                const [limit1] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.variable('limit'), decrement(limit0));

                const [h1] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.variable('h'), fun0(h0, new Map([...opts0, [Symbol.for('limit'), limit1]])));

                const [t1] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.variable('t'), do_surround_many(t0, limit1, opts0, fun0, sep0));

                return do_join(h1, t1, sep0);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.headTail(ElixirScript.Core.Patterns.variable('h'), ElixirScript.Core.Patterns.variable('t')), ElixirScript.Core.Patterns.variable('limit'), ElixirScript.Core.Patterns.variable('opts'), ElixirScript.Core.Patterns.variable('fun'), ElixirScript.Core.Patterns.variable('_sep')], __function_args__, (h0, t0, limit0, opts0, fun0, _sep0) => {
                return true;
            })) !== null) {
                let [h0, t0, limit0, opts0, fun0, _sep0] = __arg_matches__;

                const [limit1] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.variable('limit'), decrement(limit0));

                const [h1] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.variable('h'), fun0(h0, new Map([...opts0, [Symbol.for('limit'), limit1]])));

                const [t1] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.variable('t'), fun0(t0, new Map([...opts0, [Symbol.for('limit'), limit1]])));

                return do_join(h1, t1, ' |');
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('left'), [], ElixirScript.Core.Patterns.variable('right'), ElixirScript.Core.Patterns.variable('_'), ElixirScript.Core.Patterns.variable('_opts'), ElixirScript.Core.Patterns.variable('_fun'), ElixirScript.Core.Patterns.variable('_')], __function_args__, (left0, right0, _opts0, _fun0) => {
                return true;
            })) !== null) {
                let [left0, right0, _opts0, _fun0] = __arg_matches__;

                return concat(left0, right0);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('left'), ElixirScript.Core.Patterns.variable('docs'), ElixirScript.Core.Patterns.variable('right'), ElixirScript.Core.Patterns.variable('limit'), ElixirScript.Core.Patterns.variable('opts'), ElixirScript.Core.Patterns.variable('fun'), ElixirScript.Core.Patterns.variable('sep')], __function_args__, (left0, docs0, right0, limit0, opts0, fun0, sep0) => {
                return true;
            })) !== null) {
                let [left0, docs0, right0, limit0, opts0, fun0, sep0] = __arg_matches__;

                return surround(left0, do_surround_many(docs0, limit0, opts0, fun0, sep0), right0);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function empty(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Symbol.for('doc_nil');
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function fits__qmark__(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('w'), ElixirScript.Core.Patterns.variable('_')], __function_args__, (w0) => {
                return w0 < 0;
            })) !== null) {
                let [w0] = __arg_matches__;

                return false;
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('_'), []], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return true;
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('_'), ElixirScript.Core.Patterns.headTail(ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                values: [ElixirScript.Core.Patterns.variable('_'), ElixirScript.Core.Patterns.variable('_'), Symbol.for('doc_line')]
            }), ElixirScript.Core.Patterns.variable('_'))], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return true;
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('w'), ElixirScript.Core.Patterns.headTail(ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                values: [ElixirScript.Core.Patterns.variable('_'), ElixirScript.Core.Patterns.variable('_'), Symbol.for('doc_nil')]
            }), ElixirScript.Core.Patterns.variable('t'))], __function_args__, (w0, t0) => {
                return true;
            })) !== null) {
                let [w0, t0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, w0, t0));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('w'), ElixirScript.Core.Patterns.headTail(ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                values: [ElixirScript.Core.Patterns.variable('i'), ElixirScript.Core.Patterns.variable('m'), ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                    values: [Symbol.for('doc_cons'), ElixirScript.Core.Patterns.variable('x'), ElixirScript.Core.Patterns.variable('y')]
                })]
            }), ElixirScript.Core.Patterns.variable('t'))], __function_args__, (w0, i0, m0, x0, y0, t0) => {
                return true;
            })) !== null) {
                let [w0, i0, m0, x0, y0, t0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, w0, ElixirScript.Core.Functions.concat(new ElixirScript.Core.Tuple(i0, m0, x0), ElixirScript.Core.Functions.concat(new ElixirScript.Core.Tuple(i0, m0, y0), t0))));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('w'), ElixirScript.Core.Patterns.headTail(ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                values: [ElixirScript.Core.Patterns.variable('i'), ElixirScript.Core.Patterns.variable('m'), ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                    values: [Symbol.for('doc_color'), ElixirScript.Core.Patterns.variable('x'), ElixirScript.Core.Patterns.variable('_')]
                })]
            }), ElixirScript.Core.Patterns.variable('t'))], __function_args__, (w0, i0, m0, x0, t0) => {
                return true;
            })) !== null) {
                let [w0, i0, m0, x0, t0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, w0, ElixirScript.Core.Functions.concat(new ElixirScript.Core.Tuple(i0, m0, x0), t0)));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('w'), ElixirScript.Core.Patterns.headTail(ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                values: [ElixirScript.Core.Patterns.variable('i'), ElixirScript.Core.Patterns.variable('m'), ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                    values: [Symbol.for('doc_nest'), ElixirScript.Core.Patterns.variable('x'), ElixirScript.Core.Patterns.variable('j')]
                })]
            }), ElixirScript.Core.Patterns.variable('t'))], __function_args__, (w0, i0, m0, x0, j0, t0) => {
                return true;
            })) !== null) {
                let [w0, i0, m0, x0, j0, t0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, w0, ElixirScript.Core.Functions.concat(new ElixirScript.Core.Tuple(i0 + j0, m0, x0), t0)));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('w'), ElixirScript.Core.Patterns.headTail(ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                values: [ElixirScript.Core.Patterns.variable('i'), ElixirScript.Core.Patterns.variable('_'), ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                    values: [Symbol.for('doc_group'), ElixirScript.Core.Patterns.variable('x')]
                })]
            }), ElixirScript.Core.Patterns.variable('t'))], __function_args__, (w0, i0, x0, t0) => {
                return true;
            })) !== null) {
                let [w0, i0, x0, t0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, w0, ElixirScript.Core.Functions.concat(new ElixirScript.Core.Tuple(i0, Symbol.for('flat'), x0), t0)));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('w'), ElixirScript.Core.Patterns.headTail(ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                values: [ElixirScript.Core.Patterns.variable('_'), ElixirScript.Core.Patterns.variable('_'), ElixirScript.Core.Patterns.variable('s')]
            }), ElixirScript.Core.Patterns.variable('t'))], __function_args__, (w0, s0, t0) => {
                return ElixirScript.Core.erlang.is_binary(s0);
            })) !== null) {
                let [w0, s0, t0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, w0 - ElixirScript.Core.erlang.byte_size(s0), t0));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('w'), ElixirScript.Core.Patterns.headTail(ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                values: [ElixirScript.Core.Patterns.variable('_'), Symbol.for('flat'), ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                    values: [Symbol.for('doc_break'), ElixirScript.Core.Patterns.variable('s')]
                })]
            }), ElixirScript.Core.Patterns.variable('t'))], __function_args__, (w0, s0, t0) => {
                return true;
            })) !== null) {
                let [w0, s0, t0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, w0 - ElixirScript.Core.erlang.byte_size(s0), t0));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('_'), ElixirScript.Core.Patterns.headTail(ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                values: [ElixirScript.Core.Patterns.variable('_'), Symbol.for('break'), ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                    values: [Symbol.for('doc_break'), ElixirScript.Core.Patterns.variable('_')]
                })]
            }), ElixirScript.Core.Patterns.variable('_'))], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return true;
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function fold_doc(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([[], ElixirScript.Core.Patterns.variable('_folder_fun')], __function_args__, (_folder_fun0) => {
                return true;
            })) !== null) {
                let [_folder_fun0] = __arg_matches__;

                return empty();
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([[ElixirScript.Core.Patterns.variable('doc')], ElixirScript.Core.Patterns.variable('_folder_fun')], __function_args__, (doc0, _folder_fun0) => {
                return true;
            })) !== null) {
                let [doc0, _folder_fun0] = __arg_matches__;

                return doc0;
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.headTail(ElixirScript.Core.Patterns.variable('doc'), ElixirScript.Core.Patterns.variable('docs')), ElixirScript.Core.Patterns.variable('folder_fun')], __function_args__, (doc0, docs0, folder_fun0) => {
                return ElixirScript.Core.erlang.is_function(folder_fun0, 2);
            })) !== null) {
                let [doc0, docs0, folder_fun0] = __arg_matches__;

                return folder_fun0(doc0, fold_doc(docs0, folder_fun0));
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function format(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('doc'), ElixirScript.Core.Patterns.variable('width')], __function_args__, (doc0, width0) => {
                return (ElixirScript.Core.erlang.is_binary(doc0) || (doc0 === Symbol.for('doc_line') || doc0 === Symbol.for('doc_nil')) || ElixirScript.Core.erlang.is_tuple(doc0) && (ElixirScript.Core.erlang.element(1, doc0) === Symbol.for('doc_nest') || (ElixirScript.Core.erlang.element(1, doc0) === Symbol.for('doc_break') || (ElixirScript.Core.erlang.element(1, doc0) === Symbol.for('doc_group') || (ElixirScript.Core.erlang.element(1, doc0) === Symbol.for('doc_color') || ElixirScript.Core.erlang.element(1, doc0) === Symbol.for('doc_cons')))))) && (ElixirScript.Core.erlang.equals(width0, Symbol.for('infinity')) || width0 >= 0);
            })) !== null) {
                let [doc0, width0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, width0, 0, [new ElixirScript.Core.Tuple(0, default_mode(width0), new ElixirScript.Core.Tuple(Symbol.for('doc_group'), doc0))]));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('_'), ElixirScript.Core.Patterns.variable('_'), []], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return [];
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('w'), ElixirScript.Core.Patterns.variable('_'), ElixirScript.Core.Patterns.headTail(ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                values: [ElixirScript.Core.Patterns.variable('i'), ElixirScript.Core.Patterns.variable('_'), Symbol.for('doc_line')]
            }), ElixirScript.Core.Patterns.variable('t'))], __function_args__, (w0, i0, t0) => {
                return true;
            })) !== null) {
                let [w0, i0, t0] = __arg_matches__;

                return ElixirScript.Core.Functions.concat(indent(i0), format(w0, i0, t0));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('w'), ElixirScript.Core.Patterns.variable('k'), ElixirScript.Core.Patterns.headTail(ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                values: [ElixirScript.Core.Patterns.variable('_'), ElixirScript.Core.Patterns.variable('_'), Symbol.for('doc_nil')]
            }), ElixirScript.Core.Patterns.variable('t'))], __function_args__, (w0, k0, t0) => {
                return true;
            })) !== null) {
                let [w0, k0, t0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, w0, k0, t0));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('w'), ElixirScript.Core.Patterns.variable('k'), ElixirScript.Core.Patterns.headTail(ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                values: [ElixirScript.Core.Patterns.variable('i'), ElixirScript.Core.Patterns.variable('m'), ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                    values: [Symbol.for('doc_cons'), ElixirScript.Core.Patterns.variable('x'), ElixirScript.Core.Patterns.variable('y')]
                })]
            }), ElixirScript.Core.Patterns.variable('t'))], __function_args__, (w0, k0, i0, m0, x0, y0, t0) => {
                return true;
            })) !== null) {
                let [w0, k0, i0, m0, x0, y0, t0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, w0, k0, ElixirScript.Core.Functions.concat(new ElixirScript.Core.Tuple(i0, m0, x0), ElixirScript.Core.Functions.concat(new ElixirScript.Core.Tuple(i0, m0, y0), t0))));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('w'), ElixirScript.Core.Patterns.variable('k'), ElixirScript.Core.Patterns.headTail(ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                values: [ElixirScript.Core.Patterns.variable('i'), ElixirScript.Core.Patterns.variable('m'), ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                    values: [Symbol.for('doc_nest'), ElixirScript.Core.Patterns.variable('x'), ElixirScript.Core.Patterns.variable('j')]
                })]
            }), ElixirScript.Core.Patterns.variable('t'))], __function_args__, (w0, k0, i0, m0, x0, j0, t0) => {
                return true;
            })) !== null) {
                let [w0, k0, i0, m0, x0, j0, t0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, w0, k0, ElixirScript.Core.Functions.concat(new ElixirScript.Core.Tuple(i0 + j0, m0, x0), t0)));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('w'), ElixirScript.Core.Patterns.variable('k'), ElixirScript.Core.Patterns.headTail(ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                values: [ElixirScript.Core.Patterns.variable('i'), ElixirScript.Core.Patterns.variable('m'), ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                    values: [Symbol.for('doc_group'), ElixirScript.Core.Patterns.variable('x')]
                })]
            }), ElixirScript.Core.Patterns.variable('t'))], __function_args__, (w0, k0, i0, m0, x0, t0) => {
                return true;
            })) !== null) {
                let [w0, k0, i0, m0, x0, t0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, w0, k0, ElixirScript.Core.Functions.concat(new ElixirScript.Core.Tuple(i0, m0, x0), t0)));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('w'), ElixirScript.Core.Patterns.variable('k'), ElixirScript.Core.Patterns.headTail(ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                values: [ElixirScript.Core.Patterns.variable('i'), ElixirScript.Core.Patterns.variable('m'), ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                    values: [Symbol.for('doc_color'), ElixirScript.Core.Patterns.variable('x'), ElixirScript.Core.Patterns.variable('c')]
                })]
            }), ElixirScript.Core.Patterns.variable('t'))], __function_args__, (w0, k0, i0, m0, x0, c0, t0) => {
                return true;
            })) !== null) {
                let [w0, k0, i0, m0, x0, c0, t0] = __arg_matches__;

                return ElixirScript.Core.Functions.concat(ansi(c0), format(w0, k0, ElixirScript.Core.Functions.concat(new ElixirScript.Core.Tuple(i0, m0, x0), t0)));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('w'), ElixirScript.Core.Patterns.variable('k'), ElixirScript.Core.Patterns.headTail(ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                values: [ElixirScript.Core.Patterns.variable('_'), ElixirScript.Core.Patterns.variable('_'), ElixirScript.Core.Patterns.variable('s')]
            }), ElixirScript.Core.Patterns.variable('t'))], __function_args__, (w0, k0, s0, t0) => {
                return ElixirScript.Core.erlang.is_binary(s0);
            })) !== null) {
                let [w0, k0, s0, t0] = __arg_matches__;

                return ElixirScript.Core.Functions.concat(s0, format(w0, k0 + ElixirScript.Core.erlang.byte_size(s0), t0));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('w'), ElixirScript.Core.Patterns.variable('k'), ElixirScript.Core.Patterns.headTail(ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                values: [ElixirScript.Core.Patterns.variable('_'), Symbol.for('flat'), ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                    values: [Symbol.for('doc_break'), ElixirScript.Core.Patterns.variable('s')]
                })]
            }), ElixirScript.Core.Patterns.variable('t'))], __function_args__, (w0, k0, s0, t0) => {
                return true;
            })) !== null) {
                let [w0, k0, s0, t0] = __arg_matches__;

                return ElixirScript.Core.Functions.concat(s0, format(w0, k0 + ElixirScript.Core.erlang.byte_size(s0), t0));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('w'), ElixirScript.Core.Patterns.variable('k'), ElixirScript.Core.Patterns.headTail(ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                values: [ElixirScript.Core.Patterns.variable('i'), Symbol.for('break'), ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                    values: [Symbol.for('doc_break'), ElixirScript.Core.Patterns.variable('s')]
                })]
            }), ElixirScript.Core.Patterns.variable('t'))], __function_args__, (w0, k0, i0, s0, t0) => {
                return true;
            })) !== null) {
                let [w0, k0, i0, s0, t0] = __arg_matches__;

                const [k1] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.variable('k'), k0 + ElixirScript.Core.erlang.byte_size(s0));

                return ElixirScript.Core.Patterns.defmatch(ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.variable('x576460752303326558')], (x5764607523033265580) => {
                    return ElixirScript.Core.Functions.concat(indent(i0), format(w0, i0, t0));
                }, (x5764607523033265580) => {
                    return x5764607523033265580 === null || x5764607523033265580 === false;
                }), ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.variable('_')], () => {
                    return ElixirScript.Core.Functions.concat(s0, format(w0, k1, t0));
                }, () => {
                    return true;
                })).call(this, ElixirScript.Core.Patterns.defmatch(ElixirScript.Core.Patterns.clause([true], () => {
                    return true;
                }, () => {
                    return true;
                }), ElixirScript.Core.Patterns.clause([false], () => {
                    return fits__qmark__(w0 - k1, t0);
                }, () => {
                    return true;
                })).call(this, ElixirScript.Core.erlang.equals(w0, Symbol.for('infinity'))));
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function glue(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('doc1'), ElixirScript.Core.Patterns.variable('doc2')], __function_args__, (doc10, doc20) => {
                return true;
            })) !== null) {
                let [doc10, doc20] = __arg_matches__;

                return concat(doc10, concat(__break__(), doc20));
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function group(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('doc')], __function_args__, (doc0) => {
                return ElixirScript.Core.erlang.is_binary(doc0) || (doc0 === Symbol.for('doc_line') || doc0 === Symbol.for('doc_nil')) || ElixirScript.Core.erlang.is_tuple(doc0) && (ElixirScript.Core.erlang.element(1, doc0) === Symbol.for('doc_nest') || (ElixirScript.Core.erlang.element(1, doc0) === Symbol.for('doc_break') || (ElixirScript.Core.erlang.element(1, doc0) === Symbol.for('doc_group') || (ElixirScript.Core.erlang.element(1, doc0) === Symbol.for('doc_color') || ElixirScript.Core.erlang.element(1, doc0) === Symbol.for('doc_cons')))));
            })) !== null) {
                let [doc0] = __arg_matches__;

                return new ElixirScript.Core.Tuple(Symbol.for('doc_group'), doc0);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function indent(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([0], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return '\n';
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('i')], __function_args__, (i0) => {
                return true;
            })) !== null) {
                let [i0] = __arg_matches__;

                return '\n' + ElixirScript.Core.binary.copy(' ', i0);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function nest(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('doc'), 0], __function_args__, (doc0) => {
                return ElixirScript.Core.erlang.is_binary(doc0) || (doc0 === Symbol.for('doc_line') || doc0 === Symbol.for('doc_nil')) || ElixirScript.Core.erlang.is_tuple(doc0) && (ElixirScript.Core.erlang.element(1, doc0) === Symbol.for('doc_nest') || (ElixirScript.Core.erlang.element(1, doc0) === Symbol.for('doc_break') || (ElixirScript.Core.erlang.element(1, doc0) === Symbol.for('doc_group') || (ElixirScript.Core.erlang.element(1, doc0) === Symbol.for('doc_color') || ElixirScript.Core.erlang.element(1, doc0) === Symbol.for('doc_cons')))));
            })) !== null) {
                let [doc0] = __arg_matches__;

                return doc0;
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('doc'), ElixirScript.Core.Patterns.variable('level')], __function_args__, (doc0, level0) => {
                return (ElixirScript.Core.erlang.is_binary(doc0) || (doc0 === Symbol.for('doc_line') || doc0 === Symbol.for('doc_nil')) || ElixirScript.Core.erlang.is_tuple(doc0) && (ElixirScript.Core.erlang.element(1, doc0) === Symbol.for('doc_nest') || (ElixirScript.Core.erlang.element(1, doc0) === Symbol.for('doc_break') || (ElixirScript.Core.erlang.element(1, doc0) === Symbol.for('doc_group') || (ElixirScript.Core.erlang.element(1, doc0) === Symbol.for('doc_color') || ElixirScript.Core.erlang.element(1, doc0) === Symbol.for('doc_cons')))))) && ElixirScript.Core.erlang.is_integer(level0) && level0 > 0;
            })) !== null) {
                let [doc0, level0] = __arg_matches__;

                return new ElixirScript.Core.Tuple(Symbol.for('doc_nest'), doc0, level0);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function surround(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('left'), ElixirScript.Core.Patterns.variable('doc'), ElixirScript.Core.Patterns.variable('right')], __function_args__, (left0, doc0, right0) => {
                return (ElixirScript.Core.erlang.is_binary(left0) || (left0 === Symbol.for('doc_line') || left0 === Symbol.for('doc_nil')) || ElixirScript.Core.erlang.is_tuple(left0) && (ElixirScript.Core.erlang.element(1, left0) === Symbol.for('doc_nest') || (ElixirScript.Core.erlang.element(1, left0) === Symbol.for('doc_break') || (ElixirScript.Core.erlang.element(1, left0) === Symbol.for('doc_group') || (ElixirScript.Core.erlang.element(1, left0) === Symbol.for('doc_color') || ElixirScript.Core.erlang.element(1, left0) === Symbol.for('doc_cons')))))) && (ElixirScript.Core.erlang.is_binary(doc0) || (doc0 === Symbol.for('doc_line') || doc0 === Symbol.for('doc_nil')) || ElixirScript.Core.erlang.is_tuple(doc0) && (ElixirScript.Core.erlang.element(1, doc0) === Symbol.for('doc_nest') || (ElixirScript.Core.erlang.element(1, doc0) === Symbol.for('doc_break') || (ElixirScript.Core.erlang.element(1, doc0) === Symbol.for('doc_group') || (ElixirScript.Core.erlang.element(1, doc0) === Symbol.for('doc_color') || ElixirScript.Core.erlang.element(1, doc0) === Symbol.for('doc_cons')))))) && (ElixirScript.Core.erlang.is_binary(right0) || (right0 === Symbol.for('doc_line') || right0 === Symbol.for('doc_nil')) || ElixirScript.Core.erlang.is_tuple(right0) && (ElixirScript.Core.erlang.element(1, right0) === Symbol.for('doc_nest') || (ElixirScript.Core.erlang.element(1, right0) === Symbol.for('doc_break') || (ElixirScript.Core.erlang.element(1, right0) === Symbol.for('doc_group') || (ElixirScript.Core.erlang.element(1, right0) === Symbol.for('doc_color') || ElixirScript.Core.erlang.element(1, right0) === Symbol.for('doc_cons'))))));
            })) !== null) {
                let [left0, doc0, right0] = __arg_matches__;

                return group(concat(left0, concat(nest(doc0, 1), right0)));
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function surround_many(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('left'), ElixirScript.Core.Patterns.variable('docs'), ElixirScript.Core.Patterns.variable('right'), ElixirScript.Core.Patterns.capture(new Map([[Symbol.for('__struct__'), {
                __MODULE__: Symbol.for('Elixir.Inspect.Opts')
            }]])), ElixirScript.Core.Patterns.variable('fun'), ElixirScript.Core.Patterns.variable('separator')], __function_args__, (left0, docs0, right0, opts0, fun0, separator0) => {
                return (ElixirScript.Core.erlang.is_binary(left0) || (left0 === Symbol.for('doc_line') || left0 === Symbol.for('doc_nil')) || ElixirScript.Core.erlang.is_tuple(left0) && (ElixirScript.Core.erlang.element(1, left0) === Symbol.for('doc_nest') || (ElixirScript.Core.erlang.element(1, left0) === Symbol.for('doc_break') || (ElixirScript.Core.erlang.element(1, left0) === Symbol.for('doc_group') || (ElixirScript.Core.erlang.element(1, left0) === Symbol.for('doc_color') || ElixirScript.Core.erlang.element(1, left0) === Symbol.for('doc_cons')))))) && ElixirScript.Core.erlang.is_list(docs0) && (ElixirScript.Core.erlang.is_binary(right0) || (right0 === Symbol.for('doc_line') || right0 === Symbol.for('doc_nil')) || ElixirScript.Core.erlang.is_tuple(right0) && (ElixirScript.Core.erlang.element(1, right0) === Symbol.for('doc_nest') || (ElixirScript.Core.erlang.element(1, right0) === Symbol.for('doc_break') || (ElixirScript.Core.erlang.element(1, right0) === Symbol.for('doc_group') || (ElixirScript.Core.erlang.element(1, right0) === Symbol.for('doc_color') || ElixirScript.Core.erlang.element(1, right0) === Symbol.for('doc_cons')))))) && ElixirScript.Core.erlang.is_function(fun0, 2) && (ElixirScript.Core.erlang.is_binary(separator0) || (separator0 === Symbol.for('doc_line') || separator0 === Symbol.for('doc_nil')) || ElixirScript.Core.erlang.is_tuple(separator0) && (ElixirScript.Core.erlang.element(1, separator0) === Symbol.for('doc_nest') || (ElixirScript.Core.erlang.element(1, separator0) === Symbol.for('doc_break') || (ElixirScript.Core.erlang.element(1, separator0) === Symbol.for('doc_group') || (ElixirScript.Core.erlang.element(1, separator0) === Symbol.for('doc_color') || ElixirScript.Core.erlang.element(1, separator0) === Symbol.for('doc_cons'))))));
            })) !== null) {
                let [left0, docs0, right0, opts0, fun0, separator0] = __arg_matches__;

                return do_surround_many(left0, docs0, right0, ElixirScript.Core.Functions.call_property(opts0, 'limit'), opts0, fun0, separator0);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function to_doc(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.capture(new Map([[Symbol.for('__struct__'), ElixirScript.Core.Patterns.variable('struct')]])), ElixirScript.Core.Patterns.capture(new Map([[Symbol.for('__struct__'), {
                __MODULE__: Symbol.for('Elixir.Inspect.Opts')
            }]]))], __function_args__, (struct0, map0, opts0) => {
                return ElixirScript.Core.erlang.is_atom(struct0);
            })) !== null) {
                let [struct0, map0, opts0] = __arg_matches__;

                return ElixirScript.Core.Patterns.defmatch(ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.variable('x576460752303327422')], (x5764607523033274220) => {
                    return Elixir.Inspect.Map.__load(Elixir).inspect(map0, opts0);
                }, (x5764607523033274220) => {
                    return x5764607523033274220 === null || x5764607523033274220 === false;
                }), ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.variable('_')], () => {
                    return ElixirScript.Core.SpecialForms._try(() => {
                        return Elixir.Inspect.__load(Elixir).inspect(map0, opts0);
                    }, ElixirScript.Core.Patterns.defmatch(ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.variable('e')], (e0) => {
                        const [stacktrace0] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.variable('stacktrace'), ElixirScript.Core.Functions.call_property(ElixirScript.Core.erlang.get_stacktrace));

                        return ElixirScript.Core.Patterns.defmatch(ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.variable('x576460752303331196')], (x5764607523033311960) => {
                            return ElixirScript.Core.SpecialForms._try(() => {
                                Elixir.Process.__load(Elixir).put(Symbol.for('inspect_trap'), true)

                                const [res0] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.variable('res'), Elixir.Inspect.Map.__load(Elixir).inspect(map0, new Map([...opts0, [Symbol.for('syntax_colors'), []]])));

                                const [res1] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.variable('res'), ElixirScript.Core.erlang.iolist_to_binary(format(res0, Symbol.for('infinity'))));

                                const [exception0] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.variable('exception'), Elixir.Inspect.Error.__load(Elixir).exception([new ElixirScript.Core.Tuple(Symbol.for('message'), 'got ' + (Elixir.String.Chars.__load(Elixir).to_string(Elixir.Kernel.__load(Elixir).inspect(ElixirScript.Core.Functions.call_property(e0, '__struct__'))) + ' with message ') + (Elixir.String.Chars.__load(Elixir).to_string(Elixir.Kernel.__load(Elixir).inspect(Elixir.Exception.__load(Elixir).message(e0))) + (' while inspecting ' + Elixir.String.Chars.__load(Elixir).to_string(res1))))]));

                                return ElixirScript.Core.Patterns.defmatch(ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.variable('x576460752303331100')], (x5764607523033311000) => {
                                    const [stacktrace5764607523033310360] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.variable('stacktrace576460752303331036'), stacktrace0);

                                    return ElixirScript.Core.Patterns.defmatch(ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.variable('message576460752303331036')], (message5764607523033310360) => {
                                        return ElixirScript.Core.erlang.raise(Symbol.for('error'), Elixir.RuntimeError.__load(Elixir).exception(message5764607523033310360), stacktrace5764607523033310360);
                                    }, (message5764607523033310360) => {
                                        return ElixirScript.Core.erlang.is_binary(message5764607523033310360);
                                    }), ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.variable('atom576460752303331036')], (atom5764607523033310360) => {
                                        return ElixirScript.Core.erlang.raise(Symbol.for('error'), atom5764607523033310360.exception([]), stacktrace5764607523033310360);
                                    }, (atom5764607523033310360) => {
                                        return ElixirScript.Core.erlang.is_atom(atom5764607523033310360);
                                    }), ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.capture(new Map([[Symbol.for('__struct__'), ElixirScript.Core.Patterns.variable('struct576460752303331036')], [Symbol.for('__exception__'), true]]))], (struct5764607523033310360, other5764607523033310360) => {
                                        return ElixirScript.Core.erlang.raise(Symbol.for('error'), other5764607523033310360, stacktrace5764607523033310360);
                                    }, (struct5764607523033310360, other5764607523033310360) => {
                                        return ElixirScript.Core.erlang.is_atom(struct5764607523033310360);
                                    }), ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.variable('other576460752303331036')], (other5764607523033310360) => {
                                        const [message5764607523033310360] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.variable('message576460752303331036'), 'reraise/2 expects a module name, string or exception as the first argument, got: ' + Elixir.String.Chars.__load(Elixir).to_string(Elixir.Kernel.__load(Elixir).inspect(other5764607523033310360)));

                                        return ElixirScript.Core.erlang.error(Elixir.ArgumentError.__load(Elixir).exception(message5764607523033310360));
                                    }, (other5764607523033310360) => {
                                        return true;
                                    })).call(this, exception0);
                                }, (x5764607523033311000) => {
                                    return x5764607523033311000 === null || x5764607523033311000 === false;
                                }), ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.variable('_')], () => {
                                    return Elixir.Inspect.__load(Elixir).inspect(exception0, opts0);
                                }, () => {
                                    return true;
                                })).call(this, ElixirScript.Core.Functions.call_property(opts0, 'safe'));
                            }, null, null, null, () => {
                                return Elixir.Process.__load(Elixir).__delete__(Symbol.for('inspect_trap'));
                            });
                        }, (x5764607523033311960) => {
                            return x5764607523033311960 === null || x5764607523033311960 === false;
                        }), ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.variable('_')], () => {
                            return Elixir.Inspect.Map.__load(Elixir).inspect(map0, opts0);
                        }, () => {
                            return true;
                        })).call(this, Elixir.Process.__load(Elixir).get(Symbol.for('inspect_trap')));
                    }, (e0) => {
                        return true;
                    })), null, null, null);
                }, () => {
                    return true;
                })).call(this, ElixirScript.Core.Functions.call_property(opts0, 'structs'));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('arg'), ElixirScript.Core.Patterns.capture(new Map([[Symbol.for('__struct__'), {
                __MODULE__: Symbol.for('Elixir.Inspect.Opts')
            }]]))], __function_args__, (arg0, opts0) => {
                return true;
            })) !== null) {
                let [arg0, opts0] = __arg_matches__;

                return Elixir.Inspect.__load(Elixir).inspect(arg0, opts0);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    const __exports = {
        __break__,
        color,
        concat,
        empty,
        fold_doc,
        format,
        glue,
        group,
        nest,
        surround,
        surround_many,
        to_doc,
        __MODULE__: Symbol.for('Elixir.Inspect.Algebra'),
        __info__
    };

    Elixir.Inspect.Algebra.__exports = __exports

    return __exports;
}
ElixirScript.Core.Functions.build_namespace(Elixir, 'Elixir.String.Chars.URI').__load = function(Elixir) {
    if (Elixir.String.Chars.URI.__exports)
        return Elixir.String.Chars.URI.__exports;

    function __info__(kind) {
        const __info__map__ = new Map([[Symbol.for('functions'), [new ElixirScript.Core.Tuple(Symbol.for('__impl__'), 1), new ElixirScript.Core.Tuple(Symbol.for('to_string'), 1)]], [Symbol.for('macros'), []], [Symbol.for('attributes'), [new ElixirScript.Core.Tuple(Symbol.for('vsn'), [41684391308037489114556609376532809497]), new ElixirScript.Core.Tuple(Symbol.for('behaviour'), [Elixir.String.Chars.__load(Elixir)]), new ElixirScript.Core.Tuple(Symbol.for('protocol_impl'), [new ElixirScript.Core.Tuple(Symbol.for('protocol'), Elixir.String.Chars.__load(Elixir)), new ElixirScript.Core.Tuple(Symbol.for('for'), Elixir.URI.__load(Elixir))])]], [Symbol.for('compile'), [new ElixirScript.Core.Tuple(Symbol.for('options'), []), new ElixirScript.Core.Tuple(Symbol.for('version'), [55, 46, 49, 46, 50]), new ElixirScript.Core.Tuple(Symbol.for('source'), '/private/tmp/elixir-20170929-51947-wgj4qu/elixir-1.5.2/lib/elixir/lib/uri.ex')]], [Symbol.for('md5'), new ElixirScript.Core.BitString(ElixirScript.Core.BitString.integer(31), ElixirScript.Core.BitString.integer(92), ElixirScript.Core.BitString.integer(31), ElixirScript.Core.BitString.integer(42), ElixirScript.Core.BitString.integer(146), ElixirScript.Core.BitString.integer(210), ElixirScript.Core.BitString.integer(141), ElixirScript.Core.BitString.integer(130), ElixirScript.Core.BitString.integer(56), ElixirScript.Core.BitString.integer(24), ElixirScript.Core.BitString.integer(196), ElixirScript.Core.BitString.integer(237), ElixirScript.Core.BitString.integer(86), ElixirScript.Core.BitString.integer(11), ElixirScript.Core.BitString.integer(199), ElixirScript.Core.BitString.integer(25))], [Symbol.for('module'), Symbol.for('Elixir.String.Chars.URI')]]);

        const value = __info__map__.get(kind);

        if (value !== null) {
            return value;
        }

        throw new ElixirScript.Core.Patterns.MatchError(kind);
    }

    function __impl__(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('for')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.URI.__load(Elixir);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('target')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.String.Chars.URI.__load(Elixir);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('protocol')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.String.Chars.__load(Elixir);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function extract_authority(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([new Map([[Symbol.for('host'), null], [Symbol.for('authority'), ElixirScript.Core.Patterns.variable('authority')]])], __function_args__, (authority0) => {
                return true;
            })) !== null) {
                let [authority0] = __arg_matches__;

                return authority0;
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([new Map([[Symbol.for('host'), ElixirScript.Core.Patterns.variable('host')], [Symbol.for('userinfo'), ElixirScript.Core.Patterns.variable('userinfo')], [Symbol.for('port'), ElixirScript.Core.Patterns.variable('port')]])], __function_args__, (host0, userinfo0, port0) => {
                return true;
            })) !== null) {
                let [host0, userinfo0, port0] = __arg_matches__;

                return ElixirScript.Core.Patterns.defmatch(ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.variable('x576460752303255549')], (x5764607523032555490) => {
                    return '';
                }, (x5764607523032555490) => {
                    return x5764607523032555490 === null || x5764607523032555490 === false;
                }), ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.variable('_')], () => {
                    return userinfo0 + '@';
                }, () => {
                    return true;
                })).call(this, userinfo0) + (ElixirScript.Core.Patterns.defmatch(ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.variable('x576460752303255453')], (x5764607523032554530) => {
                    return host0;
                }, (x5764607523032554530) => {
                    return x5764607523032554530 === null || x5764607523032554530 === false;
                }), ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.variable('_')], () => {
                    return '[' + (host0 + ']');
                }, () => {
                    return true;
                })).call(this, Elixir.String.__load(Elixir).contains__qmark__(host0, ':')) + ElixirScript.Core.Patterns.defmatch(ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.variable('x576460752303255357')], (x5764607523032553570) => {
                    return '';
                }, (x5764607523032553570) => {
                    return x5764607523032553570 === null || x5764607523032553570 === false;
                }), ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.variable('_')], () => {
                    return ':' + ElixirScript.Core.erlang.integer_to_binary(port0);
                }, () => {
                    return true;
                })).call(this, port0));
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function to_string(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.capture(new Map([[Symbol.for('scheme'), ElixirScript.Core.Patterns.variable('scheme')], [Symbol.for('port'), ElixirScript.Core.Patterns.variable('port')], [Symbol.for('path'), ElixirScript.Core.Patterns.variable('path')], [Symbol.for('query'), ElixirScript.Core.Patterns.variable('query')], [Symbol.for('fragment'), ElixirScript.Core.Patterns.variable('fragment')]]))], __function_args__, (scheme0, port0, path0, query0, fragment0, uri0) => {
                return true;
            })) !== null) {
                let [scheme0, port0, path0, query0, fragment0, uri0] = __arg_matches__;

                const [uri1] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.variable('uri'), ElixirScript.Core.Patterns.defmatch(ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.bound(port0)], () => {
                    return new Map([...uri0, [Symbol.for('port'), null]]);
                }, () => {
                    return true;
                }), ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.variable('_')], () => {
                    return uri0;
                }, () => {
                    return true;
                })).call(this, ElixirScript.Core.Patterns.defmatch(ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.variable('x576460752303291132')], (x5764607523032911320) => {
                    return x5764607523032911320;
                }, (x5764607523032911320) => {
                    return x5764607523032911320 === null || x5764607523032911320 === false;
                }), ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.variable('_')], () => {
                    return Elixir.URI.__load(Elixir).default_port(scheme0);
                }, () => {
                    return true;
                })).call(this, scheme0)));

                const [authority0] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.variable('authority'), extract_authority(uri1));

                return ElixirScript.Core.Patterns.defmatch(ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.variable('x576460752303291036')], (x5764607523032910360) => {
                    return '';
                }, (x5764607523032910360) => {
                    return x5764607523032910360 === null || x5764607523032910360 === false;
                }), ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.variable('_')], () => {
                    return scheme0 + ':';
                }, () => {
                    return true;
                })).call(this, scheme0) + (ElixirScript.Core.Patterns.defmatch(ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.variable('x576460752303290940')], (x5764607523032909400) => {
                    return '';
                }, (x5764607523032909400) => {
                    return x5764607523032909400 === null || x5764607523032909400 === false;
                }), ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.variable('_')], () => {
                    return '//' + authority0;
                }, () => {
                    return true;
                })).call(this, authority0) + (ElixirScript.Core.Patterns.defmatch(ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.variable('x576460752303290844')], (x5764607523032908440) => {
                    return '';
                }, (x5764607523032908440) => {
                    return x5764607523032908440 === null || x5764607523032908440 === false;
                }), ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.variable('_')], () => {
                    return path0;
                }, () => {
                    return true;
                })).call(this, path0) + (ElixirScript.Core.Patterns.defmatch(ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.variable('x576460752303290780')], (x5764607523032907800) => {
                    return '';
                }, (x5764607523032907800) => {
                    return x5764607523032907800 === null || x5764607523032907800 === false;
                }), ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.variable('_')], () => {
                    return '?' + query0;
                }, () => {
                    return true;
                })).call(this, query0) + ElixirScript.Core.Patterns.defmatch(ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.variable('x576460752303290684')], (x5764607523032906840) => {
                    return '';
                }, (x5764607523032906840) => {
                    return x5764607523032906840 === null || x5764607523032906840 === false;
                }), ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.variable('_')], () => {
                    return '#' + fragment0;
                }, () => {
                    return true;
                })).call(this, fragment0))));
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    const __exports = {
        __impl__,
        to_string,
        __MODULE__: Symbol.for('Elixir.String.Chars.URI'),
        __info__
    };

    Elixir.String.Chars.URI.__exports = __exports

    return __exports;
}
ElixirScript.Core.Functions.build_namespace(Elixir, 'Elixir.String').__load = function(Elixir) {
    if (Elixir.String.__exports)
        return Elixir.String.__exports;

    function __info__(kind) {
        const __info__map__ = new Map([[Symbol.for('functions'), [new ElixirScript.Core.Tuple(Symbol.for('at'), 2), new ElixirScript.Core.Tuple(Symbol.for('capitalize'), 1), new ElixirScript.Core.Tuple(Symbol.for('chunk'), 2), new ElixirScript.Core.Tuple(Symbol.for('codepoints'), 1), new ElixirScript.Core.Tuple(Symbol.for('contains?'), 2), new ElixirScript.Core.Tuple(Symbol.for('downcase'), 1), new ElixirScript.Core.Tuple(Symbol.for('duplicate'), 2), new ElixirScript.Core.Tuple(Symbol.for('ends_with?'), 2), new ElixirScript.Core.Tuple(Symbol.for('equivalent?'), 2), new ElixirScript.Core.Tuple(Symbol.for('first'), 1), new ElixirScript.Core.Tuple(Symbol.for('graphemes'), 1), new ElixirScript.Core.Tuple(Symbol.for('jaro_distance'), 2), new ElixirScript.Core.Tuple(Symbol.for('last'), 1), new ElixirScript.Core.Tuple(Symbol.for('length'), 1), new ElixirScript.Core.Tuple(Symbol.for('ljust'), 2), new ElixirScript.Core.Tuple(Symbol.for('ljust'), 3), new ElixirScript.Core.Tuple(Symbol.for('lstrip'), 1), new ElixirScript.Core.Tuple(Symbol.for('lstrip'), 2), new ElixirScript.Core.Tuple(Symbol.for('match?'), 2), new ElixirScript.Core.Tuple(Symbol.for('myers_difference'), 2), new ElixirScript.Core.Tuple(Symbol.for('next_codepoint'), 1), new ElixirScript.Core.Tuple(Symbol.for('next_grapheme'), 1), new ElixirScript.Core.Tuple(Symbol.for('next_grapheme_size'), 1), new ElixirScript.Core.Tuple(Symbol.for('normalize'), 2), new ElixirScript.Core.Tuple(Symbol.for('pad_leading'), 2), new ElixirScript.Core.Tuple(Symbol.for('pad_leading'), 3), new ElixirScript.Core.Tuple(Symbol.for('pad_trailing'), 2), new ElixirScript.Core.Tuple(Symbol.for('pad_trailing'), 3), new ElixirScript.Core.Tuple(Symbol.for('printable?'), 1), new ElixirScript.Core.Tuple(Symbol.for('printable?'), 2), new ElixirScript.Core.Tuple(Symbol.for('replace'), 3), new ElixirScript.Core.Tuple(Symbol.for('replace'), 4), new ElixirScript.Core.Tuple(Symbol.for('replace_leading'), 3), new ElixirScript.Core.Tuple(Symbol.for('replace_prefix'), 3), new ElixirScript.Core.Tuple(Symbol.for('replace_suffix'), 3), new ElixirScript.Core.Tuple(Symbol.for('replace_trailing'), 3), new ElixirScript.Core.Tuple(Symbol.for('reverse'), 1), new ElixirScript.Core.Tuple(Symbol.for('rjust'), 2), new ElixirScript.Core.Tuple(Symbol.for('rjust'), 3), new ElixirScript.Core.Tuple(Symbol.for('rstrip'), 1), new ElixirScript.Core.Tuple(Symbol.for('rstrip'), 2), new ElixirScript.Core.Tuple(Symbol.for('slice'), 2), new ElixirScript.Core.Tuple(Symbol.for('slice'), 3), new ElixirScript.Core.Tuple(Symbol.for('split'), 1), new ElixirScript.Core.Tuple(Symbol.for('split'), 2), new ElixirScript.Core.Tuple(Symbol.for('split'), 3), new ElixirScript.Core.Tuple(Symbol.for('split_at'), 2), new ElixirScript.Core.Tuple(Symbol.for('splitter'), 2), new ElixirScript.Core.Tuple(Symbol.for('splitter'), 3), new ElixirScript.Core.Tuple(Symbol.for('starts_with?'), 2), new ElixirScript.Core.Tuple(Symbol.for('strip'), 1), new ElixirScript.Core.Tuple(Symbol.for('strip'), 2), new ElixirScript.Core.Tuple(Symbol.for('to_atom'), 1), new ElixirScript.Core.Tuple(Symbol.for('to_char_list'), 1), new ElixirScript.Core.Tuple(Symbol.for('to_charlist'), 1), new ElixirScript.Core.Tuple(Symbol.for('to_existing_atom'), 1), new ElixirScript.Core.Tuple(Symbol.for('to_float'), 1), new ElixirScript.Core.Tuple(Symbol.for('to_integer'), 1), new ElixirScript.Core.Tuple(Symbol.for('to_integer'), 2), new ElixirScript.Core.Tuple(Symbol.for('trim'), 1), new ElixirScript.Core.Tuple(Symbol.for('trim'), 2), new ElixirScript.Core.Tuple(Symbol.for('trim_leading'), 1), new ElixirScript.Core.Tuple(Symbol.for('trim_leading'), 2), new ElixirScript.Core.Tuple(Symbol.for('trim_trailing'), 1), new ElixirScript.Core.Tuple(Symbol.for('trim_trailing'), 2), new ElixirScript.Core.Tuple(Symbol.for('upcase'), 1), new ElixirScript.Core.Tuple(Symbol.for('valid?'), 1), new ElixirScript.Core.Tuple(Symbol.for('valid_character?'), 1)]], [Symbol.for('macros'), []], [Symbol.for('attributes'), [new ElixirScript.Core.Tuple(Symbol.for('vsn'), [330911714545686765971441021197701126709])]], [Symbol.for('compile'), [new ElixirScript.Core.Tuple(Symbol.for('options'), []), new ElixirScript.Core.Tuple(Symbol.for('version'), [55, 46, 49, 46, 50]), new ElixirScript.Core.Tuple(Symbol.for('source'), '/private/tmp/elixir-20170929-51947-wgj4qu/elixir-1.5.2/lib/elixir/lib/string.ex')]], [Symbol.for('md5'), new ElixirScript.Core.BitString(ElixirScript.Core.BitString.integer(248), ElixirScript.Core.BitString.integer(243), ElixirScript.Core.BitString.integer(71), ElixirScript.Core.BitString.integer(42), ElixirScript.Core.BitString.integer(244), ElixirScript.Core.BitString.integer(185), ElixirScript.Core.BitString.integer(209), ElixirScript.Core.BitString.integer(46), ElixirScript.Core.BitString.integer(189), ElixirScript.Core.BitString.integer(215), ElixirScript.Core.BitString.integer(207), ElixirScript.Core.BitString.integer(35), ElixirScript.Core.BitString.integer(85), ElixirScript.Core.BitString.integer(208), ElixirScript.Core.BitString.integer(154), ElixirScript.Core.BitString.integer(53))], [Symbol.for('module'), Symbol.for('Elixir.String')]]);

        const value = __info__map__.get(kind);

        if (value !== null) {
            return value;
        }

        throw new ElixirScript.Core.Patterns.MatchError(kind);
    }

    function contains__qmark__(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('str'), ElixirScript.Core.Patterns.variable('s')], __function_args__, (str0, s0) => {
                return ElixirScript.Core.erlang.is_binary(s0);
            })) !== null) {
                let [str0, s0] = __arg_matches__;

                return str0.indexOf(s0) > -1;
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('str'), ElixirScript.Core.Patterns.variable('s')], __function_args__, (str0, s0) => {
                return ElixirScript.Core.erlang.is_list(s0);
            })) !== null) {
                let [str0, s0] = __arg_matches__;

                return do_contains__qmark__(str0, s0);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function decrement(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('infinity')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Symbol.for('infinity');
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('counter')], __function_args__, (counter0) => {
                return true;
            })) !== null) {
                let [counter0] = __arg_matches__;

                return counter0 - 1;
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function printable__qmark__(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.bitStringMatch(), ElixirScript.Core.Patterns.variable('_')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return true;
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('_'), 0], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return true;
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.bitStringMatch(ElixirScript.Core.BitString.integer(32), ElixirScript.Core.BitString.binary({
                'value': ElixirScript.Core.Patterns.variable()
            })), ElixirScript.Core.Patterns.variable('counter')], __function_args__, (rest0, counter0) => {
                return true;
            })) !== null) {
                let [rest0, counter0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, rest0, decrement(counter0)));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.bitStringMatch(ElixirScript.Core.BitString.integer(33), ElixirScript.Core.BitString.binary({
                'value': ElixirScript.Core.Patterns.variable()
            })), ElixirScript.Core.Patterns.variable('counter')], __function_args__, (rest0, counter0) => {
                return true;
            })) !== null) {
                let [rest0, counter0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, rest0, decrement(counter0)));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.bitStringMatch(ElixirScript.Core.BitString.integer(34), ElixirScript.Core.BitString.binary({
                'value': ElixirScript.Core.Patterns.variable()
            })), ElixirScript.Core.Patterns.variable('counter')], __function_args__, (rest0, counter0) => {
                return true;
            })) !== null) {
                let [rest0, counter0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, rest0, decrement(counter0)));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.bitStringMatch(ElixirScript.Core.BitString.integer(35), ElixirScript.Core.BitString.binary({
                'value': ElixirScript.Core.Patterns.variable()
            })), ElixirScript.Core.Patterns.variable('counter')], __function_args__, (rest0, counter0) => {
                return true;
            })) !== null) {
                let [rest0, counter0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, rest0, decrement(counter0)));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.bitStringMatch(ElixirScript.Core.BitString.integer(36), ElixirScript.Core.BitString.binary({
                'value': ElixirScript.Core.Patterns.variable()
            })), ElixirScript.Core.Patterns.variable('counter')], __function_args__, (rest0, counter0) => {
                return true;
            })) !== null) {
                let [rest0, counter0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, rest0, decrement(counter0)));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.bitStringMatch(ElixirScript.Core.BitString.integer(37), ElixirScript.Core.BitString.binary({
                'value': ElixirScript.Core.Patterns.variable()
            })), ElixirScript.Core.Patterns.variable('counter')], __function_args__, (rest0, counter0) => {
                return true;
            })) !== null) {
                let [rest0, counter0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, rest0, decrement(counter0)));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.bitStringMatch(ElixirScript.Core.BitString.integer(38), ElixirScript.Core.BitString.binary({
                'value': ElixirScript.Core.Patterns.variable()
            })), ElixirScript.Core.Patterns.variable('counter')], __function_args__, (rest0, counter0) => {
                return true;
            })) !== null) {
                let [rest0, counter0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, rest0, decrement(counter0)));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.bitStringMatch(ElixirScript.Core.BitString.integer(39), ElixirScript.Core.BitString.binary({
                'value': ElixirScript.Core.Patterns.variable()
            })), ElixirScript.Core.Patterns.variable('counter')], __function_args__, (rest0, counter0) => {
                return true;
            })) !== null) {
                let [rest0, counter0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, rest0, decrement(counter0)));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.bitStringMatch(ElixirScript.Core.BitString.integer(40), ElixirScript.Core.BitString.binary({
                'value': ElixirScript.Core.Patterns.variable()
            })), ElixirScript.Core.Patterns.variable('counter')], __function_args__, (rest0, counter0) => {
                return true;
            })) !== null) {
                let [rest0, counter0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, rest0, decrement(counter0)));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.bitStringMatch(ElixirScript.Core.BitString.integer(41), ElixirScript.Core.BitString.binary({
                'value': ElixirScript.Core.Patterns.variable()
            })), ElixirScript.Core.Patterns.variable('counter')], __function_args__, (rest0, counter0) => {
                return true;
            })) !== null) {
                let [rest0, counter0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, rest0, decrement(counter0)));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.bitStringMatch(ElixirScript.Core.BitString.integer(42), ElixirScript.Core.BitString.binary({
                'value': ElixirScript.Core.Patterns.variable()
            })), ElixirScript.Core.Patterns.variable('counter')], __function_args__, (rest0, counter0) => {
                return true;
            })) !== null) {
                let [rest0, counter0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, rest0, decrement(counter0)));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.bitStringMatch(ElixirScript.Core.BitString.integer(43), ElixirScript.Core.BitString.binary({
                'value': ElixirScript.Core.Patterns.variable()
            })), ElixirScript.Core.Patterns.variable('counter')], __function_args__, (rest0, counter0) => {
                return true;
            })) !== null) {
                let [rest0, counter0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, rest0, decrement(counter0)));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.bitStringMatch(ElixirScript.Core.BitString.integer(44), ElixirScript.Core.BitString.binary({
                'value': ElixirScript.Core.Patterns.variable()
            })), ElixirScript.Core.Patterns.variable('counter')], __function_args__, (rest0, counter0) => {
                return true;
            })) !== null) {
                let [rest0, counter0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, rest0, decrement(counter0)));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.bitStringMatch(ElixirScript.Core.BitString.integer(45), ElixirScript.Core.BitString.binary({
                'value': ElixirScript.Core.Patterns.variable()
            })), ElixirScript.Core.Patterns.variable('counter')], __function_args__, (rest0, counter0) => {
                return true;
            })) !== null) {
                let [rest0, counter0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, rest0, decrement(counter0)));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.bitStringMatch(ElixirScript.Core.BitString.integer(46), ElixirScript.Core.BitString.binary({
                'value': ElixirScript.Core.Patterns.variable()
            })), ElixirScript.Core.Patterns.variable('counter')], __function_args__, (rest0, counter0) => {
                return true;
            })) !== null) {
                let [rest0, counter0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, rest0, decrement(counter0)));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.bitStringMatch(ElixirScript.Core.BitString.integer(47), ElixirScript.Core.BitString.binary({
                'value': ElixirScript.Core.Patterns.variable()
            })), ElixirScript.Core.Patterns.variable('counter')], __function_args__, (rest0, counter0) => {
                return true;
            })) !== null) {
                let [rest0, counter0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, rest0, decrement(counter0)));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.bitStringMatch(ElixirScript.Core.BitString.integer(48), ElixirScript.Core.BitString.binary({
                'value': ElixirScript.Core.Patterns.variable()
            })), ElixirScript.Core.Patterns.variable('counter')], __function_args__, (rest0, counter0) => {
                return true;
            })) !== null) {
                let [rest0, counter0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, rest0, decrement(counter0)));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.bitStringMatch(ElixirScript.Core.BitString.integer(49), ElixirScript.Core.BitString.binary({
                'value': ElixirScript.Core.Patterns.variable()
            })), ElixirScript.Core.Patterns.variable('counter')], __function_args__, (rest0, counter0) => {
                return true;
            })) !== null) {
                let [rest0, counter0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, rest0, decrement(counter0)));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.bitStringMatch(ElixirScript.Core.BitString.integer(50), ElixirScript.Core.BitString.binary({
                'value': ElixirScript.Core.Patterns.variable()
            })), ElixirScript.Core.Patterns.variable('counter')], __function_args__, (rest0, counter0) => {
                return true;
            })) !== null) {
                let [rest0, counter0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, rest0, decrement(counter0)));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.bitStringMatch(ElixirScript.Core.BitString.integer(51), ElixirScript.Core.BitString.binary({
                'value': ElixirScript.Core.Patterns.variable()
            })), ElixirScript.Core.Patterns.variable('counter')], __function_args__, (rest0, counter0) => {
                return true;
            })) !== null) {
                let [rest0, counter0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, rest0, decrement(counter0)));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.bitStringMatch(ElixirScript.Core.BitString.integer(52), ElixirScript.Core.BitString.binary({
                'value': ElixirScript.Core.Patterns.variable()
            })), ElixirScript.Core.Patterns.variable('counter')], __function_args__, (rest0, counter0) => {
                return true;
            })) !== null) {
                let [rest0, counter0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, rest0, decrement(counter0)));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.bitStringMatch(ElixirScript.Core.BitString.integer(53), ElixirScript.Core.BitString.binary({
                'value': ElixirScript.Core.Patterns.variable()
            })), ElixirScript.Core.Patterns.variable('counter')], __function_args__, (rest0, counter0) => {
                return true;
            })) !== null) {
                let [rest0, counter0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, rest0, decrement(counter0)));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.bitStringMatch(ElixirScript.Core.BitString.integer(54), ElixirScript.Core.BitString.binary({
                'value': ElixirScript.Core.Patterns.variable()
            })), ElixirScript.Core.Patterns.variable('counter')], __function_args__, (rest0, counter0) => {
                return true;
            })) !== null) {
                let [rest0, counter0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, rest0, decrement(counter0)));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.bitStringMatch(ElixirScript.Core.BitString.integer(55), ElixirScript.Core.BitString.binary({
                'value': ElixirScript.Core.Patterns.variable()
            })), ElixirScript.Core.Patterns.variable('counter')], __function_args__, (rest0, counter0) => {
                return true;
            })) !== null) {
                let [rest0, counter0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, rest0, decrement(counter0)));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.bitStringMatch(ElixirScript.Core.BitString.integer(56), ElixirScript.Core.BitString.binary({
                'value': ElixirScript.Core.Patterns.variable()
            })), ElixirScript.Core.Patterns.variable('counter')], __function_args__, (rest0, counter0) => {
                return true;
            })) !== null) {
                let [rest0, counter0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, rest0, decrement(counter0)));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.bitStringMatch(ElixirScript.Core.BitString.integer(57), ElixirScript.Core.BitString.binary({
                'value': ElixirScript.Core.Patterns.variable()
            })), ElixirScript.Core.Patterns.variable('counter')], __function_args__, (rest0, counter0) => {
                return true;
            })) !== null) {
                let [rest0, counter0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, rest0, decrement(counter0)));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.bitStringMatch(ElixirScript.Core.BitString.integer(58), ElixirScript.Core.BitString.binary({
                'value': ElixirScript.Core.Patterns.variable()
            })), ElixirScript.Core.Patterns.variable('counter')], __function_args__, (rest0, counter0) => {
                return true;
            })) !== null) {
                let [rest0, counter0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, rest0, decrement(counter0)));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.bitStringMatch(ElixirScript.Core.BitString.integer(59), ElixirScript.Core.BitString.binary({
                'value': ElixirScript.Core.Patterns.variable()
            })), ElixirScript.Core.Patterns.variable('counter')], __function_args__, (rest0, counter0) => {
                return true;
            })) !== null) {
                let [rest0, counter0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, rest0, decrement(counter0)));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.bitStringMatch(ElixirScript.Core.BitString.integer(60), ElixirScript.Core.BitString.binary({
                'value': ElixirScript.Core.Patterns.variable()
            })), ElixirScript.Core.Patterns.variable('counter')], __function_args__, (rest0, counter0) => {
                return true;
            })) !== null) {
                let [rest0, counter0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, rest0, decrement(counter0)));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.bitStringMatch(ElixirScript.Core.BitString.integer(61), ElixirScript.Core.BitString.binary({
                'value': ElixirScript.Core.Patterns.variable()
            })), ElixirScript.Core.Patterns.variable('counter')], __function_args__, (rest0, counter0) => {
                return true;
            })) !== null) {
                let [rest0, counter0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, rest0, decrement(counter0)));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.bitStringMatch(ElixirScript.Core.BitString.integer(62), ElixirScript.Core.BitString.binary({
                'value': ElixirScript.Core.Patterns.variable()
            })), ElixirScript.Core.Patterns.variable('counter')], __function_args__, (rest0, counter0) => {
                return true;
            })) !== null) {
                let [rest0, counter0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, rest0, decrement(counter0)));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.bitStringMatch(ElixirScript.Core.BitString.integer(63), ElixirScript.Core.BitString.binary({
                'value': ElixirScript.Core.Patterns.variable()
            })), ElixirScript.Core.Patterns.variable('counter')], __function_args__, (rest0, counter0) => {
                return true;
            })) !== null) {
                let [rest0, counter0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, rest0, decrement(counter0)));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.bitStringMatch(ElixirScript.Core.BitString.integer(64), ElixirScript.Core.BitString.binary({
                'value': ElixirScript.Core.Patterns.variable()
            })), ElixirScript.Core.Patterns.variable('counter')], __function_args__, (rest0, counter0) => {
                return true;
            })) !== null) {
                let [rest0, counter0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, rest0, decrement(counter0)));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.bitStringMatch(ElixirScript.Core.BitString.integer(65), ElixirScript.Core.BitString.binary({
                'value': ElixirScript.Core.Patterns.variable()
            })), ElixirScript.Core.Patterns.variable('counter')], __function_args__, (rest0, counter0) => {
                return true;
            })) !== null) {
                let [rest0, counter0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, rest0, decrement(counter0)));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.bitStringMatch(ElixirScript.Core.BitString.integer(66), ElixirScript.Core.BitString.binary({
                'value': ElixirScript.Core.Patterns.variable()
            })), ElixirScript.Core.Patterns.variable('counter')], __function_args__, (rest0, counter0) => {
                return true;
            })) !== null) {
                let [rest0, counter0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, rest0, decrement(counter0)));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.bitStringMatch(ElixirScript.Core.BitString.integer(67), ElixirScript.Core.BitString.binary({
                'value': ElixirScript.Core.Patterns.variable()
            })), ElixirScript.Core.Patterns.variable('counter')], __function_args__, (rest0, counter0) => {
                return true;
            })) !== null) {
                let [rest0, counter0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, rest0, decrement(counter0)));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.bitStringMatch(ElixirScript.Core.BitString.integer(68), ElixirScript.Core.BitString.binary({
                'value': ElixirScript.Core.Patterns.variable()
            })), ElixirScript.Core.Patterns.variable('counter')], __function_args__, (rest0, counter0) => {
                return true;
            })) !== null) {
                let [rest0, counter0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, rest0, decrement(counter0)));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.bitStringMatch(ElixirScript.Core.BitString.integer(69), ElixirScript.Core.BitString.binary({
                'value': ElixirScript.Core.Patterns.variable()
            })), ElixirScript.Core.Patterns.variable('counter')], __function_args__, (rest0, counter0) => {
                return true;
            })) !== null) {
                let [rest0, counter0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, rest0, decrement(counter0)));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.bitStringMatch(ElixirScript.Core.BitString.integer(70), ElixirScript.Core.BitString.binary({
                'value': ElixirScript.Core.Patterns.variable()
            })), ElixirScript.Core.Patterns.variable('counter')], __function_args__, (rest0, counter0) => {
                return true;
            })) !== null) {
                let [rest0, counter0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, rest0, decrement(counter0)));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.bitStringMatch(ElixirScript.Core.BitString.integer(71), ElixirScript.Core.BitString.binary({
                'value': ElixirScript.Core.Patterns.variable()
            })), ElixirScript.Core.Patterns.variable('counter')], __function_args__, (rest0, counter0) => {
                return true;
            })) !== null) {
                let [rest0, counter0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, rest0, decrement(counter0)));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.bitStringMatch(ElixirScript.Core.BitString.integer(72), ElixirScript.Core.BitString.binary({
                'value': ElixirScript.Core.Patterns.variable()
            })), ElixirScript.Core.Patterns.variable('counter')], __function_args__, (rest0, counter0) => {
                return true;
            })) !== null) {
                let [rest0, counter0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, rest0, decrement(counter0)));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.bitStringMatch(ElixirScript.Core.BitString.integer(73), ElixirScript.Core.BitString.binary({
                'value': ElixirScript.Core.Patterns.variable()
            })), ElixirScript.Core.Patterns.variable('counter')], __function_args__, (rest0, counter0) => {
                return true;
            })) !== null) {
                let [rest0, counter0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, rest0, decrement(counter0)));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.bitStringMatch(ElixirScript.Core.BitString.integer(74), ElixirScript.Core.BitString.binary({
                'value': ElixirScript.Core.Patterns.variable()
            })), ElixirScript.Core.Patterns.variable('counter')], __function_args__, (rest0, counter0) => {
                return true;
            })) !== null) {
                let [rest0, counter0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, rest0, decrement(counter0)));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.bitStringMatch(ElixirScript.Core.BitString.integer(75), ElixirScript.Core.BitString.binary({
                'value': ElixirScript.Core.Patterns.variable()
            })), ElixirScript.Core.Patterns.variable('counter')], __function_args__, (rest0, counter0) => {
                return true;
            })) !== null) {
                let [rest0, counter0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, rest0, decrement(counter0)));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.bitStringMatch(ElixirScript.Core.BitString.integer(76), ElixirScript.Core.BitString.binary({
                'value': ElixirScript.Core.Patterns.variable()
            })), ElixirScript.Core.Patterns.variable('counter')], __function_args__, (rest0, counter0) => {
                return true;
            })) !== null) {
                let [rest0, counter0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, rest0, decrement(counter0)));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.bitStringMatch(ElixirScript.Core.BitString.integer(77), ElixirScript.Core.BitString.binary({
                'value': ElixirScript.Core.Patterns.variable()
            })), ElixirScript.Core.Patterns.variable('counter')], __function_args__, (rest0, counter0) => {
                return true;
            })) !== null) {
                let [rest0, counter0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, rest0, decrement(counter0)));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.bitStringMatch(ElixirScript.Core.BitString.integer(78), ElixirScript.Core.BitString.binary({
                'value': ElixirScript.Core.Patterns.variable()
            })), ElixirScript.Core.Patterns.variable('counter')], __function_args__, (rest0, counter0) => {
                return true;
            })) !== null) {
                let [rest0, counter0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, rest0, decrement(counter0)));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.bitStringMatch(ElixirScript.Core.BitString.integer(79), ElixirScript.Core.BitString.binary({
                'value': ElixirScript.Core.Patterns.variable()
            })), ElixirScript.Core.Patterns.variable('counter')], __function_args__, (rest0, counter0) => {
                return true;
            })) !== null) {
                let [rest0, counter0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, rest0, decrement(counter0)));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.bitStringMatch(ElixirScript.Core.BitString.integer(80), ElixirScript.Core.BitString.binary({
                'value': ElixirScript.Core.Patterns.variable()
            })), ElixirScript.Core.Patterns.variable('counter')], __function_args__, (rest0, counter0) => {
                return true;
            })) !== null) {
                let [rest0, counter0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, rest0, decrement(counter0)));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.bitStringMatch(ElixirScript.Core.BitString.integer(81), ElixirScript.Core.BitString.binary({
                'value': ElixirScript.Core.Patterns.variable()
            })), ElixirScript.Core.Patterns.variable('counter')], __function_args__, (rest0, counter0) => {
                return true;
            })) !== null) {
                let [rest0, counter0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, rest0, decrement(counter0)));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.bitStringMatch(ElixirScript.Core.BitString.integer(82), ElixirScript.Core.BitString.binary({
                'value': ElixirScript.Core.Patterns.variable()
            })), ElixirScript.Core.Patterns.variable('counter')], __function_args__, (rest0, counter0) => {
                return true;
            })) !== null) {
                let [rest0, counter0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, rest0, decrement(counter0)));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.bitStringMatch(ElixirScript.Core.BitString.integer(83), ElixirScript.Core.BitString.binary({
                'value': ElixirScript.Core.Patterns.variable()
            })), ElixirScript.Core.Patterns.variable('counter')], __function_args__, (rest0, counter0) => {
                return true;
            })) !== null) {
                let [rest0, counter0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, rest0, decrement(counter0)));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.bitStringMatch(ElixirScript.Core.BitString.integer(84), ElixirScript.Core.BitString.binary({
                'value': ElixirScript.Core.Patterns.variable()
            })), ElixirScript.Core.Patterns.variable('counter')], __function_args__, (rest0, counter0) => {
                return true;
            })) !== null) {
                let [rest0, counter0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, rest0, decrement(counter0)));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.bitStringMatch(ElixirScript.Core.BitString.integer(85), ElixirScript.Core.BitString.binary({
                'value': ElixirScript.Core.Patterns.variable()
            })), ElixirScript.Core.Patterns.variable('counter')], __function_args__, (rest0, counter0) => {
                return true;
            })) !== null) {
                let [rest0, counter0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, rest0, decrement(counter0)));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.bitStringMatch(ElixirScript.Core.BitString.integer(86), ElixirScript.Core.BitString.binary({
                'value': ElixirScript.Core.Patterns.variable()
            })), ElixirScript.Core.Patterns.variable('counter')], __function_args__, (rest0, counter0) => {
                return true;
            })) !== null) {
                let [rest0, counter0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, rest0, decrement(counter0)));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.bitStringMatch(ElixirScript.Core.BitString.integer(87), ElixirScript.Core.BitString.binary({
                'value': ElixirScript.Core.Patterns.variable()
            })), ElixirScript.Core.Patterns.variable('counter')], __function_args__, (rest0, counter0) => {
                return true;
            })) !== null) {
                let [rest0, counter0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, rest0, decrement(counter0)));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.bitStringMatch(ElixirScript.Core.BitString.integer(88), ElixirScript.Core.BitString.binary({
                'value': ElixirScript.Core.Patterns.variable()
            })), ElixirScript.Core.Patterns.variable('counter')], __function_args__, (rest0, counter0) => {
                return true;
            })) !== null) {
                let [rest0, counter0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, rest0, decrement(counter0)));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.bitStringMatch(ElixirScript.Core.BitString.integer(89), ElixirScript.Core.BitString.binary({
                'value': ElixirScript.Core.Patterns.variable()
            })), ElixirScript.Core.Patterns.variable('counter')], __function_args__, (rest0, counter0) => {
                return true;
            })) !== null) {
                let [rest0, counter0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, rest0, decrement(counter0)));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.bitStringMatch(ElixirScript.Core.BitString.integer(90), ElixirScript.Core.BitString.binary({
                'value': ElixirScript.Core.Patterns.variable()
            })), ElixirScript.Core.Patterns.variable('counter')], __function_args__, (rest0, counter0) => {
                return true;
            })) !== null) {
                let [rest0, counter0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, rest0, decrement(counter0)));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.bitStringMatch(ElixirScript.Core.BitString.integer(91), ElixirScript.Core.BitString.binary({
                'value': ElixirScript.Core.Patterns.variable()
            })), ElixirScript.Core.Patterns.variable('counter')], __function_args__, (rest0, counter0) => {
                return true;
            })) !== null) {
                let [rest0, counter0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, rest0, decrement(counter0)));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.bitStringMatch(ElixirScript.Core.BitString.integer(92), ElixirScript.Core.BitString.binary({
                'value': ElixirScript.Core.Patterns.variable()
            })), ElixirScript.Core.Patterns.variable('counter')], __function_args__, (rest0, counter0) => {
                return true;
            })) !== null) {
                let [rest0, counter0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, rest0, decrement(counter0)));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.bitStringMatch(ElixirScript.Core.BitString.integer(93), ElixirScript.Core.BitString.binary({
                'value': ElixirScript.Core.Patterns.variable()
            })), ElixirScript.Core.Patterns.variable('counter')], __function_args__, (rest0, counter0) => {
                return true;
            })) !== null) {
                let [rest0, counter0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, rest0, decrement(counter0)));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.bitStringMatch(ElixirScript.Core.BitString.integer(94), ElixirScript.Core.BitString.binary({
                'value': ElixirScript.Core.Patterns.variable()
            })), ElixirScript.Core.Patterns.variable('counter')], __function_args__, (rest0, counter0) => {
                return true;
            })) !== null) {
                let [rest0, counter0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, rest0, decrement(counter0)));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.bitStringMatch(ElixirScript.Core.BitString.integer(95), ElixirScript.Core.BitString.binary({
                'value': ElixirScript.Core.Patterns.variable()
            })), ElixirScript.Core.Patterns.variable('counter')], __function_args__, (rest0, counter0) => {
                return true;
            })) !== null) {
                let [rest0, counter0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, rest0, decrement(counter0)));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.bitStringMatch(ElixirScript.Core.BitString.integer(96), ElixirScript.Core.BitString.binary({
                'value': ElixirScript.Core.Patterns.variable()
            })), ElixirScript.Core.Patterns.variable('counter')], __function_args__, (rest0, counter0) => {
                return true;
            })) !== null) {
                let [rest0, counter0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, rest0, decrement(counter0)));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.bitStringMatch(ElixirScript.Core.BitString.integer(97), ElixirScript.Core.BitString.binary({
                'value': ElixirScript.Core.Patterns.variable()
            })), ElixirScript.Core.Patterns.variable('counter')], __function_args__, (rest0, counter0) => {
                return true;
            })) !== null) {
                let [rest0, counter0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, rest0, decrement(counter0)));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.bitStringMatch(ElixirScript.Core.BitString.integer(98), ElixirScript.Core.BitString.binary({
                'value': ElixirScript.Core.Patterns.variable()
            })), ElixirScript.Core.Patterns.variable('counter')], __function_args__, (rest0, counter0) => {
                return true;
            })) !== null) {
                let [rest0, counter0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, rest0, decrement(counter0)));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.bitStringMatch(ElixirScript.Core.BitString.integer(99), ElixirScript.Core.BitString.binary({
                'value': ElixirScript.Core.Patterns.variable()
            })), ElixirScript.Core.Patterns.variable('counter')], __function_args__, (rest0, counter0) => {
                return true;
            })) !== null) {
                let [rest0, counter0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, rest0, decrement(counter0)));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.bitStringMatch(ElixirScript.Core.BitString.integer(100), ElixirScript.Core.BitString.binary({
                'value': ElixirScript.Core.Patterns.variable()
            })), ElixirScript.Core.Patterns.variable('counter')], __function_args__, (rest0, counter0) => {
                return true;
            })) !== null) {
                let [rest0, counter0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, rest0, decrement(counter0)));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.bitStringMatch(ElixirScript.Core.BitString.integer(101), ElixirScript.Core.BitString.binary({
                'value': ElixirScript.Core.Patterns.variable()
            })), ElixirScript.Core.Patterns.variable('counter')], __function_args__, (rest0, counter0) => {
                return true;
            })) !== null) {
                let [rest0, counter0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, rest0, decrement(counter0)));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.bitStringMatch(ElixirScript.Core.BitString.integer(102), ElixirScript.Core.BitString.binary({
                'value': ElixirScript.Core.Patterns.variable()
            })), ElixirScript.Core.Patterns.variable('counter')], __function_args__, (rest0, counter0) => {
                return true;
            })) !== null) {
                let [rest0, counter0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, rest0, decrement(counter0)));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.bitStringMatch(ElixirScript.Core.BitString.integer(103), ElixirScript.Core.BitString.binary({
                'value': ElixirScript.Core.Patterns.variable()
            })), ElixirScript.Core.Patterns.variable('counter')], __function_args__, (rest0, counter0) => {
                return true;
            })) !== null) {
                let [rest0, counter0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, rest0, decrement(counter0)));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.bitStringMatch(ElixirScript.Core.BitString.integer(104), ElixirScript.Core.BitString.binary({
                'value': ElixirScript.Core.Patterns.variable()
            })), ElixirScript.Core.Patterns.variable('counter')], __function_args__, (rest0, counter0) => {
                return true;
            })) !== null) {
                let [rest0, counter0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, rest0, decrement(counter0)));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.bitStringMatch(ElixirScript.Core.BitString.integer(105), ElixirScript.Core.BitString.binary({
                'value': ElixirScript.Core.Patterns.variable()
            })), ElixirScript.Core.Patterns.variable('counter')], __function_args__, (rest0, counter0) => {
                return true;
            })) !== null) {
                let [rest0, counter0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, rest0, decrement(counter0)));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.bitStringMatch(ElixirScript.Core.BitString.integer(106), ElixirScript.Core.BitString.binary({
                'value': ElixirScript.Core.Patterns.variable()
            })), ElixirScript.Core.Patterns.variable('counter')], __function_args__, (rest0, counter0) => {
                return true;
            })) !== null) {
                let [rest0, counter0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, rest0, decrement(counter0)));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.bitStringMatch(ElixirScript.Core.BitString.integer(107), ElixirScript.Core.BitString.binary({
                'value': ElixirScript.Core.Patterns.variable()
            })), ElixirScript.Core.Patterns.variable('counter')], __function_args__, (rest0, counter0) => {
                return true;
            })) !== null) {
                let [rest0, counter0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, rest0, decrement(counter0)));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.bitStringMatch(ElixirScript.Core.BitString.integer(108), ElixirScript.Core.BitString.binary({
                'value': ElixirScript.Core.Patterns.variable()
            })), ElixirScript.Core.Patterns.variable('counter')], __function_args__, (rest0, counter0) => {
                return true;
            })) !== null) {
                let [rest0, counter0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, rest0, decrement(counter0)));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.bitStringMatch(ElixirScript.Core.BitString.integer(109), ElixirScript.Core.BitString.binary({
                'value': ElixirScript.Core.Patterns.variable()
            })), ElixirScript.Core.Patterns.variable('counter')], __function_args__, (rest0, counter0) => {
                return true;
            })) !== null) {
                let [rest0, counter0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, rest0, decrement(counter0)));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.bitStringMatch(ElixirScript.Core.BitString.integer(110), ElixirScript.Core.BitString.binary({
                'value': ElixirScript.Core.Patterns.variable()
            })), ElixirScript.Core.Patterns.variable('counter')], __function_args__, (rest0, counter0) => {
                return true;
            })) !== null) {
                let [rest0, counter0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, rest0, decrement(counter0)));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.bitStringMatch(ElixirScript.Core.BitString.integer(111), ElixirScript.Core.BitString.binary({
                'value': ElixirScript.Core.Patterns.variable()
            })), ElixirScript.Core.Patterns.variable('counter')], __function_args__, (rest0, counter0) => {
                return true;
            })) !== null) {
                let [rest0, counter0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, rest0, decrement(counter0)));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.bitStringMatch(ElixirScript.Core.BitString.integer(112), ElixirScript.Core.BitString.binary({
                'value': ElixirScript.Core.Patterns.variable()
            })), ElixirScript.Core.Patterns.variable('counter')], __function_args__, (rest0, counter0) => {
                return true;
            })) !== null) {
                let [rest0, counter0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, rest0, decrement(counter0)));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.bitStringMatch(ElixirScript.Core.BitString.integer(113), ElixirScript.Core.BitString.binary({
                'value': ElixirScript.Core.Patterns.variable()
            })), ElixirScript.Core.Patterns.variable('counter')], __function_args__, (rest0, counter0) => {
                return true;
            })) !== null) {
                let [rest0, counter0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, rest0, decrement(counter0)));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.bitStringMatch(ElixirScript.Core.BitString.integer(114), ElixirScript.Core.BitString.binary({
                'value': ElixirScript.Core.Patterns.variable()
            })), ElixirScript.Core.Patterns.variable('counter')], __function_args__, (rest0, counter0) => {
                return true;
            })) !== null) {
                let [rest0, counter0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, rest0, decrement(counter0)));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.bitStringMatch(ElixirScript.Core.BitString.integer(115), ElixirScript.Core.BitString.binary({
                'value': ElixirScript.Core.Patterns.variable()
            })), ElixirScript.Core.Patterns.variable('counter')], __function_args__, (rest0, counter0) => {
                return true;
            })) !== null) {
                let [rest0, counter0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, rest0, decrement(counter0)));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.bitStringMatch(ElixirScript.Core.BitString.integer(116), ElixirScript.Core.BitString.binary({
                'value': ElixirScript.Core.Patterns.variable()
            })), ElixirScript.Core.Patterns.variable('counter')], __function_args__, (rest0, counter0) => {
                return true;
            })) !== null) {
                let [rest0, counter0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, rest0, decrement(counter0)));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.bitStringMatch(ElixirScript.Core.BitString.integer(117), ElixirScript.Core.BitString.binary({
                'value': ElixirScript.Core.Patterns.variable()
            })), ElixirScript.Core.Patterns.variable('counter')], __function_args__, (rest0, counter0) => {
                return true;
            })) !== null) {
                let [rest0, counter0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, rest0, decrement(counter0)));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.bitStringMatch(ElixirScript.Core.BitString.integer(118), ElixirScript.Core.BitString.binary({
                'value': ElixirScript.Core.Patterns.variable()
            })), ElixirScript.Core.Patterns.variable('counter')], __function_args__, (rest0, counter0) => {
                return true;
            })) !== null) {
                let [rest0, counter0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, rest0, decrement(counter0)));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.bitStringMatch(ElixirScript.Core.BitString.integer(119), ElixirScript.Core.BitString.binary({
                'value': ElixirScript.Core.Patterns.variable()
            })), ElixirScript.Core.Patterns.variable('counter')], __function_args__, (rest0, counter0) => {
                return true;
            })) !== null) {
                let [rest0, counter0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, rest0, decrement(counter0)));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.bitStringMatch(ElixirScript.Core.BitString.integer(120), ElixirScript.Core.BitString.binary({
                'value': ElixirScript.Core.Patterns.variable()
            })), ElixirScript.Core.Patterns.variable('counter')], __function_args__, (rest0, counter0) => {
                return true;
            })) !== null) {
                let [rest0, counter0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, rest0, decrement(counter0)));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.bitStringMatch(ElixirScript.Core.BitString.integer(121), ElixirScript.Core.BitString.binary({
                'value': ElixirScript.Core.Patterns.variable()
            })), ElixirScript.Core.Patterns.variable('counter')], __function_args__, (rest0, counter0) => {
                return true;
            })) !== null) {
                let [rest0, counter0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, rest0, decrement(counter0)));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.bitStringMatch(ElixirScript.Core.BitString.integer(122), ElixirScript.Core.BitString.binary({
                'value': ElixirScript.Core.Patterns.variable()
            })), ElixirScript.Core.Patterns.variable('counter')], __function_args__, (rest0, counter0) => {
                return true;
            })) !== null) {
                let [rest0, counter0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, rest0, decrement(counter0)));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.bitStringMatch(ElixirScript.Core.BitString.integer(123), ElixirScript.Core.BitString.binary({
                'value': ElixirScript.Core.Patterns.variable()
            })), ElixirScript.Core.Patterns.variable('counter')], __function_args__, (rest0, counter0) => {
                return true;
            })) !== null) {
                let [rest0, counter0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, rest0, decrement(counter0)));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.bitStringMatch(ElixirScript.Core.BitString.integer(124), ElixirScript.Core.BitString.binary({
                'value': ElixirScript.Core.Patterns.variable()
            })), ElixirScript.Core.Patterns.variable('counter')], __function_args__, (rest0, counter0) => {
                return true;
            })) !== null) {
                let [rest0, counter0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, rest0, decrement(counter0)));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.bitStringMatch(ElixirScript.Core.BitString.integer(125), ElixirScript.Core.BitString.binary({
                'value': ElixirScript.Core.Patterns.variable()
            })), ElixirScript.Core.Patterns.variable('counter')], __function_args__, (rest0, counter0) => {
                return true;
            })) !== null) {
                let [rest0, counter0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, rest0, decrement(counter0)));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.bitStringMatch(ElixirScript.Core.BitString.integer(126), ElixirScript.Core.BitString.binary({
                'value': ElixirScript.Core.Patterns.variable()
            })), ElixirScript.Core.Patterns.variable('counter')], __function_args__, (rest0, counter0) => {
                return true;
            })) !== null) {
                let [rest0, counter0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, rest0, decrement(counter0)));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.bitStringMatch(ElixirScript.Core.BitString.integer(10), ElixirScript.Core.BitString.binary({
                'value': ElixirScript.Core.Patterns.variable()
            })), ElixirScript.Core.Patterns.variable('counter')], __function_args__, (rest0, counter0) => {
                return true;
            })) !== null) {
                let [rest0, counter0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, rest0, decrement(counter0)));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.bitStringMatch(ElixirScript.Core.BitString.integer(13), ElixirScript.Core.BitString.binary({
                'value': ElixirScript.Core.Patterns.variable()
            })), ElixirScript.Core.Patterns.variable('counter')], __function_args__, (rest0, counter0) => {
                return true;
            })) !== null) {
                let [rest0, counter0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, rest0, decrement(counter0)));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.bitStringMatch(ElixirScript.Core.BitString.integer(9), ElixirScript.Core.BitString.binary({
                'value': ElixirScript.Core.Patterns.variable()
            })), ElixirScript.Core.Patterns.variable('counter')], __function_args__, (rest0, counter0) => {
                return true;
            })) !== null) {
                let [rest0, counter0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, rest0, decrement(counter0)));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.bitStringMatch(ElixirScript.Core.BitString.integer(11), ElixirScript.Core.BitString.binary({
                'value': ElixirScript.Core.Patterns.variable()
            })), ElixirScript.Core.Patterns.variable('counter')], __function_args__, (rest0, counter0) => {
                return true;
            })) !== null) {
                let [rest0, counter0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, rest0, decrement(counter0)));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.bitStringMatch(ElixirScript.Core.BitString.integer(8), ElixirScript.Core.BitString.binary({
                'value': ElixirScript.Core.Patterns.variable()
            })), ElixirScript.Core.Patterns.variable('counter')], __function_args__, (rest0, counter0) => {
                return true;
            })) !== null) {
                let [rest0, counter0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, rest0, decrement(counter0)));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.bitStringMatch(ElixirScript.Core.BitString.integer(12), ElixirScript.Core.BitString.binary({
                'value': ElixirScript.Core.Patterns.variable()
            })), ElixirScript.Core.Patterns.variable('counter')], __function_args__, (rest0, counter0) => {
                return true;
            })) !== null) {
                let [rest0, counter0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, rest0, decrement(counter0)));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.bitStringMatch(ElixirScript.Core.BitString.integer(27), ElixirScript.Core.BitString.binary({
                'value': ElixirScript.Core.Patterns.variable()
            })), ElixirScript.Core.Patterns.variable('counter')], __function_args__, (rest0, counter0) => {
                return true;
            })) !== null) {
                let [rest0, counter0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, rest0, decrement(counter0)));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.bitStringMatch(ElixirScript.Core.BitString.integer(127), ElixirScript.Core.BitString.binary({
                'value': ElixirScript.Core.Patterns.variable()
            })), ElixirScript.Core.Patterns.variable('counter')], __function_args__, (rest0, counter0) => {
                return true;
            })) !== null) {
                let [rest0, counter0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, rest0, decrement(counter0)));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.bitStringMatch(ElixirScript.Core.BitString.integer(7), ElixirScript.Core.BitString.binary({
                'value': ElixirScript.Core.Patterns.variable()
            })), ElixirScript.Core.Patterns.variable('counter')], __function_args__, (rest0, counter0) => {
                return true;
            })) !== null) {
                let [rest0, counter0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, rest0, decrement(counter0)));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.bitStringMatch(ElixirScript.Core.BitString.utf8({
                'value': ElixirScript.Core.Patterns.variable()
            }), ElixirScript.Core.BitString.binary({
                'value': ElixirScript.Core.Patterns.variable()
            })), ElixirScript.Core.Patterns.variable('counter')], __function_args__, (char0, rest0, counter0) => {
                return ElixirScript.Core.erlang.is_integer(char0) && (char0 >= 160 && char0 <= 55295) || ElixirScript.Core.erlang.is_integer(char0) && (char0 >= 57344 && char0 <= 65533) || ElixirScript.Core.erlang.is_integer(char0) && (char0 >= 65536 && char0 <= 1114111);
            })) !== null) {
                let [char0, rest0, counter0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, rest0, decrement(counter0)));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('binary'), ElixirScript.Core.Patterns.variable('_')], __function_args__, (binary0) => {
                return ElixirScript.Core.erlang.is_binary(binary0);
            })) !== null) {
                let [binary0] = __arg_matches__;

                return false;
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function split(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('x0'), ElixirScript.Core.Patterns.variable('x1')], __function_args__, (x00, x10) => {
                return true;
            })) !== null) {
                let [x00, x10] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, x00, x10, []));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('str'), ElixirScript.Core.Patterns.variable('replace'), ElixirScript.Core.Patterns.variable('options')], __function_args__, (str0, replace0, options0) => {
                return true;
            })) !== null) {
                let [str0, replace0, options0] = __arg_matches__;

                const [limit0] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.variable('limit'), Elixir.Keyword.__load(Elixir).get(options0, Symbol.for('parts'), -1));

                const [trim0] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.variable('trim'), Elixir.Keyword.__load(Elixir).get(options0, Symbol.for('trim'), false));

                const [split0] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.variable('split'), str0.split(replace0, limit0));

                return Elixir.Enum.__load(Elixir).map(split0, (...__function_args__) => {
                    function recur(...__function_args__) {
                        let __arg_matches__ = null;

                        if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('x')], __function_args__, (x0) => {
                            return true;
                        })) !== null) {
                            let [x0] = __arg_matches__;

                            return ElixirScript.Core.Patterns.defmatch(ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.variable('x576460752303411519')], (x5764607523034115190) => {
                                return x0;
                            }, (x5764607523034115190) => {
                                return x5764607523034115190 === null || x5764607523034115190 === false;
                            }), ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.variable('_')], () => {
                                return ElixirScript.Core.Functions.call_property(x0, 'trim');
                            }, () => {
                                return true;
                            })).call(this, trim0);
                        }

                        throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
                    }

                    return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
                });
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function to_charlist(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('string')], __function_args__, (string0) => {
                return ElixirScript.Core.erlang.is_binary(string0);
            })) !== null) {
                let [string0] = __arg_matches__;

                return ElixirScript.Core.Patterns.defmatch(ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.variable('result')], (result0) => {
                    return result0;
                }, (result0) => {
                    return ElixirScript.Core.erlang.is_list(result0);
                }), ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                    values: [Symbol.for('error'), ElixirScript.Core.Patterns.variable('encoded'), ElixirScript.Core.Patterns.variable('rest')]
                })], (encoded0, rest0) => {
                    return ElixirScript.Core.erlang.error(Elixir.UnicodeConversionError.__load(Elixir).exception([new ElixirScript.Core.Tuple(Symbol.for('encoded'), encoded0), new ElixirScript.Core.Tuple(Symbol.for('rest'), rest0), new ElixirScript.Core.Tuple(Symbol.for('kind'), Symbol.for('invalid'))]));
                }, (encoded0, rest0) => {
                    return true;
                }), ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                    values: [Symbol.for('incomplete'), ElixirScript.Core.Patterns.variable('encoded'), ElixirScript.Core.Patterns.variable('rest')]
                })], (encoded0, rest0) => {
                    return ElixirScript.Core.erlang.error(Elixir.UnicodeConversionError.__load(Elixir).exception([new ElixirScript.Core.Tuple(Symbol.for('encoded'), encoded0), new ElixirScript.Core.Tuple(Symbol.for('rest'), rest0), new ElixirScript.Core.Tuple(Symbol.for('kind'), Symbol.for('incomplete'))]));
                }, (encoded0, rest0) => {
                    return true;
                })).call(this, ElixirScript.Core.unicode.characters_to_list(string0));
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    const __exports = {
        contains__qmark__,
        printable__qmark__,
        split,
        to_charlist,
        __MODULE__: Symbol.for('Elixir.String'),
        __info__
    };

    Elixir.String.__exports = __exports

    return __exports;
}
ElixirScript.Core.Functions.build_namespace(Elixir, 'Elixir.Inspect.BitString').__load = function(Elixir) {
    if (Elixir.Inspect.BitString.__exports)
        return Elixir.Inspect.BitString.__exports;

    function __info__(kind) {
        const __info__map__ = new Map([[Symbol.for('functions'), [new ElixirScript.Core.Tuple(Symbol.for('__impl__'), 1), new ElixirScript.Core.Tuple(Symbol.for('escape'), 2), new ElixirScript.Core.Tuple(Symbol.for('escape'), 3), new ElixirScript.Core.Tuple(Symbol.for('escape_char'), 1), new ElixirScript.Core.Tuple(Symbol.for('inspect'), 2)]], [Symbol.for('macros'), []], [Symbol.for('attributes'), [new ElixirScript.Core.Tuple(Symbol.for('vsn'), [14493128194182354405208084995037434915]), new ElixirScript.Core.Tuple(Symbol.for('behaviour'), [Elixir.Inspect.__load(Elixir)]), new ElixirScript.Core.Tuple(Symbol.for('protocol_impl'), [new ElixirScript.Core.Tuple(Symbol.for('protocol'), Elixir.Inspect.__load(Elixir)), new ElixirScript.Core.Tuple(Symbol.for('for'), Elixir.BitString.__load(Elixir))])]], [Symbol.for('compile'), [new ElixirScript.Core.Tuple(Symbol.for('options'), []), new ElixirScript.Core.Tuple(Symbol.for('version'), [55, 46, 49, 46, 50]), new ElixirScript.Core.Tuple(Symbol.for('source'), '/private/tmp/elixir-20170929-51947-wgj4qu/elixir-1.5.2/lib/elixir/lib/inspect.ex')]], [Symbol.for('md5'), new ElixirScript.Core.BitString(ElixirScript.Core.BitString.integer(10), ElixirScript.Core.BitString.integer(231), ElixirScript.Core.BitString.integer(70), ElixirScript.Core.BitString.integer(99), ElixirScript.Core.BitString.integer(160), ElixirScript.Core.BitString.integer(193), ElixirScript.Core.BitString.integer(80), ElixirScript.Core.BitString.integer(212), ElixirScript.Core.BitString.integer(142), ElixirScript.Core.BitString.integer(67), ElixirScript.Core.BitString.integer(115), ElixirScript.Core.BitString.integer(99), ElixirScript.Core.BitString.integer(68), ElixirScript.Core.BitString.integer(191), ElixirScript.Core.BitString.integer(148), ElixirScript.Core.BitString.integer(35))], [Symbol.for('module'), Symbol.for('Elixir.Inspect.BitString')]]);

        const value = __info__map__.get(kind);

        if (value !== null) {
            return value;
        }

        throw new ElixirScript.Core.Patterns.MatchError(kind);
    }

    function __impl__(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('for')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.BitString.__load(Elixir);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('target')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.Inspect.BitString.__load(Elixir);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('protocol')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.Inspect.__load(Elixir);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function decrement(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('infinity')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Symbol.for('infinity');
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('counter')], __function_args__, (counter0) => {
                return true;
            })) !== null) {
                let [counter0] = __arg_matches__;

                return counter0 - 1;
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function each_bit(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('_'), 0, ElixirScript.Core.Patterns.variable('_')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return '...';
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.bitStringMatch(), ElixirScript.Core.Patterns.variable('_counter'), ElixirScript.Core.Patterns.variable('_opts')], __function_args__, (_counter0, _opts0) => {
                return true;
            })) !== null) {
                let [_counter0, _opts0] = __arg_matches__;

                return Symbol.for('doc_nil');
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.bitStringMatch(ElixirScript.Core.BitString.size(ElixirScript.Core.BitString.integer({
                'value': ElixirScript.Core.Patterns.variable()
            }), 8)), ElixirScript.Core.Patterns.variable('_counter'), ElixirScript.Core.Patterns.variable('opts')], __function_args__, (h0, _counter0, opts0) => {
                return true;
            })) !== null) {
                let [h0, _counter0, opts0] = __arg_matches__;

                return Elixir.Inspect.Integer.__load(Elixir).inspect(h0, opts0);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.bitStringMatch(ElixirScript.Core.BitString.integer({
                'value': ElixirScript.Core.Patterns.variable()
            }), ElixirScript.Core.BitString.bitstring({
                'value': ElixirScript.Core.Patterns.variable()
            })), ElixirScript.Core.Patterns.variable('counter'), ElixirScript.Core.Patterns.variable('opts')], __function_args__, (h0, t0, counter0, opts0) => {
                return true;
            })) !== null) {
                let [h0, t0, counter0, opts0] = __arg_matches__;

                return Elixir.Inspect.Algebra.__load(Elixir).glue(Elixir.Inspect.Algebra.__load(Elixir).concat(Elixir.Inspect.Integer.__load(Elixir).inspect(h0, opts0), ','), each_bit(t0, decrement(counter0), opts0));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('bitstring'), ElixirScript.Core.Patterns.variable('_counter'), ElixirScript.Core.Patterns.variable('opts')], __function_args__, (bitstring0, _counter0, opts0) => {
                return true;
            })) !== null) {
                let [bitstring0, _counter0, opts0] = __arg_matches__;

                const [size0] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.variable('size'), ElixirScript.Core.erlang.bit_size(bitstring0));

                const [h0] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.bitStringMatch(ElixirScript.Core.BitString.size(ElixirScript.Core.BitString.integer({
                    'value': ElixirScript.Core.Patterns.variable()
                }), size0)), bitstring0);

                return Elixir.Inspect.Integer.__load(Elixir).inspect(h0, opts0) + ('::size(' + (ElixirScript.Core.erlang.integer_to_binary(size0) + ')'));
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function escape(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('other'), ElixirScript.Core.Patterns.variable('char')], __function_args__, (other0, char0) => {
                return true;
            })) !== null) {
                let [other0, char0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, other0, char0, Symbol.for('infinity'), []));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('other'), ElixirScript.Core.Patterns.variable('char'), ElixirScript.Core.Patterns.variable('count')], __function_args__, (other0, char0, count0) => {
                return true;
            })) !== null) {
                let [other0, char0, count0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, other0, char0, count0, []));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.capture(ElixirScript.Core.Patterns.bitStringMatch(ElixirScript.Core.BitString.integer({
                'value': ElixirScript.Core.Patterns.variable()
            }), ElixirScript.Core.BitString.binary({
                'value': ElixirScript.Core.Patterns.variable()
            }))), ElixirScript.Core.Patterns.variable('_char'), 0, ElixirScript.Core.Patterns.variable('acc')], __function_args__, (_0, _1, binary0, _char0, acc0) => {
                return true;
            })) !== null) {
                let [_0, _1, binary0, _char0, acc0] = __arg_matches__;

                return new ElixirScript.Core.Tuple(acc0, binary0);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.bitStringMatch(ElixirScript.Core.BitString.integer({
                'value': ElixirScript.Core.Patterns.variable()
            }), ElixirScript.Core.BitString.binary({
                'value': ElixirScript.Core.Patterns.variable()
            })), ElixirScript.Core.Patterns.variable('char'), ElixirScript.Core.Patterns.variable('count'), ElixirScript.Core.Patterns.variable('acc')], __function_args__, (char0, t0, char1, count0, acc0) => {
                return true;
            })) !== null) {
                let [char0, t0, char1, count0, acc0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, t0, char1, decrement(count0), ElixirScript.Core.Functions.concat(acc0, [92, char1])));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.bitStringMatch(ElixirScript.Core.BitString.integer(35), ElixirScript.Core.BitString.integer(123), ElixirScript.Core.BitString.binary({
                'value': ElixirScript.Core.Patterns.variable()
            })), ElixirScript.Core.Patterns.variable('char'), ElixirScript.Core.Patterns.variable('count'), ElixirScript.Core.Patterns.variable('acc')], __function_args__, (t0, char0, count0, acc0) => {
                return true;
            })) !== null) {
                let [t0, char0, count0, acc0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, t0, char0, decrement(count0), ElixirScript.Core.Functions.concat(acc0, [92, 35, 123])));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.bitStringMatch(ElixirScript.Core.BitString.integer(7), ElixirScript.Core.BitString.binary({
                'value': ElixirScript.Core.Patterns.variable()
            })), ElixirScript.Core.Patterns.variable('char'), ElixirScript.Core.Patterns.variable('count'), ElixirScript.Core.Patterns.variable('acc')], __function_args__, (t0, char0, count0, acc0) => {
                return true;
            })) !== null) {
                let [t0, char0, count0, acc0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, t0, char0, decrement(count0), ElixirScript.Core.Functions.concat(acc0, [92, 97])));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.bitStringMatch(ElixirScript.Core.BitString.integer(8), ElixirScript.Core.BitString.binary({
                'value': ElixirScript.Core.Patterns.variable()
            })), ElixirScript.Core.Patterns.variable('char'), ElixirScript.Core.Patterns.variable('count'), ElixirScript.Core.Patterns.variable('acc')], __function_args__, (t0, char0, count0, acc0) => {
                return true;
            })) !== null) {
                let [t0, char0, count0, acc0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, t0, char0, decrement(count0), ElixirScript.Core.Functions.concat(acc0, [92, 98])));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.bitStringMatch(ElixirScript.Core.BitString.integer(127), ElixirScript.Core.BitString.binary({
                'value': ElixirScript.Core.Patterns.variable()
            })), ElixirScript.Core.Patterns.variable('char'), ElixirScript.Core.Patterns.variable('count'), ElixirScript.Core.Patterns.variable('acc')], __function_args__, (t0, char0, count0, acc0) => {
                return true;
            })) !== null) {
                let [t0, char0, count0, acc0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, t0, char0, decrement(count0), ElixirScript.Core.Functions.concat(acc0, [92, 100])));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.bitStringMatch(ElixirScript.Core.BitString.integer(27), ElixirScript.Core.BitString.binary({
                'value': ElixirScript.Core.Patterns.variable()
            })), ElixirScript.Core.Patterns.variable('char'), ElixirScript.Core.Patterns.variable('count'), ElixirScript.Core.Patterns.variable('acc')], __function_args__, (t0, char0, count0, acc0) => {
                return true;
            })) !== null) {
                let [t0, char0, count0, acc0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, t0, char0, decrement(count0), ElixirScript.Core.Functions.concat(acc0, [92, 101])));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.bitStringMatch(ElixirScript.Core.BitString.integer(12), ElixirScript.Core.BitString.binary({
                'value': ElixirScript.Core.Patterns.variable()
            })), ElixirScript.Core.Patterns.variable('char'), ElixirScript.Core.Patterns.variable('count'), ElixirScript.Core.Patterns.variable('acc')], __function_args__, (t0, char0, count0, acc0) => {
                return true;
            })) !== null) {
                let [t0, char0, count0, acc0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, t0, char0, decrement(count0), ElixirScript.Core.Functions.concat(acc0, [92, 102])));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.bitStringMatch(ElixirScript.Core.BitString.integer(10), ElixirScript.Core.BitString.binary({
                'value': ElixirScript.Core.Patterns.variable()
            })), ElixirScript.Core.Patterns.variable('char'), ElixirScript.Core.Patterns.variable('count'), ElixirScript.Core.Patterns.variable('acc')], __function_args__, (t0, char0, count0, acc0) => {
                return true;
            })) !== null) {
                let [t0, char0, count0, acc0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, t0, char0, decrement(count0), ElixirScript.Core.Functions.concat(acc0, [92, 110])));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.bitStringMatch(ElixirScript.Core.BitString.integer(13), ElixirScript.Core.BitString.binary({
                'value': ElixirScript.Core.Patterns.variable()
            })), ElixirScript.Core.Patterns.variable('char'), ElixirScript.Core.Patterns.variable('count'), ElixirScript.Core.Patterns.variable('acc')], __function_args__, (t0, char0, count0, acc0) => {
                return true;
            })) !== null) {
                let [t0, char0, count0, acc0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, t0, char0, decrement(count0), ElixirScript.Core.Functions.concat(acc0, [92, 114])));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.bitStringMatch(ElixirScript.Core.BitString.integer(92), ElixirScript.Core.BitString.binary({
                'value': ElixirScript.Core.Patterns.variable()
            })), ElixirScript.Core.Patterns.variable('char'), ElixirScript.Core.Patterns.variable('count'), ElixirScript.Core.Patterns.variable('acc')], __function_args__, (t0, char0, count0, acc0) => {
                return true;
            })) !== null) {
                let [t0, char0, count0, acc0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, t0, char0, decrement(count0), ElixirScript.Core.Functions.concat(acc0, [92, 92])));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.bitStringMatch(ElixirScript.Core.BitString.integer(9), ElixirScript.Core.BitString.binary({
                'value': ElixirScript.Core.Patterns.variable()
            })), ElixirScript.Core.Patterns.variable('char'), ElixirScript.Core.Patterns.variable('count'), ElixirScript.Core.Patterns.variable('acc')], __function_args__, (t0, char0, count0, acc0) => {
                return true;
            })) !== null) {
                let [t0, char0, count0, acc0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, t0, char0, decrement(count0), ElixirScript.Core.Functions.concat(acc0, [92, 116])));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.bitStringMatch(ElixirScript.Core.BitString.integer(11), ElixirScript.Core.BitString.binary({
                'value': ElixirScript.Core.Patterns.variable()
            })), ElixirScript.Core.Patterns.variable('char'), ElixirScript.Core.Patterns.variable('count'), ElixirScript.Core.Patterns.variable('acc')], __function_args__, (t0, char0, count0, acc0) => {
                return true;
            })) !== null) {
                let [t0, char0, count0, acc0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, t0, char0, decrement(count0), ElixirScript.Core.Functions.concat(acc0, [92, 118])));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.bitStringMatch(ElixirScript.Core.BitString.utf8({
                'value': ElixirScript.Core.Patterns.variable()
            }), ElixirScript.Core.BitString.binary({
                'value': ElixirScript.Core.Patterns.variable()
            })), ElixirScript.Core.Patterns.variable('char'), ElixirScript.Core.Patterns.variable('count'), ElixirScript.Core.Patterns.variable('acc')], __function_args__, (h0, t0, char0, count0, acc0) => {
                return ElixirScript.Core.erlang.is_integer(h0) && (h0 >= 32 && h0 <= 126) || ElixirScript.Core.erlang.is_integer(h0) && (h0 >= 160 && h0 <= 55295) || ElixirScript.Core.erlang.is_integer(h0) && (h0 >= 57344 && h0 <= 65533) || ElixirScript.Core.erlang.is_integer(h0) && (h0 >= 65536 && h0 <= 1114111);
            })) !== null) {
                let [h0, t0, char0, count0, acc0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, t0, char0, decrement(count0), ElixirScript.Core.Functions.concat(acc0, new ElixirScript.Core.BitString(ElixirScript.Core.BitString.utf8(h0)))));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.bitStringMatch(ElixirScript.Core.BitString.integer({
                'value': ElixirScript.Core.Patterns.variable()
            }), ElixirScript.Core.BitString.binary({
                'value': ElixirScript.Core.Patterns.variable()
            })), ElixirScript.Core.Patterns.variable('char'), ElixirScript.Core.Patterns.variable('count'), ElixirScript.Core.Patterns.variable('acc')], __function_args__, (h0, t0, char0, count0, acc0) => {
                return true;
            })) !== null) {
                let [h0, t0, char0, count0, acc0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, t0, char0, decrement(count0), ElixirScript.Core.Functions.concat(acc0, escape_char(h0))));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.bitStringMatch(), ElixirScript.Core.Patterns.variable('_char'), ElixirScript.Core.Patterns.variable('_count'), ElixirScript.Core.Patterns.variable('acc')], __function_args__, (_char0, _count0, acc0) => {
                return true;
            })) !== null) {
                let [_char0, _count0, acc0] = __arg_matches__;

                return new ElixirScript.Core.Tuple(acc0, new ElixirScript.Core.BitString());
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function escape_char(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([0], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return [92, 48];
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('char')], __function_args__, (char0) => {
                return char0 < 256;
            })) !== null) {
                let [char0] = __arg_matches__;

                const [a0, b0] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.bitStringMatch(ElixirScript.Core.BitString.size(ElixirScript.Core.BitString.integer({
                    'value': ElixirScript.Core.Patterns.variable()
                }), 4), ElixirScript.Core.BitString.size(ElixirScript.Core.BitString.integer({
                    'value': ElixirScript.Core.Patterns.variable()
                }), 4)), new ElixirScript.Core.BitString(ElixirScript.Core.BitString.size(ElixirScript.Core.BitString.integer(char0), 8)));

                return [[92, 120], to_hex(a0), to_hex(b0)];
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('char')], __function_args__, (char0) => {
                return char0 < 65536;
            })) !== null) {
                let [char0] = __arg_matches__;

                const [a0, b0, c0, d0] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.bitStringMatch(ElixirScript.Core.BitString.size(ElixirScript.Core.BitString.integer({
                    'value': ElixirScript.Core.Patterns.variable()
                }), 4), ElixirScript.Core.BitString.size(ElixirScript.Core.BitString.integer({
                    'value': ElixirScript.Core.Patterns.variable()
                }), 4), ElixirScript.Core.BitString.size(ElixirScript.Core.BitString.integer({
                    'value': ElixirScript.Core.Patterns.variable()
                }), 4), ElixirScript.Core.BitString.size(ElixirScript.Core.BitString.integer({
                    'value': ElixirScript.Core.Patterns.variable()
                }), 4)), new ElixirScript.Core.BitString(ElixirScript.Core.BitString.size(ElixirScript.Core.BitString.integer(char0), 16)));

                return [[92, 120, 123], to_hex(a0), to_hex(b0), to_hex(c0), to_hex(d0), 125];
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('char')], __function_args__, (char0) => {
                return char0 < 16777216;
            })) !== null) {
                let [char0] = __arg_matches__;

                const [a0, b0, c0, d0, e0, f0] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.bitStringMatch(ElixirScript.Core.BitString.size(ElixirScript.Core.BitString.integer({
                    'value': ElixirScript.Core.Patterns.variable()
                }), 4), ElixirScript.Core.BitString.size(ElixirScript.Core.BitString.integer({
                    'value': ElixirScript.Core.Patterns.variable()
                }), 4), ElixirScript.Core.BitString.size(ElixirScript.Core.BitString.integer({
                    'value': ElixirScript.Core.Patterns.variable()
                }), 4), ElixirScript.Core.BitString.size(ElixirScript.Core.BitString.integer({
                    'value': ElixirScript.Core.Patterns.variable()
                }), 4), ElixirScript.Core.BitString.size(ElixirScript.Core.BitString.integer({
                    'value': ElixirScript.Core.Patterns.variable()
                }), 4), ElixirScript.Core.BitString.size(ElixirScript.Core.BitString.integer({
                    'value': ElixirScript.Core.Patterns.variable()
                }), 4)), new ElixirScript.Core.BitString(ElixirScript.Core.BitString.size(ElixirScript.Core.BitString.integer(char0), 24)));

                return [[92, 120, 123], to_hex(a0), to_hex(b0), to_hex(c0), to_hex(d0), to_hex(e0), to_hex(f0), 125];
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function inspect(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('term'), ElixirScript.Core.Patterns.variable('opts')], __function_args__, (term0, opts0) => {
                return ElixirScript.Core.erlang.is_binary(term0);
            })) !== null) {
                let [term0, opts0] = __arg_matches__;

                const [bins0, base0, printable_limit0] = ElixirScript.Core.Patterns.match(new Map([[Symbol.for('__struct__'), {
                    __MODULE__: Symbol.for('Elixir.Inspect.Opts')
                }], [Symbol.for('binaries'), ElixirScript.Core.Patterns.variable('bins')], [Symbol.for('base'), ElixirScript.Core.Patterns.variable('base')], [Symbol.for('printable_limit'), ElixirScript.Core.Patterns.variable('printable_limit')]]), opts0);

                return ElixirScript.Core.Patterns.defmatch(ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.variable('x576460752303368319')], (x5764607523033683190) => {
                    return inspect_bitstring(term0, opts0);
                }, (x5764607523033683190) => {
                    return x5764607523033683190 === null || x5764607523033683190 === false;
                }), ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.variable('_')], () => {
                    const [inspected0] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.variable('inspected'), ElixirScript.Core.Patterns.defmatch(ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                        values: [ElixirScript.Core.Patterns.variable('escaped'), '']
                    })], (escaped0) => {
                        return [34, escaped0, 34];
                    }, (escaped0) => {
                        return true;
                    }), ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                        values: [ElixirScript.Core.Patterns.variable('escaped'), ElixirScript.Core.Patterns.variable('_')]
                    })], (escaped0) => {
                        return [34, escaped0, 34, ' <> ...'];
                    }, (escaped0) => {
                        return true;
                    })).call(this, escape(term0, 34, printable_limit0)));

                    return Elixir.Inspect.Algebra.__load(Elixir).color(ElixirScript.Core.erlang.iolist_to_binary(inspected0), Symbol.for('string'), opts0);
                }, () => {
                    return true;
                })).call(this, ElixirScript.Core.Patterns.defmatch(ElixirScript.Core.Patterns.clause([true], () => {
                    return ElixirScript.Core.Patterns.defmatch(ElixirScript.Core.Patterns.clause([true], () => {
                        return true;
                    }, () => {
                        return true;
                    }), ElixirScript.Core.Patterns.clause([false], () => {
                        return ElixirScript.Core.Patterns.defmatch(ElixirScript.Core.Patterns.clause([true], () => {
                            return Elixir.String.__load(Elixir).printable__qmark__(term0, printable_limit0);
                        }, () => {
                            return true;
                        }), ElixirScript.Core.Patterns.clause([false], () => {
                            return false;
                        }, () => {
                            return true;
                        })).call(this, ElixirScript.Core.erlang.equals(bins0, Symbol.for('infer')));
                    }, () => {
                        return true;
                    })).call(this, ElixirScript.Core.erlang.equals(bins0, Symbol.for('as_strings')));
                }, () => {
                    return true;
                }), ElixirScript.Core.Patterns.clause([false], () => {
                    return false;
                }, () => {
                    return true;
                })).call(this, ElixirScript.Core.erlang.equals(base0, Symbol.for('decimal'))));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('term'), ElixirScript.Core.Patterns.variable('opts')], __function_args__, (term0, opts0) => {
                return true;
            })) !== null) {
                let [term0, opts0] = __arg_matches__;

                return inspect_bitstring(term0, opts0);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function inspect_bitstring(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default(['', ElixirScript.Core.Patterns.variable('opts')], __function_args__, (opts0) => {
                return true;
            })) !== null) {
                let [opts0] = __arg_matches__;

                return Elixir.Inspect.Algebra.__load(Elixir).color('<<>>', Symbol.for('binary'), opts0);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('bitstring'), ElixirScript.Core.Patterns.variable('opts')], __function_args__, (bitstring0, opts0) => {
                return true;
            })) !== null) {
                let [bitstring0, opts0] = __arg_matches__;

                const [left0] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.variable('left'), Elixir.Inspect.Algebra.__load(Elixir).color('<<', Symbol.for('binary'), opts0));

                const [right0] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.variable('right'), Elixir.Inspect.Algebra.__load(Elixir).color('>>', Symbol.for('binary'), opts0));

                return Elixir.Inspect.Algebra.__load(Elixir).nest(Elixir.Inspect.Algebra.__load(Elixir).surround(left0, each_bit(bitstring0, ElixirScript.Core.Functions.call_property(opts0, 'limit'), opts0), right0), 1);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function to_hex(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('c')], __function_args__, (c0) => {
                return ElixirScript.Core.erlang.is_integer(c0) && (c0 >= 0 && c0 <= 9);
            })) !== null) {
                let [c0] = __arg_matches__;

                return 48 + c0;
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('c')], __function_args__, (c0) => {
                return ElixirScript.Core.erlang.is_integer(c0) && (c0 >= 10 && c0 <= 15);
            })) !== null) {
                let [c0] = __arg_matches__;

                return 65 + c0 - 10;
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    const __exports = {
        __impl__,
        escape,
        escape_char,
        inspect,
        __MODULE__: Symbol.for('Elixir.Inspect.BitString'),
        __info__
    };

    Elixir.Inspect.BitString.__exports = __exports

    return __exports;
}
ElixirScript.Core.Functions.build_namespace(Elixir, 'Elixir.URI').__load = function(Elixir) {
    if (Elixir.URI.__exports)
        return Elixir.URI.__exports;

    function __info__(kind) {
        const __info__map__ = new Map([[Symbol.for('functions'), [new ElixirScript.Core.Tuple(Symbol.for('__struct__'), 0), new ElixirScript.Core.Tuple(Symbol.for('__struct__'), 1), new ElixirScript.Core.Tuple(Symbol.for('char_reserved?'), 1), new ElixirScript.Core.Tuple(Symbol.for('char_unescaped?'), 1), new ElixirScript.Core.Tuple(Symbol.for('char_unreserved?'), 1), new ElixirScript.Core.Tuple(Symbol.for('decode'), 1), new ElixirScript.Core.Tuple(Symbol.for('decode_query'), 1), new ElixirScript.Core.Tuple(Symbol.for('decode_query'), 2), new ElixirScript.Core.Tuple(Symbol.for('decode_www_form'), 1), new ElixirScript.Core.Tuple(Symbol.for('default_port'), 1), new ElixirScript.Core.Tuple(Symbol.for('default_port'), 2), new ElixirScript.Core.Tuple(Symbol.for('encode'), 1), new ElixirScript.Core.Tuple(Symbol.for('encode'), 2), new ElixirScript.Core.Tuple(Symbol.for('encode_query'), 1), new ElixirScript.Core.Tuple(Symbol.for('encode_www_form'), 1), new ElixirScript.Core.Tuple(Symbol.for('merge'), 2), new ElixirScript.Core.Tuple(Symbol.for('parse'), 1), new ElixirScript.Core.Tuple(Symbol.for('query_decoder'), 1), new ElixirScript.Core.Tuple(Symbol.for('to_string'), 1)]], [Symbol.for('macros'), []], [Symbol.for('attributes'), [new ElixirScript.Core.Tuple(Symbol.for('vsn'), [256566421649016364164109694179214404719])]], [Symbol.for('compile'), [new ElixirScript.Core.Tuple(Symbol.for('options'), []), new ElixirScript.Core.Tuple(Symbol.for('version'), [55, 46, 49, 46, 50]), new ElixirScript.Core.Tuple(Symbol.for('source'), '/private/tmp/elixir-20170929-51947-wgj4qu/elixir-1.5.2/lib/elixir/lib/uri.ex')]], [Symbol.for('md5'), new ElixirScript.Core.BitString(ElixirScript.Core.BitString.integer(193), ElixirScript.Core.BitString.integer(4), ElixirScript.Core.BitString.integer(229), ElixirScript.Core.BitString.integer(58), ElixirScript.Core.BitString.integer(26), ElixirScript.Core.BitString.integer(11), ElixirScript.Core.BitString.integer(188), ElixirScript.Core.BitString.integer(166), ElixirScript.Core.BitString.integer(234), ElixirScript.Core.BitString.integer(41), ElixirScript.Core.BitString.integer(90), ElixirScript.Core.BitString.integer(79), ElixirScript.Core.BitString.integer(153), ElixirScript.Core.BitString.integer(144), ElixirScript.Core.BitString.integer(172), ElixirScript.Core.BitString.integer(111))], [Symbol.for('module'), Symbol.for('Elixir.URI')]]);

        const value = __info__map__.get(kind);

        if (value !== null) {
            return value;
        }

        throw new ElixirScript.Core.Patterns.MatchError(kind);
    }

    function __struct__(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return new Map([[Symbol.for('__struct__'), Elixir.URI.__load(Elixir)], [Symbol.for('authority'), null], [Symbol.for('fragment'), null], [Symbol.for('host'), null], [Symbol.for('path'), null], [Symbol.for('port'), null], [Symbol.for('query'), null], [Symbol.for('scheme'), null], [Symbol.for('userinfo'), null]]);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('kv576460752303260285')], __function_args__, (kv5764607523032602850) => {
                return true;
            })) !== null) {
                let [kv5764607523032602850] = __arg_matches__;

                const [map5764607523032602850, keys5764607523032602850] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                    values: [ElixirScript.Core.Patterns.variable('map576460752303260285'), ElixirScript.Core.Patterns.variable('keys576460752303260285')]
                }), Elixir.Enum.__load(Elixir).reduce(kv5764607523032602850, new ElixirScript.Core.Tuple(__struct__(), []), (...__function_args__) => {
                    function recur(...__function_args__) {
                        let __arg_matches__ = null;

                        if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                            values: [ElixirScript.Core.Patterns.variable('key576460752303260285'), ElixirScript.Core.Patterns.variable('val576460752303260285')]
                        }), ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                            values: [ElixirScript.Core.Patterns.variable('map576460752303260285'), ElixirScript.Core.Patterns.variable('keys576460752303260285')]
                        })], __function_args__, (key5764607523032602850, val5764607523032602850, map5764607523032602850, keys5764607523032602850) => {
                            return true;
                        })) !== null) {
                            let [key5764607523032602850, val5764607523032602850, map5764607523032602850, keys5764607523032602850] = __arg_matches__;

                            return new ElixirScript.Core.Tuple(ElixirScript.Core.maps.update(key5764607523032602850, val5764607523032602850, map5764607523032602850), Elixir.List.__load(Elixir).__delete__(keys5764607523032602850, key5764607523032602850));
                        }

                        throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
                    }

                    return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
                }));

                const _ref7022761 = new ElixirScript.Core.Tuple(map5764607523032602850, keys5764607523032602850);

                return ElixirScript.Core.Patterns.defmatch(ElixirScript.Core.Patterns.clause([[]], () => {
                    return map5764607523032602850;
                }, () => {
                    return true;
                }), ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.variable('_')], () => {
                    return ElixirScript.Core.erlang.error(Elixir.ArgumentError.__load(Elixir).exception('the following keys must also be given when building ' + ('struct ' + (Elixir.String.Chars.__load(Elixir).to_string(Elixir.Kernel.__load(Elixir).inspect(Elixir.URI.__load(Elixir))) + (': ' + Elixir.String.Chars.__load(Elixir).to_string(Elixir.Kernel.__load(Elixir).inspect(keys5764607523032602850)))))));
                }, () => {
                    return true;
                })).call(this, keys5764607523032602850);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function default_port(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('scheme')], __function_args__, (scheme0) => {
                return ElixirScript.Core.erlang.is_binary(scheme0);
            })) !== null) {
                let [scheme0] = __arg_matches__;

                return ElixirScript.Core.elixir_config.safe_get(new ElixirScript.Core.Tuple(Symbol.for('uri'), scheme0), null);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    const __exports = {
        __struct__,
        default_port,
        __MODULE__: Symbol.for('Elixir.URI'),
        __info__
    };

    Elixir.URI.__exports = __exports

    return __exports;
}
ElixirScript.Core.Functions.build_namespace(Elixir, 'Elixir.String.Chars.Version.Requirement').__load = function(Elixir) {
    if (Elixir.String.Chars.Version.Requirement.__exports)
        return Elixir.String.Chars.Version.Requirement.__exports;

    function __info__(kind) {
        const __info__map__ = new Map([[Symbol.for('functions'), [new ElixirScript.Core.Tuple(Symbol.for('__impl__'), 1), new ElixirScript.Core.Tuple(Symbol.for('to_string'), 1)]], [Symbol.for('macros'), []], [Symbol.for('attributes'), [new ElixirScript.Core.Tuple(Symbol.for('vsn'), [74048157840532399580014422776857311885]), new ElixirScript.Core.Tuple(Symbol.for('behaviour'), [Elixir.String.Chars.__load(Elixir)]), new ElixirScript.Core.Tuple(Symbol.for('protocol_impl'), [new ElixirScript.Core.Tuple(Symbol.for('protocol'), Elixir.String.Chars.__load(Elixir)), new ElixirScript.Core.Tuple(Symbol.for('for'), Elixir.Version.Requirement.__load(Elixir))])]], [Symbol.for('compile'), [new ElixirScript.Core.Tuple(Symbol.for('options'), []), new ElixirScript.Core.Tuple(Symbol.for('version'), [55, 46, 49, 46, 50]), new ElixirScript.Core.Tuple(Symbol.for('source'), '/private/tmp/elixir-20170929-51947-wgj4qu/elixir-1.5.2/lib/elixir/lib/version.ex')]], [Symbol.for('md5'), new ElixirScript.Core.BitString(ElixirScript.Core.BitString.integer(55), ElixirScript.Core.BitString.integer(181), ElixirScript.Core.BitString.integer(40), ElixirScript.Core.BitString.integer(13), ElixirScript.Core.BitString.integer(47), ElixirScript.Core.BitString.integer(58), ElixirScript.Core.BitString.integer(222), ElixirScript.Core.BitString.integer(135), ElixirScript.Core.BitString.integer(34), ElixirScript.Core.BitString.integer(96), ElixirScript.Core.BitString.integer(158), ElixirScript.Core.BitString.integer(178), ElixirScript.Core.BitString.integer(185), ElixirScript.Core.BitString.integer(49), ElixirScript.Core.BitString.integer(58), ElixirScript.Core.BitString.integer(141))], [Symbol.for('module'), Symbol.for('Elixir.String.Chars.Version.Requirement')]]);

        const value = __info__map__.get(kind);

        if (value !== null) {
            return value;
        }

        throw new ElixirScript.Core.Patterns.MatchError(kind);
    }

    function __impl__(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('for')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.Version.Requirement.__load(Elixir);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('target')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.String.Chars.Version.Requirement.__load(Elixir);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('protocol')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.String.Chars.__load(Elixir);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function to_string(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([new Map([[Symbol.for('__struct__'), {
                __MODULE__: Symbol.for('Elixir.Version.Requirement')
            }], [Symbol.for('source'), ElixirScript.Core.Patterns.variable('source')]])], __function_args__, (source0) => {
                return true;
            })) !== null) {
                let [source0] = __arg_matches__;

                return source0;
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    const __exports = {
        __impl__,
        to_string,
        __MODULE__: Symbol.for('Elixir.String.Chars.Version.Requirement'),
        __info__
    };

    Elixir.String.Chars.Version.Requirement.__exports = __exports

    return __exports;
}
ElixirScript.Core.Functions.build_namespace(Elixir, 'Elixir.String.Chars.NaiveDateTime').__load = function(Elixir) {
    if (Elixir.String.Chars.NaiveDateTime.__exports)
        return Elixir.String.Chars.NaiveDateTime.__exports;

    function __info__(kind) {
        const __info__map__ = new Map([[Symbol.for('functions'), [new ElixirScript.Core.Tuple(Symbol.for('__impl__'), 1), new ElixirScript.Core.Tuple(Symbol.for('to_string'), 1)]], [Symbol.for('macros'), []], [Symbol.for('attributes'), [new ElixirScript.Core.Tuple(Symbol.for('vsn'), [199743051568559720476905719096963975501]), new ElixirScript.Core.Tuple(Symbol.for('behaviour'), [Elixir.String.Chars.__load(Elixir)]), new ElixirScript.Core.Tuple(Symbol.for('protocol_impl'), [new ElixirScript.Core.Tuple(Symbol.for('protocol'), Elixir.String.Chars.__load(Elixir)), new ElixirScript.Core.Tuple(Symbol.for('for'), Elixir.NaiveDateTime.__load(Elixir))])]], [Symbol.for('compile'), [new ElixirScript.Core.Tuple(Symbol.for('options'), []), new ElixirScript.Core.Tuple(Symbol.for('version'), [55, 46, 49, 46, 50]), new ElixirScript.Core.Tuple(Symbol.for('source'), '/private/tmp/elixir-20170929-51947-wgj4qu/elixir-1.5.2/lib/elixir/lib/calendar/naive_datetime.ex')]], [Symbol.for('md5'), new ElixirScript.Core.BitString(ElixirScript.Core.BitString.integer(150), ElixirScript.Core.BitString.integer(69), ElixirScript.Core.BitString.integer(28), ElixirScript.Core.BitString.integer(199), ElixirScript.Core.BitString.integer(141), ElixirScript.Core.BitString.integer(60), ElixirScript.Core.BitString.integer(57), ElixirScript.Core.BitString.integer(148), ElixirScript.Core.BitString.integer(147), ElixirScript.Core.BitString.integer(15), ElixirScript.Core.BitString.integer(124), ElixirScript.Core.BitString.integer(107), ElixirScript.Core.BitString.integer(191), ElixirScript.Core.BitString.integer(195), ElixirScript.Core.BitString.integer(73), ElixirScript.Core.BitString.integer(77))], [Symbol.for('module'), Symbol.for('Elixir.String.Chars.NaiveDateTime')]]);

        const value = __info__map__.get(kind);

        if (value !== null) {
            return value;
        }

        throw new ElixirScript.Core.Patterns.MatchError(kind);
    }

    function __impl__(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('for')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.NaiveDateTime.__load(Elixir);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('target')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.String.Chars.NaiveDateTime.__load(Elixir);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('protocol')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.String.Chars.__load(Elixir);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function to_string(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([new Map([[Symbol.for('calendar'), ElixirScript.Core.Patterns.variable('calendar')], [Symbol.for('year'), ElixirScript.Core.Patterns.variable('year')], [Symbol.for('month'), ElixirScript.Core.Patterns.variable('month')], [Symbol.for('day'), ElixirScript.Core.Patterns.variable('day')], [Symbol.for('hour'), ElixirScript.Core.Patterns.variable('hour')], [Symbol.for('minute'), ElixirScript.Core.Patterns.variable('minute')], [Symbol.for('second'), ElixirScript.Core.Patterns.variable('second')], [Symbol.for('microsecond'), ElixirScript.Core.Patterns.variable('microsecond')]])], __function_args__, (calendar0, year0, month0, day0, hour0, minute0, second0, microsecond0) => {
                return true;
            })) !== null) {
                let [calendar0, year0, month0, day0, hour0, minute0, second0, microsecond0] = __arg_matches__;

                return calendar0.naive_datetime_to_string(year0, month0, day0, hour0, minute0, second0, microsecond0);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    const __exports = {
        __impl__,
        to_string,
        __MODULE__: Symbol.for('Elixir.String.Chars.NaiveDateTime'),
        __info__
    };

    Elixir.String.Chars.NaiveDateTime.__exports = __exports

    return __exports;
}
ElixirScript.Core.Functions.build_namespace(Elixir, 'Elixir.String.Chars.Time').__load = function(Elixir) {
    if (Elixir.String.Chars.Time.__exports)
        return Elixir.String.Chars.Time.__exports;

    function __info__(kind) {
        const __info__map__ = new Map([[Symbol.for('functions'), [new ElixirScript.Core.Tuple(Symbol.for('__impl__'), 1), new ElixirScript.Core.Tuple(Symbol.for('to_string'), 1)]], [Symbol.for('macros'), []], [Symbol.for('attributes'), [new ElixirScript.Core.Tuple(Symbol.for('vsn'), [232374037214202833794471926877820596768]), new ElixirScript.Core.Tuple(Symbol.for('behaviour'), [Elixir.String.Chars.__load(Elixir)]), new ElixirScript.Core.Tuple(Symbol.for('protocol_impl'), [new ElixirScript.Core.Tuple(Symbol.for('protocol'), Elixir.String.Chars.__load(Elixir)), new ElixirScript.Core.Tuple(Symbol.for('for'), Elixir.Time.__load(Elixir))])]], [Symbol.for('compile'), [new ElixirScript.Core.Tuple(Symbol.for('options'), []), new ElixirScript.Core.Tuple(Symbol.for('version'), [55, 46, 49, 46, 50]), new ElixirScript.Core.Tuple(Symbol.for('source'), '/private/tmp/elixir-20170929-51947-wgj4qu/elixir-1.5.2/lib/elixir/lib/calendar/time.ex')]], [Symbol.for('md5'), new ElixirScript.Core.BitString(ElixirScript.Core.BitString.integer(174), ElixirScript.Core.BitString.integer(209), ElixirScript.Core.BitString.integer(156), ElixirScript.Core.BitString.integer(149), ElixirScript.Core.BitString.integer(139), ElixirScript.Core.BitString.integer(232), ElixirScript.Core.BitString.integer(89), ElixirScript.Core.BitString.integer(65), ElixirScript.Core.BitString.integer(54), ElixirScript.Core.BitString.integer(36), ElixirScript.Core.BitString.integer(41), ElixirScript.Core.BitString.integer(111), ElixirScript.Core.BitString.integer(133), ElixirScript.Core.BitString.integer(60), ElixirScript.Core.BitString.integer(178), ElixirScript.Core.BitString.integer(32))], [Symbol.for('module'), Symbol.for('Elixir.String.Chars.Time')]]);

        const value = __info__map__.get(kind);

        if (value !== null) {
            return value;
        }

        throw new ElixirScript.Core.Patterns.MatchError(kind);
    }

    function __impl__(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('for')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.Time.__load(Elixir);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('target')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.String.Chars.Time.__load(Elixir);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('protocol')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.String.Chars.__load(Elixir);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function to_string(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([new Map([[Symbol.for('hour'), ElixirScript.Core.Patterns.variable('hour')], [Symbol.for('minute'), ElixirScript.Core.Patterns.variable('minute')], [Symbol.for('second'), ElixirScript.Core.Patterns.variable('second')], [Symbol.for('microsecond'), ElixirScript.Core.Patterns.variable('microsecond')], [Symbol.for('calendar'), ElixirScript.Core.Patterns.variable('calendar')]])], __function_args__, (hour0, minute0, second0, microsecond0, calendar0) => {
                return true;
            })) !== null) {
                let [hour0, minute0, second0, microsecond0, calendar0] = __arg_matches__;

                return calendar0.time_to_string(hour0, minute0, second0, microsecond0);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    const __exports = {
        __impl__,
        to_string,
        __MODULE__: Symbol.for('Elixir.String.Chars.Time'),
        __info__
    };

    Elixir.String.Chars.Time.__exports = __exports

    return __exports;
}
ElixirScript.Core.Functions.build_namespace(Elixir, 'Elixir.String.Chars.List').__load = function(Elixir) {
    if (Elixir.String.Chars.List.__exports)
        return Elixir.String.Chars.List.__exports;

    function __info__(kind) {
        const __info__map__ = new Map([[Symbol.for('functions'), [new ElixirScript.Core.Tuple(Symbol.for('__impl__'), 1), new ElixirScript.Core.Tuple(Symbol.for('to_string'), 1)]], [Symbol.for('macros'), []], [Symbol.for('attributes'), [new ElixirScript.Core.Tuple(Symbol.for('vsn'), [24236798053708241813784054487092995786]), new ElixirScript.Core.Tuple(Symbol.for('behaviour'), [Elixir.String.Chars.__load(Elixir)]), new ElixirScript.Core.Tuple(Symbol.for('protocol_impl'), [new ElixirScript.Core.Tuple(Symbol.for('protocol'), Elixir.String.Chars.__load(Elixir)), new ElixirScript.Core.Tuple(Symbol.for('for'), Elixir.List.__load(Elixir))])]], [Symbol.for('compile'), [new ElixirScript.Core.Tuple(Symbol.for('options'), []), new ElixirScript.Core.Tuple(Symbol.for('version'), [55, 46, 49, 46, 50]), new ElixirScript.Core.Tuple(Symbol.for('source'), '/private/tmp/elixir-20170929-51947-wgj4qu/elixir-1.5.2/lib/elixir/lib/string/chars.ex')]], [Symbol.for('md5'), new ElixirScript.Core.BitString(ElixirScript.Core.BitString.integer(18), ElixirScript.Core.BitString.integer(59), ElixirScript.Core.BitString.integer(214), ElixirScript.Core.BitString.integer(103), ElixirScript.Core.BitString.integer(60), ElixirScript.Core.BitString.integer(166), ElixirScript.Core.BitString.integer(105), ElixirScript.Core.BitString.integer(147), ElixirScript.Core.BitString.integer(128), ElixirScript.Core.BitString.integer(80), ElixirScript.Core.BitString.integer(25), ElixirScript.Core.BitString.integer(240), ElixirScript.Core.BitString.integer(220), ElixirScript.Core.BitString.integer(238), ElixirScript.Core.BitString.integer(166), ElixirScript.Core.BitString.integer(202))], [Symbol.for('module'), Symbol.for('Elixir.String.Chars.List')]]);

        const value = __info__map__.get(kind);

        if (value !== null) {
            return value;
        }

        throw new ElixirScript.Core.Patterns.MatchError(kind);
    }

    function __impl__(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('for')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.List.__load(Elixir);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('target')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.String.Chars.List.__load(Elixir);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('protocol')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.String.Chars.__load(Elixir);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function to_string(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('charlist')], __function_args__, (charlist0) => {
                return true;
            })) !== null) {
                let [charlist0] = __arg_matches__;

                return Elixir.List.__load(Elixir).to_string(charlist0);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    const __exports = {
        __impl__,
        to_string,
        __MODULE__: Symbol.for('Elixir.String.Chars.List'),
        __info__
    };

    Elixir.String.Chars.List.__exports = __exports

    return __exports;
}
ElixirScript.Core.Functions.build_namespace(Elixir, 'Elixir.String.Chars.DateTime').__load = function(Elixir) {
    if (Elixir.String.Chars.DateTime.__exports)
        return Elixir.String.Chars.DateTime.__exports;

    function __info__(kind) {
        const __info__map__ = new Map([[Symbol.for('functions'), [new ElixirScript.Core.Tuple(Symbol.for('__impl__'), 1), new ElixirScript.Core.Tuple(Symbol.for('to_string'), 1)]], [Symbol.for('macros'), []], [Symbol.for('attributes'), [new ElixirScript.Core.Tuple(Symbol.for('vsn'), [183927011111246663984681656981354388091]), new ElixirScript.Core.Tuple(Symbol.for('behaviour'), [Elixir.String.Chars.__load(Elixir)]), new ElixirScript.Core.Tuple(Symbol.for('protocol_impl'), [new ElixirScript.Core.Tuple(Symbol.for('protocol'), Elixir.String.Chars.__load(Elixir)), new ElixirScript.Core.Tuple(Symbol.for('for'), Elixir.DateTime.__load(Elixir))])]], [Symbol.for('compile'), [new ElixirScript.Core.Tuple(Symbol.for('options'), []), new ElixirScript.Core.Tuple(Symbol.for('version'), [55, 46, 49, 46, 50]), new ElixirScript.Core.Tuple(Symbol.for('source'), '/private/tmp/elixir-20170929-51947-wgj4qu/elixir-1.5.2/lib/elixir/lib/calendar/datetime.ex')]], [Symbol.for('md5'), new ElixirScript.Core.BitString(ElixirScript.Core.BitString.integer(138), ElixirScript.Core.BitString.integer(95), ElixirScript.Core.BitString.integer(13), ElixirScript.Core.BitString.integer(199), ElixirScript.Core.BitString.integer(173), ElixirScript.Core.BitString.integer(80), ElixirScript.Core.BitString.integer(138), ElixirScript.Core.BitString.integer(251), ElixirScript.Core.BitString.integer(104), ElixirScript.Core.BitString.integer(227), ElixirScript.Core.BitString.integer(38), ElixirScript.Core.BitString.integer(224), ElixirScript.Core.BitString.integer(191), ElixirScript.Core.BitString.integer(11), ElixirScript.Core.BitString.integer(26), ElixirScript.Core.BitString.integer(123))], [Symbol.for('module'), Symbol.for('Elixir.String.Chars.DateTime')]]);

        const value = __info__map__.get(kind);

        if (value !== null) {
            return value;
        }

        throw new ElixirScript.Core.Patterns.MatchError(kind);
    }

    function __impl__(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('for')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.DateTime.__load(Elixir);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('target')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.String.Chars.DateTime.__load(Elixir);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('protocol')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.String.Chars.__load(Elixir);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function to_string(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([new Map([[Symbol.for('calendar'), ElixirScript.Core.Patterns.variable('calendar')], [Symbol.for('year'), ElixirScript.Core.Patterns.variable('year')], [Symbol.for('month'), ElixirScript.Core.Patterns.variable('month')], [Symbol.for('day'), ElixirScript.Core.Patterns.variable('day')], [Symbol.for('hour'), ElixirScript.Core.Patterns.variable('hour')], [Symbol.for('minute'), ElixirScript.Core.Patterns.variable('minute')], [Symbol.for('second'), ElixirScript.Core.Patterns.variable('second')], [Symbol.for('microsecond'), ElixirScript.Core.Patterns.variable('microsecond')], [Symbol.for('time_zone'), ElixirScript.Core.Patterns.variable('time_zone')], [Symbol.for('zone_abbr'), ElixirScript.Core.Patterns.variable('zone_abbr')], [Symbol.for('utc_offset'), ElixirScript.Core.Patterns.variable('utc_offset')], [Symbol.for('std_offset'), ElixirScript.Core.Patterns.variable('std_offset')]])], __function_args__, (calendar0, year0, month0, day0, hour0, minute0, second0, microsecond0, time_zone0, zone_abbr0, utc_offset0, std_offset0) => {
                return true;
            })) !== null) {
                let [calendar0, year0, month0, day0, hour0, minute0, second0, microsecond0, time_zone0, zone_abbr0, utc_offset0, std_offset0] = __arg_matches__;

                return calendar0.datetime_to_string(year0, month0, day0, hour0, minute0, second0, microsecond0, time_zone0, zone_abbr0, utc_offset0, std_offset0);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    const __exports = {
        __impl__,
        to_string,
        __MODULE__: Symbol.for('Elixir.String.Chars.DateTime'),
        __info__
    };

    Elixir.String.Chars.DateTime.__exports = __exports

    return __exports;
}
ElixirScript.Core.Functions.build_namespace(Elixir, 'Elixir.Enum').__load = function(Elixir) {
    if (Elixir.Enum.__exports)
        return Elixir.Enum.__exports;

    function __info__(kind) {
        const __info__map__ = new Map([[Symbol.for('functions'), [new ElixirScript.Core.Tuple(Symbol.for('all?'), 1), new ElixirScript.Core.Tuple(Symbol.for('all?'), 2), new ElixirScript.Core.Tuple(Symbol.for('any?'), 1), new ElixirScript.Core.Tuple(Symbol.for('any?'), 2), new ElixirScript.Core.Tuple(Symbol.for('at'), 2), new ElixirScript.Core.Tuple(Symbol.for('at'), 3), new ElixirScript.Core.Tuple(Symbol.for('chunk'), 2), new ElixirScript.Core.Tuple(Symbol.for('chunk'), 3), new ElixirScript.Core.Tuple(Symbol.for('chunk'), 4), new ElixirScript.Core.Tuple(Symbol.for('chunk_by'), 2), new ElixirScript.Core.Tuple(Symbol.for('chunk_every'), 2), new ElixirScript.Core.Tuple(Symbol.for('chunk_every'), 3), new ElixirScript.Core.Tuple(Symbol.for('chunk_every'), 4), new ElixirScript.Core.Tuple(Symbol.for('chunk_while'), 4), new ElixirScript.Core.Tuple(Symbol.for('concat'), 1), new ElixirScript.Core.Tuple(Symbol.for('concat'), 2), new ElixirScript.Core.Tuple(Symbol.for('count'), 1), new ElixirScript.Core.Tuple(Symbol.for('count'), 2), new ElixirScript.Core.Tuple(Symbol.for('dedup'), 1), new ElixirScript.Core.Tuple(Symbol.for('dedup_by'), 2), new ElixirScript.Core.Tuple(Symbol.for('drop'), 2), new ElixirScript.Core.Tuple(Symbol.for('drop_every'), 2), new ElixirScript.Core.Tuple(Symbol.for('drop_while'), 2), new ElixirScript.Core.Tuple(Symbol.for('each'), 2), new ElixirScript.Core.Tuple(Symbol.for('empty?'), 1), new ElixirScript.Core.Tuple(Symbol.for('fetch'), 2), new ElixirScript.Core.Tuple(Symbol.for('fetch!'), 2), new ElixirScript.Core.Tuple(Symbol.for('filter'), 2), new ElixirScript.Core.Tuple(Symbol.for('filter_map'), 3), new ElixirScript.Core.Tuple(Symbol.for('find'), 2), new ElixirScript.Core.Tuple(Symbol.for('find'), 3), new ElixirScript.Core.Tuple(Symbol.for('find_index'), 2), new ElixirScript.Core.Tuple(Symbol.for('find_value'), 2), new ElixirScript.Core.Tuple(Symbol.for('find_value'), 3), new ElixirScript.Core.Tuple(Symbol.for('flat_map'), 2), new ElixirScript.Core.Tuple(Symbol.for('flat_map_reduce'), 3), new ElixirScript.Core.Tuple(Symbol.for('group_by'), 2), new ElixirScript.Core.Tuple(Symbol.for('group_by'), 3), new ElixirScript.Core.Tuple(Symbol.for('intersperse'), 2), new ElixirScript.Core.Tuple(Symbol.for('into'), 2), new ElixirScript.Core.Tuple(Symbol.for('into'), 3), new ElixirScript.Core.Tuple(Symbol.for('join'), 1), new ElixirScript.Core.Tuple(Symbol.for('join'), 2), new ElixirScript.Core.Tuple(Symbol.for('map'), 2), new ElixirScript.Core.Tuple(Symbol.for('map_every'), 3), new ElixirScript.Core.Tuple(Symbol.for('map_join'), 2), new ElixirScript.Core.Tuple(Symbol.for('map_join'), 3), new ElixirScript.Core.Tuple(Symbol.for('map_reduce'), 3), new ElixirScript.Core.Tuple(Symbol.for('max'), 1), new ElixirScript.Core.Tuple(Symbol.for('max'), 2), new ElixirScript.Core.Tuple(Symbol.for('max_by'), 2), new ElixirScript.Core.Tuple(Symbol.for('max_by'), 3), new ElixirScript.Core.Tuple(Symbol.for('member?'), 2), new ElixirScript.Core.Tuple(Symbol.for('min'), 1), new ElixirScript.Core.Tuple(Symbol.for('min'), 2), new ElixirScript.Core.Tuple(Symbol.for('min_by'), 2), new ElixirScript.Core.Tuple(Symbol.for('min_by'), 3), new ElixirScript.Core.Tuple(Symbol.for('min_max'), 1), new ElixirScript.Core.Tuple(Symbol.for('min_max'), 2), new ElixirScript.Core.Tuple(Symbol.for('min_max_by'), 2), new ElixirScript.Core.Tuple(Symbol.for('min_max_by'), 3), new ElixirScript.Core.Tuple(Symbol.for('partition'), 2), new ElixirScript.Core.Tuple(Symbol.for('random'), 1), new ElixirScript.Core.Tuple(Symbol.for('reduce'), 2), new ElixirScript.Core.Tuple(Symbol.for('reduce'), 3), new ElixirScript.Core.Tuple(Symbol.for('reduce_while'), 3), new ElixirScript.Core.Tuple(Symbol.for('reject'), 2), new ElixirScript.Core.Tuple(Symbol.for('reverse'), 1), new ElixirScript.Core.Tuple(Symbol.for('reverse'), 2), new ElixirScript.Core.Tuple(Symbol.for('reverse_slice'), 3), new ElixirScript.Core.Tuple(Symbol.for('scan'), 2), new ElixirScript.Core.Tuple(Symbol.for('scan'), 3), new ElixirScript.Core.Tuple(Symbol.for('shuffle'), 1), new ElixirScript.Core.Tuple(Symbol.for('slice'), 2), new ElixirScript.Core.Tuple(Symbol.for('slice'), 3), new ElixirScript.Core.Tuple(Symbol.for('sort'), 1), new ElixirScript.Core.Tuple(Symbol.for('sort'), 2), new ElixirScript.Core.Tuple(Symbol.for('sort_by'), 2), new ElixirScript.Core.Tuple(Symbol.for('sort_by'), 3), new ElixirScript.Core.Tuple(Symbol.for('split'), 2), new ElixirScript.Core.Tuple(Symbol.for('split_while'), 2), new ElixirScript.Core.Tuple(Symbol.for('split_with'), 2), new ElixirScript.Core.Tuple(Symbol.for('sum'), 1), new ElixirScript.Core.Tuple(Symbol.for('take'), 2), new ElixirScript.Core.Tuple(Symbol.for('take_every'), 2), new ElixirScript.Core.Tuple(Symbol.for('take_random'), 2), new ElixirScript.Core.Tuple(Symbol.for('take_while'), 2), new ElixirScript.Core.Tuple(Symbol.for('to_list'), 1), new ElixirScript.Core.Tuple(Symbol.for('uniq'), 1), new ElixirScript.Core.Tuple(Symbol.for('uniq'), 2), new ElixirScript.Core.Tuple(Symbol.for('uniq_by'), 2), new ElixirScript.Core.Tuple(Symbol.for('unzip'), 1), new ElixirScript.Core.Tuple(Symbol.for('with_index'), 1), new ElixirScript.Core.Tuple(Symbol.for('with_index'), 2), new ElixirScript.Core.Tuple(Symbol.for('zip'), 1), new ElixirScript.Core.Tuple(Symbol.for('zip'), 2)]], [Symbol.for('macros'), []], [Symbol.for('attributes'), [new ElixirScript.Core.Tuple(Symbol.for('vsn'), [146949188620703248421151154827839291711])]], [Symbol.for('compile'), [new ElixirScript.Core.Tuple(Symbol.for('options'), []), new ElixirScript.Core.Tuple(Symbol.for('version'), [55, 46, 49, 46, 50]), new ElixirScript.Core.Tuple(Symbol.for('source'), '/private/tmp/elixir-20170929-51947-wgj4qu/elixir-1.5.2/lib/elixir/lib/enum.ex')]], [Symbol.for('md5'), new ElixirScript.Core.BitString(ElixirScript.Core.BitString.integer(110), ElixirScript.Core.BitString.integer(141), ElixirScript.Core.BitString.integer(98), ElixirScript.Core.BitString.integer(95), ElixirScript.Core.BitString.integer(79), ElixirScript.Core.BitString.integer(35), ElixirScript.Core.BitString.integer(183), ElixirScript.Core.BitString.integer(141), ElixirScript.Core.BitString.integer(189), ElixirScript.Core.BitString.integer(167), ElixirScript.Core.BitString.integer(14), ElixirScript.Core.BitString.integer(237), ElixirScript.Core.BitString.integer(204), ElixirScript.Core.BitString.integer(230), ElixirScript.Core.BitString.integer(65), ElixirScript.Core.BitString.integer(63))], [Symbol.for('module'), Symbol.for('Elixir.Enum')]]);

        const value = __info__map__.get(kind);

        if (value !== null) {
            return value;
        }

        throw new ElixirScript.Core.Patterns.MatchError(kind);
    }

    function drop(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('enumerable'), ElixirScript.Core.Patterns.variable('amount')], __function_args__, (enumerable0, amount0) => {
                return ElixirScript.Core.erlang.is_list(enumerable0) && ElixirScript.Core.erlang.is_integer(amount0) && amount0 >= 0;
            })) !== null) {
                let [enumerable0, amount0] = __arg_matches__;

                return drop_list(enumerable0, amount0);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('enumerable'), ElixirScript.Core.Patterns.variable('amount')], __function_args__, (enumerable0, amount0) => {
                return ElixirScript.Core.erlang.is_integer(amount0) && amount0 >= 0;
            })) !== null) {
                let [enumerable0, amount0] = __arg_matches__;

                const [result0] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                    values: [ElixirScript.Core.Patterns.variable('result'), ElixirScript.Core.Patterns.variable('_')]
                }), reduce(enumerable0, new ElixirScript.Core.Tuple([], amount0), (...__function_args__) => {
                    function recur(...__function_args__) {
                        let __arg_matches__ = null;

                        if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('_entry576460752303385372'), ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                            values: [ElixirScript.Core.Patterns.variable('head576460752303385372'), ElixirScript.Core.Patterns.variable('amount576460752303385372')]
                        })], __function_args__, (_entry5764607523033853720, head5764607523033853720, amount5764607523033853720) => {
                            return amount5764607523033853720 > 0;
                        })) !== null) {
                            let [_entry5764607523033853720, head5764607523033853720, amount5764607523033853720] = __arg_matches__;

                            return new ElixirScript.Core.Tuple(head5764607523033853720, amount5764607523033853720 - 1);
                        } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('entry576460752303385372'), ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                            values: [ElixirScript.Core.Patterns.variable('head576460752303385372'), ElixirScript.Core.Patterns.variable('amount576460752303385372')]
                        })], __function_args__, (entry5764607523033853720, head5764607523033853720, amount5764607523033853720) => {
                            return true;
                        })) !== null) {
                            let [entry5764607523033853720, head5764607523033853720, amount5764607523033853720] = __arg_matches__;

                            return new ElixirScript.Core.Tuple(ElixirScript.Core.Functions.concat(entry5764607523033853720, head5764607523033853720), amount5764607523033853720);
                        }

                        throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
                    }

                    return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
                }));

                const _ref4465121 = new ElixirScript.Core.Tuple(result0);

                return ElixirScript.Core.Patterns.defmatch(ElixirScript.Core.Patterns.clause([false], () => {
                    return [];
                }, () => {
                    return true;
                }), ElixirScript.Core.Patterns.clause([true], () => {
                    return ElixirScript.Core.lists.reverse(result0);
                }, () => {
                    return true;
                })).call(this, ElixirScript.Core.erlang.is_list(result0));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('enumerable'), ElixirScript.Core.Patterns.variable('amount')], __function_args__, (enumerable0, amount0) => {
                return ElixirScript.Core.erlang.is_integer(amount0) && amount0 < 0;
            })) !== null) {
                let [enumerable0, amount0] = __arg_matches__;

                return ElixirScript.Core.lists.reverse(drop_list(reverse(enumerable0), -amount0));
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function drop_list(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.headTail(ElixirScript.Core.Patterns.variable('_'), ElixirScript.Core.Patterns.variable('t')), ElixirScript.Core.Patterns.variable('counter')], __function_args__, (t0, counter0) => {
                return counter0 > 0;
            })) !== null) {
                let [t0, counter0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, t0, counter0 - 1));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('list'), 0], __function_args__, (list0) => {
                return true;
            })) !== null) {
                let [list0] = __arg_matches__;

                return list0;
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([[], ElixirScript.Core.Patterns.variable('_')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return [];
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function entry_to_string(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('entry')], __function_args__, (entry0) => {
                return ElixirScript.Core.erlang.is_binary(entry0);
            })) !== null) {
                let [entry0] = __arg_matches__;

                return entry0;
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('entry')], __function_args__, (entry0) => {
                return true;
            })) !== null) {
                let [entry0] = __arg_matches__;

                return Elixir.String.Chars.__load(Elixir).to_string(entry0);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function join(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('enumerable'), ElixirScript.Core.Patterns.variable('joiner')], __function_args__, (enumerable0, joiner0) => {
                return ElixirScript.Core.erlang.is_binary(joiner0);
            })) !== null) {
                let [enumerable0, joiner0] = __arg_matches__;

                const [reduced0] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.variable('reduced'), reduce(enumerable0, Symbol.for('first'), (...__function_args__) => {
                    function recur(...__function_args__) {
                        let __arg_matches__ = null;

                        if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('entry'), Symbol.for('first')], __function_args__, (entry0) => {
                            return true;
                        })) !== null) {
                            let [entry0] = __arg_matches__;

                            return entry_to_string(entry0);
                        } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('entry'), ElixirScript.Core.Patterns.variable('acc')], __function_args__, (entry0, acc0) => {
                            return true;
                        })) !== null) {
                            let [entry0, acc0] = __arg_matches__;

                            return [acc0, ElixirScript.Core.Functions.concat(joiner0, entry_to_string(entry0))];
                        }

                        throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
                    }

                    return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
                }));

                return ElixirScript.Core.Patterns.defmatch(ElixirScript.Core.Patterns.clause([false], () => {
                    return ElixirScript.Core.erlang.iolist_to_binary(reduced0);
                }, () => {
                    return true;
                }), ElixirScript.Core.Patterns.clause([true], () => {
                    return '';
                }, () => {
                    return true;
                })).call(this, ElixirScript.Core.erlang.equals(reduced0, Symbol.for('first')));
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function map(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('enumerable'), ElixirScript.Core.Patterns.variable('fun')], __function_args__, (enumerable0, fun0) => {
                return ElixirScript.Core.erlang.is_list(enumerable0);
            })) !== null) {
                let [enumerable0, fun0] = __arg_matches__;

                return ElixirScript.Core.lists.map(fun0, enumerable0);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('enumerable'), ElixirScript.Core.Patterns.variable('fun')], __function_args__, (enumerable0, fun0) => {
                return true;
            })) !== null) {
                let [enumerable0, fun0] = __arg_matches__;

                return ElixirScript.Core.lists.reverse(reduce(enumerable0, [], (...__function_args__) => {
                    function recur(...__function_args__) {
                        let __arg_matches__ = null;

                        if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('entry576460752303384412'), ElixirScript.Core.Patterns.variable('acc576460752303384412')], __function_args__, (entry5764607523033844120, acc5764607523033844120) => {
                            return true;
                        })) !== null) {
                            let [entry5764607523033844120, acc5764607523033844120] = __arg_matches__;

                            return ElixirScript.Core.Functions.concat(fun0(entry5764607523033844120), acc5764607523033844120);
                        }

                        throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
                    }

                    return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
                }));
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function map_join(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('enumerable'), ElixirScript.Core.Patterns.variable('joiner'), ElixirScript.Core.Patterns.variable('mapper')], __function_args__, (enumerable0, joiner0, mapper0) => {
                return ElixirScript.Core.erlang.is_binary(joiner0);
            })) !== null) {
                let [enumerable0, joiner0, mapper0] = __arg_matches__;

                const [reduced0] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.variable('reduced'), reduce(enumerable0, Symbol.for('first'), (...__function_args__) => {
                    function recur(...__function_args__) {
                        let __arg_matches__ = null;

                        if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('entry'), Symbol.for('first')], __function_args__, (entry0) => {
                            return true;
                        })) !== null) {
                            let [entry0] = __arg_matches__;

                            return entry_to_string(mapper0(entry0));
                        } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('entry'), ElixirScript.Core.Patterns.variable('acc')], __function_args__, (entry0, acc0) => {
                            return true;
                        })) !== null) {
                            let [entry0, acc0] = __arg_matches__;

                            return [acc0, ElixirScript.Core.Functions.concat(joiner0, entry_to_string(mapper0(entry0)))];
                        }

                        throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
                    }

                    return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
                }));

                return ElixirScript.Core.Patterns.defmatch(ElixirScript.Core.Patterns.clause([false], () => {
                    return ElixirScript.Core.erlang.iolist_to_binary(reduced0);
                }, () => {
                    return true;
                }), ElixirScript.Core.Patterns.clause([true], () => {
                    return '';
                }, () => {
                    return true;
                })).call(this, ElixirScript.Core.erlang.equals(reduced0, Symbol.for('first')));
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function member__qmark__(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('enumerable'), ElixirScript.Core.Patterns.variable('element')], __function_args__, (enumerable0, element0) => {
                return ElixirScript.Core.erlang.is_list(enumerable0);
            })) !== null) {
                let [enumerable0, element0] = __arg_matches__;

                return ElixirScript.Core.lists.member(element0, enumerable0);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('enumerable'), ElixirScript.Core.Patterns.variable('element')], __function_args__, (enumerable0, element0) => {
                return true;
            })) !== null) {
                let [enumerable0, element0] = __arg_matches__;

                return ElixirScript.Core.Patterns.defmatch(ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                    values: [Symbol.for('ok'), ElixirScript.Core.Patterns.variable('element')]
                })], (element1) => {
                    return element1;
                }, (element1) => {
                    return ElixirScript.Core.erlang.is_boolean(element1);
                }), ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                    values: [Symbol.for('error'), ElixirScript.Core.Patterns.variable('module')]
                })], (module0) => {
                    return ElixirScript.Core.erlang.element(2, module0.reduce(enumerable0, new ElixirScript.Core.Tuple(Symbol.for('cont'), false), (...__function_args__) => {
                        function recur(...__function_args__) {
                            let __arg_matches__ = null;

                            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('v'), ElixirScript.Core.Patterns.variable('_')], __function_args__, (v0) => {
                                return v0 === element0;
                            })) !== null) {
                                let [v0] = __arg_matches__;

                                return new ElixirScript.Core.Tuple(Symbol.for('halt'), true);
                            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('_'), ElixirScript.Core.Patterns.variable('_')], __function_args__, () => {
                                return true;
                            })) !== null) {
                                let [] = __arg_matches__;

                                return new ElixirScript.Core.Tuple(Symbol.for('cont'), false);
                            }

                            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
                        }

                        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
                    }));
                }, (module0) => {
                    return true;
                })).call(this, Elixir.Enumerable.__load(Elixir).member__qmark__(enumerable0, element0));
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function reduce(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('enumerable'), ElixirScript.Core.Patterns.variable('acc'), ElixirScript.Core.Patterns.variable('fun')], __function_args__, (enumerable0, acc0, fun0) => {
                return ElixirScript.Core.erlang.is_list(enumerable0);
            })) !== null) {
                let [enumerable0, acc0, fun0] = __arg_matches__;

                return ElixirScript.Core.lists.foldl(fun0, acc0, enumerable0);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([new Map([[Symbol.for('__struct__'), Elixir.Range.__load(Elixir)], [Symbol.for('first'), ElixirScript.Core.Patterns.variable('first')], [Symbol.for('last'), ElixirScript.Core.Patterns.variable('last')]]), ElixirScript.Core.Patterns.variable('acc'), ElixirScript.Core.Patterns.variable('fun')], __function_args__, (first0, last0, acc0, fun0) => {
                return true;
            })) !== null) {
                let [first0, last0, acc0, fun0] = __arg_matches__;

                return ElixirScript.Core.Patterns.defmatch(ElixirScript.Core.Patterns.clause([false], () => {
                    return reduce_range_dec(first0, last0, acc0, fun0);
                }, () => {
                    return true;
                }), ElixirScript.Core.Patterns.clause([true], () => {
                    return reduce_range_inc(first0, last0, acc0, fun0);
                }, () => {
                    return true;
                })).call(this, first0 <= last0);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.capture(new Map([[Symbol.for('__struct__'), ElixirScript.Core.Patterns.variable('_')]])), ElixirScript.Core.Patterns.variable('acc'), ElixirScript.Core.Patterns.variable('fun')], __function_args__, (enumerable0, acc0, fun0) => {
                return true;
            })) !== null) {
                let [enumerable0, acc0, fun0] = __arg_matches__;

                return ElixirScript.Core.erlang.element(2, Elixir.Enumerable.__load(Elixir).reduce(enumerable0, new ElixirScript.Core.Tuple(Symbol.for('cont'), acc0), (...__function_args__) => {
                    function recur(...__function_args__) {
                        let __arg_matches__ = null;

                        if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('x'), ElixirScript.Core.Patterns.variable('acc')], __function_args__, (x0, acc1) => {
                            return true;
                        })) !== null) {
                            let [x0, acc1] = __arg_matches__;

                            return new ElixirScript.Core.Tuple(Symbol.for('cont'), fun0(x0, acc1));
                        }

                        throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
                    }

                    return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
                }));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.capture(new Map([])), ElixirScript.Core.Patterns.variable('acc'), ElixirScript.Core.Patterns.variable('fun')], __function_args__, (enumerable0, acc0, fun0) => {
                return true;
            })) !== null) {
                let [enumerable0, acc0, fun0] = __arg_matches__;

                return ElixirScript.Core.maps.fold((...__function_args__) => {
                    function recur(...__function_args__) {
                        let __arg_matches__ = null;

                        if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('k'), ElixirScript.Core.Patterns.variable('v'), ElixirScript.Core.Patterns.variable('acc')], __function_args__, (k0, v0, acc1) => {
                            return true;
                        })) !== null) {
                            let [k0, v0, acc1] = __arg_matches__;

                            return fun0(new ElixirScript.Core.Tuple(k0, v0), acc1);
                        }

                        throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
                    }

                    return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
                }, acc0, enumerable0);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('enumerable'), ElixirScript.Core.Patterns.variable('acc'), ElixirScript.Core.Patterns.variable('fun')], __function_args__, (enumerable0, acc0, fun0) => {
                return true;
            })) !== null) {
                let [enumerable0, acc0, fun0] = __arg_matches__;

                return ElixirScript.Core.erlang.element(2, Elixir.Enumerable.__load(Elixir).reduce(enumerable0, new ElixirScript.Core.Tuple(Symbol.for('cont'), acc0), (...__function_args__) => {
                    function recur(...__function_args__) {
                        let __arg_matches__ = null;

                        if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('x'), ElixirScript.Core.Patterns.variable('acc')], __function_args__, (x0, acc1) => {
                            return true;
                        })) !== null) {
                            let [x0, acc1] = __arg_matches__;

                            return new ElixirScript.Core.Tuple(Symbol.for('cont'), fun0(x0, acc1));
                        }

                        throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
                    }

                    return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
                }));
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function reduce_range_dec(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('first'), ElixirScript.Core.Patterns.variable('first'), ElixirScript.Core.Patterns.variable('acc'), ElixirScript.Core.Patterns.variable('fun')], __function_args__, (first0, first1, acc0, fun0) => {
                return true;
            })) !== null) {
                let [first0, first1, acc0, fun0] = __arg_matches__;

                return fun0(first1, acc0);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('first'), ElixirScript.Core.Patterns.variable('last'), ElixirScript.Core.Patterns.variable('acc'), ElixirScript.Core.Patterns.variable('fun')], __function_args__, (first0, last0, acc0, fun0) => {
                return true;
            })) !== null) {
                let [first0, last0, acc0, fun0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, first0 - 1, last0, fun0(first0, acc0), fun0));
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function reduce_range_inc(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('first'), ElixirScript.Core.Patterns.variable('first'), ElixirScript.Core.Patterns.variable('acc'), ElixirScript.Core.Patterns.variable('fun')], __function_args__, (first0, first1, acc0, fun0) => {
                return true;
            })) !== null) {
                let [first0, first1, acc0, fun0] = __arg_matches__;

                return fun0(first1, acc0);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('first'), ElixirScript.Core.Patterns.variable('last'), ElixirScript.Core.Patterns.variable('acc'), ElixirScript.Core.Patterns.variable('fun')], __function_args__, (first0, last0, acc0, fun0) => {
                return true;
            })) !== null) {
                let [first0, last0, acc0, fun0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, first0 + 1, last0, fun0(first0, acc0), fun0));
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function reverse(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([[]], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return [];
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.capture([ElixirScript.Core.Patterns.variable('_')])], __function_args__, (list0) => {
                return true;
            })) !== null) {
                let [list0] = __arg_matches__;

                return list0;
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([[ElixirScript.Core.Patterns.variable('item1'), ElixirScript.Core.Patterns.variable('item2')]], __function_args__, (item10, item20) => {
                return true;
            })) !== null) {
                let [item10, item20] = __arg_matches__;

                return [item20, item10];
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([[ElixirScript.Core.Patterns.variable('item1'), ElixirScript.Core.Patterns.headTail(ElixirScript.Core.Patterns.variable('item2'), ElixirScript.Core.Patterns.variable('rest'))]], __function_args__, (item10, item20, rest0) => {
                return true;
            })) !== null) {
                let [item10, item20, rest0] = __arg_matches__;

                return ElixirScript.Core.lists.reverse(rest0, [item20, item10]);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('enumerable')], __function_args__, (enumerable0) => {
                return true;
            })) !== null) {
                let [enumerable0] = __arg_matches__;

                return reduce(enumerable0, [], (...__function_args__) => {
                    function recur(...__function_args__) {
                        let __arg_matches__ = null;

                        if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('x1'), ElixirScript.Core.Patterns.variable('x2')], __function_args__, (x10, x20) => {
                            return true;
                        })) !== null) {
                            let [x10, x20] = __arg_matches__;

                            return ElixirScript.Core.Functions.concat(x10, x20);
                        }

                        throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
                    }

                    return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
                });
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function split_with(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('enumerable'), ElixirScript.Core.Patterns.variable('fun')], __function_args__, (enumerable0, fun0) => {
                return true;
            })) !== null) {
                let [enumerable0, fun0] = __arg_matches__;

                const [acc10, acc20] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                    values: [ElixirScript.Core.Patterns.variable('acc1'), ElixirScript.Core.Patterns.variable('acc2')]
                }), reduce(enumerable0, new ElixirScript.Core.Tuple([], []), (...__function_args__) => {
                    function recur(...__function_args__) {
                        let __arg_matches__ = null;

                        if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('entry'), ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                            values: [ElixirScript.Core.Patterns.variable('acc1'), ElixirScript.Core.Patterns.variable('acc2')]
                        })], __function_args__, (entry0, acc10, acc20) => {
                            return true;
                        })) !== null) {
                            let [entry0, acc10, acc20] = __arg_matches__;

                            return ElixirScript.Core.Patterns.defmatch(ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.variable('x576460752303378815')], (x5764607523033788150) => {
                                return new ElixirScript.Core.Tuple(acc10, ElixirScript.Core.Functions.concat(entry0, acc20));
                            }, (x5764607523033788150) => {
                                return x5764607523033788150 === null || x5764607523033788150 === false;
                            }), ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.variable('_')], () => {
                                return new ElixirScript.Core.Tuple(ElixirScript.Core.Functions.concat(entry0, acc10), acc20);
                            }, () => {
                                return true;
                            })).call(this, fun0(entry0));
                        }

                        throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
                    }

                    return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
                }));

                const _ref4906823 = new ElixirScript.Core.Tuple(acc10, acc20);

                return new ElixirScript.Core.Tuple(ElixirScript.Core.lists.reverse(acc10), ElixirScript.Core.lists.reverse(acc20));
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    const __exports = {
        drop,
        join,
        map,
        map_join,
        member__qmark__,
        reduce,
        reverse,
        split_with,
        __MODULE__: Symbol.for('Elixir.Enum'),
        __info__
    };

    Elixir.Enum.__exports = __exports

    return __exports;
}
ElixirScript.Core.Functions.build_namespace(Elixir, 'Elixir.String.Chars.Integer').__load = function(Elixir) {
    if (Elixir.String.Chars.Integer.__exports)
        return Elixir.String.Chars.Integer.__exports;

    function __info__(kind) {
        const __info__map__ = new Map([[Symbol.for('functions'), [new ElixirScript.Core.Tuple(Symbol.for('__impl__'), 1), new ElixirScript.Core.Tuple(Symbol.for('to_string'), 1)]], [Symbol.for('macros'), []], [Symbol.for('attributes'), [new ElixirScript.Core.Tuple(Symbol.for('vsn'), [10189873618194628730410069138381524603]), new ElixirScript.Core.Tuple(Symbol.for('behaviour'), [Elixir.String.Chars.__load(Elixir)]), new ElixirScript.Core.Tuple(Symbol.for('protocol_impl'), [new ElixirScript.Core.Tuple(Symbol.for('protocol'), Elixir.String.Chars.__load(Elixir)), new ElixirScript.Core.Tuple(Symbol.for('for'), Elixir.Integer.__load(Elixir))])]], [Symbol.for('compile'), [new ElixirScript.Core.Tuple(Symbol.for('options'), []), new ElixirScript.Core.Tuple(Symbol.for('version'), [55, 46, 49, 46, 50]), new ElixirScript.Core.Tuple(Symbol.for('source'), '/private/tmp/elixir-20170929-51947-wgj4qu/elixir-1.5.2/lib/elixir/lib/string/chars.ex')]], [Symbol.for('md5'), new ElixirScript.Core.BitString(ElixirScript.Core.BitString.integer(7), ElixirScript.Core.BitString.integer(170), ElixirScript.Core.BitString.integer(127), ElixirScript.Core.BitString.integer(142), ElixirScript.Core.BitString.integer(211), ElixirScript.Core.BitString.integer(24), ElixirScript.Core.BitString.integer(43), ElixirScript.Core.BitString.integer(96), ElixirScript.Core.BitString.integer(151), ElixirScript.Core.BitString.integer(184), ElixirScript.Core.BitString.integer(193), ElixirScript.Core.BitString.integer(89), ElixirScript.Core.BitString.integer(52), ElixirScript.Core.BitString.integer(60), ElixirScript.Core.BitString.integer(206), ElixirScript.Core.BitString.integer(123))], [Symbol.for('module'), Symbol.for('Elixir.String.Chars.Integer')]]);

        const value = __info__map__.get(kind);

        if (value !== null) {
            return value;
        }

        throw new ElixirScript.Core.Patterns.MatchError(kind);
    }

    function __impl__(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('for')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.Integer.__load(Elixir);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('target')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.String.Chars.Integer.__load(Elixir);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('protocol')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.String.Chars.__load(Elixir);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function to_string(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('term')], __function_args__, (term0) => {
                return true;
            })) !== null) {
                let [term0] = __arg_matches__;

                return ElixirScript.Core.erlang.integer_to_binary(term0);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    const __exports = {
        __impl__,
        to_string,
        __MODULE__: Symbol.for('Elixir.String.Chars.Integer'),
        __info__
    };

    Elixir.String.Chars.Integer.__exports = __exports

    return __exports;
}
ElixirScript.Core.Functions.build_namespace(Elixir, 'Elixir.String.Chars.Float').__load = function(Elixir) {
    if (Elixir.String.Chars.Float.__exports)
        return Elixir.String.Chars.Float.__exports;

    function __info__(kind) {
        const __info__map__ = new Map([[Symbol.for('functions'), [new ElixirScript.Core.Tuple(Symbol.for('__impl__'), 1), new ElixirScript.Core.Tuple(Symbol.for('to_string'), 1)]], [Symbol.for('macros'), []], [Symbol.for('attributes'), [new ElixirScript.Core.Tuple(Symbol.for('vsn'), [40440008916691753157444855957082798806]), new ElixirScript.Core.Tuple(Symbol.for('behaviour'), [Elixir.String.Chars.__load(Elixir)]), new ElixirScript.Core.Tuple(Symbol.for('protocol_impl'), [new ElixirScript.Core.Tuple(Symbol.for('protocol'), Elixir.String.Chars.__load(Elixir)), new ElixirScript.Core.Tuple(Symbol.for('for'), Elixir.Float.__load(Elixir))])]], [Symbol.for('compile'), [new ElixirScript.Core.Tuple(Symbol.for('options'), []), new ElixirScript.Core.Tuple(Symbol.for('version'), [55, 46, 49, 46, 50]), new ElixirScript.Core.Tuple(Symbol.for('source'), '/private/tmp/elixir-20170929-51947-wgj4qu/elixir-1.5.2/lib/elixir/lib/string/chars.ex')]], [Symbol.for('md5'), new ElixirScript.Core.BitString(ElixirScript.Core.BitString.integer(30), ElixirScript.Core.BitString.integer(108), ElixirScript.Core.BitString.integer(118), ElixirScript.Core.BitString.integer(96), ElixirScript.Core.BitString.integer(168), ElixirScript.Core.BitString.integer(158), ElixirScript.Core.BitString.integer(252), ElixirScript.Core.BitString.integer(73), ElixirScript.Core.BitString.integer(104), ElixirScript.Core.BitString.integer(63), ElixirScript.Core.BitString.integer(99), ElixirScript.Core.BitString.integer(174), ElixirScript.Core.BitString.integer(2), ElixirScript.Core.BitString.integer(22), ElixirScript.Core.BitString.integer(250), ElixirScript.Core.BitString.integer(214))], [Symbol.for('module'), Symbol.for('Elixir.String.Chars.Float')]]);

        const value = __info__map__.get(kind);

        if (value !== null) {
            return value;
        }

        throw new ElixirScript.Core.Patterns.MatchError(kind);
    }

    function __impl__(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('for')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.Float.__load(Elixir);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('target')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.String.Chars.Float.__load(Elixir);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('protocol')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.String.Chars.__load(Elixir);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function to_string(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('term')], __function_args__, (term0) => {
                return true;
            })) !== null) {
                let [term0] = __arg_matches__;

                return ElixirScript.Core.erlang.iolist_to_binary(io_lib_format.fwrite_g(term0));
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    const __exports = {
        __impl__,
        to_string,
        __MODULE__: Symbol.for('Elixir.String.Chars.Float'),
        __info__
    };

    Elixir.String.Chars.Float.__exports = __exports

    return __exports;
}
ElixirScript.Core.Functions.build_namespace(Elixir, 'Elixir.String.Chars.Date').__load = function(Elixir) {
    if (Elixir.String.Chars.Date.__exports)
        return Elixir.String.Chars.Date.__exports;

    function __info__(kind) {
        const __info__map__ = new Map([[Symbol.for('functions'), [new ElixirScript.Core.Tuple(Symbol.for('__impl__'), 1), new ElixirScript.Core.Tuple(Symbol.for('to_string'), 1)]], [Symbol.for('macros'), []], [Symbol.for('attributes'), [new ElixirScript.Core.Tuple(Symbol.for('vsn'), [66875478187091661253724912369413637462]), new ElixirScript.Core.Tuple(Symbol.for('behaviour'), [Elixir.String.Chars.__load(Elixir)]), new ElixirScript.Core.Tuple(Symbol.for('protocol_impl'), [new ElixirScript.Core.Tuple(Symbol.for('protocol'), Elixir.String.Chars.__load(Elixir)), new ElixirScript.Core.Tuple(Symbol.for('for'), Elixir.Date.__load(Elixir))])]], [Symbol.for('compile'), [new ElixirScript.Core.Tuple(Symbol.for('options'), []), new ElixirScript.Core.Tuple(Symbol.for('version'), [55, 46, 49, 46, 50]), new ElixirScript.Core.Tuple(Symbol.for('source'), '/private/tmp/elixir-20170929-51947-wgj4qu/elixir-1.5.2/lib/elixir/lib/calendar/date.ex')]], [Symbol.for('md5'), new ElixirScript.Core.BitString(ElixirScript.Core.BitString.integer(50), ElixirScript.Core.BitString.integer(79), ElixirScript.Core.BitString.integer(191), ElixirScript.Core.BitString.integer(164), ElixirScript.Core.BitString.integer(39), ElixirScript.Core.BitString.integer(247), ElixirScript.Core.BitString.integer(30), ElixirScript.Core.BitString.integer(254), ElixirScript.Core.BitString.integer(7), ElixirScript.Core.BitString.integer(103), ElixirScript.Core.BitString.integer(149), ElixirScript.Core.BitString.integer(17), ElixirScript.Core.BitString.integer(4), ElixirScript.Core.BitString.integer(35), ElixirScript.Core.BitString.integer(197), ElixirScript.Core.BitString.integer(86))], [Symbol.for('module'), Symbol.for('Elixir.String.Chars.Date')]]);

        const value = __info__map__.get(kind);

        if (value !== null) {
            return value;
        }

        throw new ElixirScript.Core.Patterns.MatchError(kind);
    }

    function __impl__(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('for')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.Date.__load(Elixir);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('target')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.String.Chars.Date.__load(Elixir);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('protocol')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.String.Chars.__load(Elixir);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function to_string(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([new Map([[Symbol.for('calendar'), ElixirScript.Core.Patterns.variable('calendar')], [Symbol.for('year'), ElixirScript.Core.Patterns.variable('year')], [Symbol.for('month'), ElixirScript.Core.Patterns.variable('month')], [Symbol.for('day'), ElixirScript.Core.Patterns.variable('day')]])], __function_args__, (calendar0, year0, month0, day0) => {
                return true;
            })) !== null) {
                let [calendar0, year0, month0, day0] = __arg_matches__;

                return calendar0.date_to_string(year0, month0, day0);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    const __exports = {
        __impl__,
        to_string,
        __MODULE__: Symbol.for('Elixir.String.Chars.Date'),
        __info__
    };

    Elixir.String.Chars.Date.__exports = __exports

    return __exports;
}
ElixirScript.Core.Functions.build_namespace(Elixir, 'Elixir.Inspect.Version.Requirement').__load = function(Elixir) {
    if (Elixir.Inspect.Version.Requirement.__exports)
        return Elixir.Inspect.Version.Requirement.__exports;

    function __info__(kind) {
        const __info__map__ = new Map([[Symbol.for('functions'), [new ElixirScript.Core.Tuple(Symbol.for('__impl__'), 1), new ElixirScript.Core.Tuple(Symbol.for('inspect'), 2)]], [Symbol.for('macros'), []], [Symbol.for('attributes'), [new ElixirScript.Core.Tuple(Symbol.for('vsn'), [109607344184881664585667232759959790970]), new ElixirScript.Core.Tuple(Symbol.for('behaviour'), [Elixir.Inspect.__load(Elixir)]), new ElixirScript.Core.Tuple(Symbol.for('protocol_impl'), [new ElixirScript.Core.Tuple(Symbol.for('protocol'), Elixir.Inspect.__load(Elixir)), new ElixirScript.Core.Tuple(Symbol.for('for'), Elixir.Version.Requirement.__load(Elixir))])]], [Symbol.for('compile'), [new ElixirScript.Core.Tuple(Symbol.for('options'), []), new ElixirScript.Core.Tuple(Symbol.for('version'), [55, 46, 49, 46, 50]), new ElixirScript.Core.Tuple(Symbol.for('source'), '/private/tmp/elixir-20170929-51947-wgj4qu/elixir-1.5.2/lib/elixir/lib/version.ex')]], [Symbol.for('md5'), new ElixirScript.Core.BitString(ElixirScript.Core.BitString.integer(82), ElixirScript.Core.BitString.integer(117), ElixirScript.Core.BitString.integer(155), ElixirScript.Core.BitString.integer(76), ElixirScript.Core.BitString.integer(10), ElixirScript.Core.BitString.integer(120), ElixirScript.Core.BitString.integer(243), ElixirScript.Core.BitString.integer(127), ElixirScript.Core.BitString.integer(106), ElixirScript.Core.BitString.integer(51), ElixirScript.Core.BitString.integer(105), ElixirScript.Core.BitString.integer(69), ElixirScript.Core.BitString.integer(187), ElixirScript.Core.BitString.integer(108), ElixirScript.Core.BitString.integer(37), ElixirScript.Core.BitString.integer(122))], [Symbol.for('module'), Symbol.for('Elixir.Inspect.Version.Requirement')]]);

        const value = __info__map__.get(kind);

        if (value !== null) {
            return value;
        }

        throw new ElixirScript.Core.Patterns.MatchError(kind);
    }

    function __impl__(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('for')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.Version.Requirement.__load(Elixir);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('target')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.Inspect.Version.Requirement.__load(Elixir);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('protocol')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.Inspect.__load(Elixir);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function inspect(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([new Map([[Symbol.for('__struct__'), {
                __MODULE__: Symbol.for('Elixir.Version.Requirement')
            }], [Symbol.for('source'), ElixirScript.Core.Patterns.variable('source')]]), ElixirScript.Core.Patterns.variable('_opts')], __function_args__, (source0, _opts0) => {
                return true;
            })) !== null) {
                let [source0, _opts0] = __arg_matches__;

                return '#Version.Requirement<' + (source0 + '>');
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    const __exports = {
        __impl__,
        inspect,
        __MODULE__: Symbol.for('Elixir.Inspect.Version.Requirement'),
        __info__
    };

    Elixir.Inspect.Version.Requirement.__exports = __exports

    return __exports;
}
ElixirScript.Core.Functions.build_namespace(Elixir, 'Elixir.List.Chars.List').__load = function(Elixir) {
    if (Elixir.List.Chars.List.__exports)
        return Elixir.List.Chars.List.__exports;

    function __info__(kind) {
        const __info__map__ = new Map([[Symbol.for('functions'), [new ElixirScript.Core.Tuple(Symbol.for('__impl__'), 1), new ElixirScript.Core.Tuple(Symbol.for('to_charlist'), 1)]], [Symbol.for('macros'), []], [Symbol.for('attributes'), [new ElixirScript.Core.Tuple(Symbol.for('vsn'), [116667083781951502455694490858886463313]), new ElixirScript.Core.Tuple(Symbol.for('behaviour'), [Elixir.List.Chars.__load(Elixir)]), new ElixirScript.Core.Tuple(Symbol.for('protocol_impl'), [new ElixirScript.Core.Tuple(Symbol.for('protocol'), Elixir.List.Chars.__load(Elixir)), new ElixirScript.Core.Tuple(Symbol.for('for'), Elixir.List.__load(Elixir))])]], [Symbol.for('compile'), [new ElixirScript.Core.Tuple(Symbol.for('options'), []), new ElixirScript.Core.Tuple(Symbol.for('version'), [55, 46, 49, 46, 50]), new ElixirScript.Core.Tuple(Symbol.for('source'), '/private/tmp/elixir-20170929-51947-wgj4qu/elixir-1.5.2/lib/elixir/lib/list/chars.ex')]], [Symbol.for('md5'), new ElixirScript.Core.BitString(ElixirScript.Core.BitString.integer(87), ElixirScript.Core.BitString.integer(197), ElixirScript.Core.BitString.integer(67), ElixirScript.Core.BitString.integer(85), ElixirScript.Core.BitString.integer(37), ElixirScript.Core.BitString.integer(202), ElixirScript.Core.BitString.integer(11), ElixirScript.Core.BitString.integer(95), ElixirScript.Core.BitString.integer(255), ElixirScript.Core.BitString.integer(202), ElixirScript.Core.BitString.integer(184), ElixirScript.Core.BitString.integer(228), ElixirScript.Core.BitString.integer(95), ElixirScript.Core.BitString.integer(42), ElixirScript.Core.BitString.integer(255), ElixirScript.Core.BitString.integer(81))], [Symbol.for('module'), Symbol.for('Elixir.List.Chars.List')]]);

        const value = __info__map__.get(kind);

        if (value !== null) {
            return value;
        }

        throw new ElixirScript.Core.Patterns.MatchError(kind);
    }

    function __impl__(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('for')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.List.__load(Elixir);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('target')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.List.Chars.List.__load(Elixir);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('protocol')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.List.Chars.__load(Elixir);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function to_charlist(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('list')], __function_args__, (list0) => {
                return true;
            })) !== null) {
                let [list0] = __arg_matches__;

                return list0;
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    const __exports = {
        __impl__,
        to_charlist,
        __MODULE__: Symbol.for('Elixir.List.Chars.List'),
        __info__
    };

    Elixir.List.Chars.List.__exports = __exports

    return __exports;
}
ElixirScript.Core.Functions.build_namespace(Elixir, 'Elixir.Inspect.Regex').__load = function(Elixir) {
    if (Elixir.Inspect.Regex.__exports)
        return Elixir.Inspect.Regex.__exports;

    function __info__(kind) {
        const __info__map__ = new Map([[Symbol.for('functions'), [new ElixirScript.Core.Tuple(Symbol.for('__impl__'), 1), new ElixirScript.Core.Tuple(Symbol.for('inspect'), 2)]], [Symbol.for('macros'), []], [Symbol.for('attributes'), [new ElixirScript.Core.Tuple(Symbol.for('vsn'), [54466767004534052728946950697046021916]), new ElixirScript.Core.Tuple(Symbol.for('behaviour'), [Elixir.Inspect.__load(Elixir)]), new ElixirScript.Core.Tuple(Symbol.for('protocol_impl'), [new ElixirScript.Core.Tuple(Symbol.for('protocol'), Elixir.Inspect.__load(Elixir)), new ElixirScript.Core.Tuple(Symbol.for('for'), Elixir.Regex.__load(Elixir))])]], [Symbol.for('compile'), [new ElixirScript.Core.Tuple(Symbol.for('options'), []), new ElixirScript.Core.Tuple(Symbol.for('version'), [55, 46, 49, 46, 50]), new ElixirScript.Core.Tuple(Symbol.for('source'), '/private/tmp/elixir-20170929-51947-wgj4qu/elixir-1.5.2/lib/elixir/lib/inspect.ex')]], [Symbol.for('md5'), new ElixirScript.Core.BitString(ElixirScript.Core.BitString.integer(40), ElixirScript.Core.BitString.integer(249), ElixirScript.Core.BitString.integer(234), ElixirScript.Core.BitString.integer(241), ElixirScript.Core.BitString.integer(250), ElixirScript.Core.BitString.integer(129), ElixirScript.Core.BitString.integer(131), ElixirScript.Core.BitString.integer(151), ElixirScript.Core.BitString.integer(44), ElixirScript.Core.BitString.integer(4), ElixirScript.Core.BitString.integer(168), ElixirScript.Core.BitString.integer(196), ElixirScript.Core.BitString.integer(192), ElixirScript.Core.BitString.integer(28), ElixirScript.Core.BitString.integer(151), ElixirScript.Core.BitString.integer(28))], [Symbol.for('module'), Symbol.for('Elixir.Inspect.Regex')]]);

        const value = __info__map__.get(kind);

        if (value !== null) {
            return value;
        }

        throw new ElixirScript.Core.Patterns.MatchError(kind);
    }

    function __impl__(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('for')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.Regex.__load(Elixir);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('target')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.Inspect.Regex.__load(Elixir);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('protocol')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.Inspect.__load(Elixir);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function escape(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('bin'), ElixirScript.Core.Patterns.variable('term')], __function_args__, (bin0, term0) => {
                return true;
            })) !== null) {
                let [bin0, term0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, bin0, [], term0));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.bitStringMatch(ElixirScript.Core.BitString.integer({
                'value': ElixirScript.Core.Patterns.variable()
            }), ElixirScript.Core.BitString.binary({
                'value': ElixirScript.Core.Patterns.variable()
            })), ElixirScript.Core.Patterns.variable('buf'), ElixirScript.Core.Patterns.variable('term')], __function_args__, (term0, rest0, buf0, term1) => {
                return true;
            })) !== null) {
                let [term0, rest0, buf0, term1] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, rest0, ElixirScript.Core.Functions.concat(buf0, [92, term1]), term1));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.bitStringMatch(ElixirScript.Core.BitString.integer(10), ElixirScript.Core.BitString.binary({
                'value': ElixirScript.Core.Patterns.variable()
            })), ElixirScript.Core.Patterns.variable('buf'), ElixirScript.Core.Patterns.variable('term')], __function_args__, (rest0, buf0, term0) => {
                return true;
            })) !== null) {
                let [rest0, buf0, term0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, rest0, ElixirScript.Core.Functions.concat(buf0, [92, 110]), term0));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.bitStringMatch(ElixirScript.Core.BitString.integer(13), ElixirScript.Core.BitString.binary({
                'value': ElixirScript.Core.Patterns.variable()
            })), ElixirScript.Core.Patterns.variable('buf'), ElixirScript.Core.Patterns.variable('term')], __function_args__, (rest0, buf0, term0) => {
                return true;
            })) !== null) {
                let [rest0, buf0, term0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, rest0, ElixirScript.Core.Functions.concat(buf0, [92, 114]), term0));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.bitStringMatch(ElixirScript.Core.BitString.integer(9), ElixirScript.Core.BitString.binary({
                'value': ElixirScript.Core.Patterns.variable()
            })), ElixirScript.Core.Patterns.variable('buf'), ElixirScript.Core.Patterns.variable('term')], __function_args__, (rest0, buf0, term0) => {
                return true;
            })) !== null) {
                let [rest0, buf0, term0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, rest0, ElixirScript.Core.Functions.concat(buf0, [92, 116]), term0));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.bitStringMatch(ElixirScript.Core.BitString.integer(11), ElixirScript.Core.BitString.binary({
                'value': ElixirScript.Core.Patterns.variable()
            })), ElixirScript.Core.Patterns.variable('buf'), ElixirScript.Core.Patterns.variable('term')], __function_args__, (rest0, buf0, term0) => {
                return true;
            })) !== null) {
                let [rest0, buf0, term0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, rest0, ElixirScript.Core.Functions.concat(buf0, [92, 118]), term0));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.bitStringMatch(ElixirScript.Core.BitString.integer(12), ElixirScript.Core.BitString.binary({
                'value': ElixirScript.Core.Patterns.variable()
            })), ElixirScript.Core.Patterns.variable('buf'), ElixirScript.Core.Patterns.variable('term')], __function_args__, (rest0, buf0, term0) => {
                return true;
            })) !== null) {
                let [rest0, buf0, term0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, rest0, ElixirScript.Core.Functions.concat(buf0, [92, 102]), term0));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.bitStringMatch(ElixirScript.Core.BitString.integer(7), ElixirScript.Core.BitString.binary({
                'value': ElixirScript.Core.Patterns.variable()
            })), ElixirScript.Core.Patterns.variable('buf'), ElixirScript.Core.Patterns.variable('term')], __function_args__, (rest0, buf0, term0) => {
                return true;
            })) !== null) {
                let [rest0, buf0, term0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, rest0, ElixirScript.Core.Functions.concat(buf0, [92, 97]), term0));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.bitStringMatch(ElixirScript.Core.BitString.utf8({
                'value': ElixirScript.Core.Patterns.variable()
            }), ElixirScript.Core.BitString.binary({
                'value': ElixirScript.Core.Patterns.variable()
            })), ElixirScript.Core.Patterns.variable('buf'), ElixirScript.Core.Patterns.variable('term')], __function_args__, (char0, rest0, buf0, term0) => {
                return ElixirScript.Core.erlang.is_integer(char0) && (char0 >= 32 && char0 <= 126) || ElixirScript.Core.erlang.is_integer(char0) && (char0 >= 160 && char0 <= 55295) || ElixirScript.Core.erlang.is_integer(char0) && (char0 >= 57344 && char0 <= 65533) || ElixirScript.Core.erlang.is_integer(char0) && (char0 >= 65536 && char0 <= 1114111);
            })) !== null) {
                let [char0, rest0, buf0, term0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, rest0, ElixirScript.Core.Functions.concat(buf0, new ElixirScript.Core.BitString(ElixirScript.Core.BitString.utf8(char0))), term0));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.bitStringMatch(ElixirScript.Core.BitString.integer({
                'value': ElixirScript.Core.Patterns.variable()
            }), ElixirScript.Core.BitString.binary({
                'value': ElixirScript.Core.Patterns.variable()
            })), ElixirScript.Core.Patterns.variable('buf'), ElixirScript.Core.Patterns.variable('term')], __function_args__, (char0, rest0, buf0, term0) => {
                return true;
            })) !== null) {
                let [char0, rest0, buf0, term0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, rest0, ElixirScript.Core.Functions.concat(buf0, Elixir.Inspect.BitString.__load(Elixir).escape_char(char0)), term0));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.bitStringMatch(), ElixirScript.Core.Patterns.variable('buf'), ElixirScript.Core.Patterns.variable('_')], __function_args__, (buf0) => {
                return true;
            })) !== null) {
                let [buf0] = __arg_matches__;

                return buf0;
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function inspect(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('regex'), ElixirScript.Core.Patterns.variable('opts')], __function_args__, (regex0, opts0) => {
                return true;
            })) !== null) {
                let [regex0, opts0] = __arg_matches__;

                const [source0] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.variable('source'), ElixirScript.Core.erlang.iolist_to_binary([[126, 114, 47], escape(ElixirScript.Core.Functions.call_property(regex0, 'source'), 47), 47, ElixirScript.Core.Functions.call_property(regex0, 'opts')]));

                return Elixir.Inspect.Algebra.__load(Elixir).color(source0, Symbol.for('regex'), opts0);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    const __exports = {
        __impl__,
        inspect,
        __MODULE__: Symbol.for('Elixir.Inspect.Regex'),
        __info__
    };

    Elixir.Inspect.Regex.__exports = __exports

    return __exports;
}
ElixirScript.Core.Functions.build_namespace(Elixir, 'Elixir.List.Chars.Integer').__load = function(Elixir) {
    if (Elixir.List.Chars.Integer.__exports)
        return Elixir.List.Chars.Integer.__exports;

    function __info__(kind) {
        const __info__map__ = new Map([[Symbol.for('functions'), [new ElixirScript.Core.Tuple(Symbol.for('__impl__'), 1), new ElixirScript.Core.Tuple(Symbol.for('to_charlist'), 1)]], [Symbol.for('macros'), []], [Symbol.for('attributes'), [new ElixirScript.Core.Tuple(Symbol.for('vsn'), [267871396003825265778117369145376652379]), new ElixirScript.Core.Tuple(Symbol.for('behaviour'), [Elixir.List.Chars.__load(Elixir)]), new ElixirScript.Core.Tuple(Symbol.for('protocol_impl'), [new ElixirScript.Core.Tuple(Symbol.for('protocol'), Elixir.List.Chars.__load(Elixir)), new ElixirScript.Core.Tuple(Symbol.for('for'), Elixir.Integer.__load(Elixir))])]], [Symbol.for('compile'), [new ElixirScript.Core.Tuple(Symbol.for('options'), []), new ElixirScript.Core.Tuple(Symbol.for('version'), [55, 46, 49, 46, 50]), new ElixirScript.Core.Tuple(Symbol.for('source'), '/private/tmp/elixir-20170929-51947-wgj4qu/elixir-1.5.2/lib/elixir/lib/list/chars.ex')]], [Symbol.for('md5'), new ElixirScript.Core.BitString(ElixirScript.Core.BitString.integer(201), ElixirScript.Core.BitString.integer(134), ElixirScript.Core.BitString.integer(39), ElixirScript.Core.BitString.integer(126), ElixirScript.Core.BitString.integer(243), ElixirScript.Core.BitString.integer(70), ElixirScript.Core.BitString.integer(213), ElixirScript.Core.BitString.integer(62), ElixirScript.Core.BitString.integer(111), ElixirScript.Core.BitString.integer(208), ElixirScript.Core.BitString.integer(175), ElixirScript.Core.BitString.integer(255), ElixirScript.Core.BitString.integer(100), ElixirScript.Core.BitString.integer(76), ElixirScript.Core.BitString.integer(60), ElixirScript.Core.BitString.integer(91))], [Symbol.for('module'), Symbol.for('Elixir.List.Chars.Integer')]]);

        const value = __info__map__.get(kind);

        if (value !== null) {
            return value;
        }

        throw new ElixirScript.Core.Patterns.MatchError(kind);
    }

    function __impl__(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('for')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.Integer.__load(Elixir);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('target')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.List.Chars.Integer.__load(Elixir);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('protocol')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.List.Chars.__load(Elixir);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function to_charlist(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('term')], __function_args__, (term0) => {
                return true;
            })) !== null) {
                let [term0] = __arg_matches__;

                return ElixirScript.Core.erlang.integer_to_list(term0);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    const __exports = {
        __impl__,
        to_charlist,
        __MODULE__: Symbol.for('Elixir.List.Chars.Integer'),
        __info__
    };

    Elixir.List.Chars.Integer.__exports = __exports

    return __exports;
}
ElixirScript.Core.Functions.build_namespace(Elixir, 'Elixir.List.Chars.Float').__load = function(Elixir) {
    if (Elixir.List.Chars.Float.__exports)
        return Elixir.List.Chars.Float.__exports;

    function __info__(kind) {
        const __info__map__ = new Map([[Symbol.for('functions'), [new ElixirScript.Core.Tuple(Symbol.for('__impl__'), 1), new ElixirScript.Core.Tuple(Symbol.for('to_charlist'), 1)]], [Symbol.for('macros'), []], [Symbol.for('attributes'), [new ElixirScript.Core.Tuple(Symbol.for('vsn'), [152098576277185758668463672553514752751]), new ElixirScript.Core.Tuple(Symbol.for('behaviour'), [Elixir.List.Chars.__load(Elixir)]), new ElixirScript.Core.Tuple(Symbol.for('protocol_impl'), [new ElixirScript.Core.Tuple(Symbol.for('protocol'), Elixir.List.Chars.__load(Elixir)), new ElixirScript.Core.Tuple(Symbol.for('for'), Elixir.Float.__load(Elixir))])]], [Symbol.for('compile'), [new ElixirScript.Core.Tuple(Symbol.for('options'), []), new ElixirScript.Core.Tuple(Symbol.for('version'), [55, 46, 49, 46, 50]), new ElixirScript.Core.Tuple(Symbol.for('source'), '/private/tmp/elixir-20170929-51947-wgj4qu/elixir-1.5.2/lib/elixir/lib/list/chars.ex')]], [Symbol.for('md5'), new ElixirScript.Core.BitString(ElixirScript.Core.BitString.integer(114), ElixirScript.Core.BitString.integer(109), ElixirScript.Core.BitString.integer(30), ElixirScript.Core.BitString.integer(201), ElixirScript.Core.BitString.integer(9), ElixirScript.Core.BitString.integer(157), ElixirScript.Core.BitString.integer(235), ElixirScript.Core.BitString.integer(99), ElixirScript.Core.BitString.integer(59), ElixirScript.Core.BitString.integer(4), ElixirScript.Core.BitString.integer(4), ElixirScript.Core.BitString.integer(105), ElixirScript.Core.BitString.integer(108), ElixirScript.Core.BitString.integer(8), ElixirScript.Core.BitString.integer(90), ElixirScript.Core.BitString.integer(239))], [Symbol.for('module'), Symbol.for('Elixir.List.Chars.Float')]]);

        const value = __info__map__.get(kind);

        if (value !== null) {
            return value;
        }

        throw new ElixirScript.Core.Patterns.MatchError(kind);
    }

    function __impl__(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('for')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.Float.__load(Elixir);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('target')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.List.Chars.Float.__load(Elixir);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('protocol')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.List.Chars.__load(Elixir);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function to_charlist(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('term')], __function_args__, (term0) => {
                return true;
            })) !== null) {
                let [term0] = __arg_matches__;

                return io_lib_format.fwrite_g(term0);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    const __exports = {
        __impl__,
        to_charlist,
        __MODULE__: Symbol.for('Elixir.List.Chars.Float'),
        __info__
    };

    Elixir.List.Chars.Float.__exports = __exports

    return __exports;
}
ElixirScript.Core.Functions.build_namespace(Elixir, 'Elixir.List.Chars.BitString').__load = function(Elixir) {
    if (Elixir.List.Chars.BitString.__exports)
        return Elixir.List.Chars.BitString.__exports;

    function __info__(kind) {
        const __info__map__ = new Map([[Symbol.for('functions'), [new ElixirScript.Core.Tuple(Symbol.for('__impl__'), 1), new ElixirScript.Core.Tuple(Symbol.for('to_charlist'), 1)]], [Symbol.for('macros'), []], [Symbol.for('attributes'), [new ElixirScript.Core.Tuple(Symbol.for('vsn'), [136829389199726793145777463112327990152]), new ElixirScript.Core.Tuple(Symbol.for('behaviour'), [Elixir.List.Chars.__load(Elixir)]), new ElixirScript.Core.Tuple(Symbol.for('protocol_impl'), [new ElixirScript.Core.Tuple(Symbol.for('protocol'), Elixir.List.Chars.__load(Elixir)), new ElixirScript.Core.Tuple(Symbol.for('for'), Elixir.BitString.__load(Elixir))])]], [Symbol.for('compile'), [new ElixirScript.Core.Tuple(Symbol.for('options'), []), new ElixirScript.Core.Tuple(Symbol.for('version'), [55, 46, 49, 46, 50]), new ElixirScript.Core.Tuple(Symbol.for('source'), '/private/tmp/elixir-20170929-51947-wgj4qu/elixir-1.5.2/lib/elixir/lib/list/chars.ex')]], [Symbol.for('md5'), new ElixirScript.Core.BitString(ElixirScript.Core.BitString.integer(102), ElixirScript.Core.BitString.integer(240), ElixirScript.Core.BitString.integer(97), ElixirScript.Core.BitString.integer(189), ElixirScript.Core.BitString.integer(50), ElixirScript.Core.BitString.integer(238), ElixirScript.Core.BitString.integer(163), ElixirScript.Core.BitString.integer(80), ElixirScript.Core.BitString.integer(182), ElixirScript.Core.BitString.integer(87), ElixirScript.Core.BitString.integer(142), ElixirScript.Core.BitString.integer(89), ElixirScript.Core.BitString.integer(119), ElixirScript.Core.BitString.integer(139), ElixirScript.Core.BitString.integer(139), ElixirScript.Core.BitString.integer(136))], [Symbol.for('module'), Symbol.for('Elixir.List.Chars.BitString')]]);

        const value = __info__map__.get(kind);

        if (value !== null) {
            return value;
        }

        throw new ElixirScript.Core.Patterns.MatchError(kind);
    }

    function __impl__(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('for')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.BitString.__load(Elixir);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('target')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.List.Chars.BitString.__load(Elixir);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('protocol')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.List.Chars.__load(Elixir);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function to_charlist(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('term')], __function_args__, (term0) => {
                return ElixirScript.Core.erlang.is_binary(term0);
            })) !== null) {
                let [term0] = __arg_matches__;

                return Elixir.String.__load(Elixir).to_charlist(term0);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('term')], __function_args__, (term0) => {
                return true;
            })) !== null) {
                let [term0] = __arg_matches__;

                return ElixirScript.Core.erlang.error(Elixir.Protocol.UndefinedError.__load(Elixir).exception([new ElixirScript.Core.Tuple(Symbol.for('protocol'), Elixir.List.Chars.__load(Elixir)), new ElixirScript.Core.Tuple(Symbol.for('value'), term0), new ElixirScript.Core.Tuple(Symbol.for('description'), 'cannot convert a bitstring to a charlist')]));
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    const __exports = {
        __impl__,
        to_charlist,
        __MODULE__: Symbol.for('Elixir.List.Chars.BitString'),
        __info__
    };

    Elixir.List.Chars.BitString.__exports = __exports

    return __exports;
}
ElixirScript.Core.Functions.build_namespace(Elixir, 'Elixir.Inspect.Tuple').__load = function(Elixir) {
    if (Elixir.Inspect.Tuple.__exports)
        return Elixir.Inspect.Tuple.__exports;

    function __info__(kind) {
        const __info__map__ = new Map([[Symbol.for('functions'), [new ElixirScript.Core.Tuple(Symbol.for('__impl__'), 1), new ElixirScript.Core.Tuple(Symbol.for('inspect'), 2)]], [Symbol.for('macros'), []], [Symbol.for('attributes'), [new ElixirScript.Core.Tuple(Symbol.for('vsn'), [99847598150591057635488514586983682340]), new ElixirScript.Core.Tuple(Symbol.for('behaviour'), [Elixir.Inspect.__load(Elixir)]), new ElixirScript.Core.Tuple(Symbol.for('protocol_impl'), [new ElixirScript.Core.Tuple(Symbol.for('protocol'), Elixir.Inspect.__load(Elixir)), new ElixirScript.Core.Tuple(Symbol.for('for'), Elixir.Tuple.__load(Elixir))])]], [Symbol.for('compile'), [new ElixirScript.Core.Tuple(Symbol.for('options'), []), new ElixirScript.Core.Tuple(Symbol.for('version'), [55, 46, 49, 46, 50]), new ElixirScript.Core.Tuple(Symbol.for('source'), '/private/tmp/elixir-20170929-51947-wgj4qu/elixir-1.5.2/lib/elixir/lib/inspect.ex')]], [Symbol.for('md5'), new ElixirScript.Core.BitString(ElixirScript.Core.BitString.integer(75), ElixirScript.Core.BitString.integer(29), ElixirScript.Core.BitString.integer(242), ElixirScript.Core.BitString.integer(170), ElixirScript.Core.BitString.integer(148), ElixirScript.Core.BitString.integer(90), ElixirScript.Core.BitString.integer(118), ElixirScript.Core.BitString.integer(217), ElixirScript.Core.BitString.integer(246), ElixirScript.Core.BitString.integer(201), ElixirScript.Core.BitString.integer(36), ElixirScript.Core.BitString.integer(218), ElixirScript.Core.BitString.integer(158), ElixirScript.Core.BitString.integer(110), ElixirScript.Core.BitString.integer(81), ElixirScript.Core.BitString.integer(36))], [Symbol.for('module'), Symbol.for('Elixir.Inspect.Tuple')]]);

        const value = __info__map__.get(kind);

        if (value !== null) {
            return value;
        }

        throw new ElixirScript.Core.Patterns.MatchError(kind);
    }

    function __impl__(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('for')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.Tuple.__load(Elixir);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('target')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.Inspect.Tuple.__load(Elixir);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('protocol')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.Inspect.__load(Elixir);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function inspect(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('tuple'), ElixirScript.Core.Patterns.variable('opts')], __function_args__, (tuple0, opts0) => {
                return true;
            })) !== null) {
                let [tuple0, opts0] = __arg_matches__;

                const [open0] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.variable('open'), Elixir.Inspect.Algebra.__load(Elixir).color('{', Symbol.for('tuple'), opts0));

                const [sep0] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.variable('sep'), Elixir.Inspect.Algebra.__load(Elixir).color(',', Symbol.for('tuple'), opts0));

                const [close0] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.variable('close'), Elixir.Inspect.Algebra.__load(Elixir).color('}', Symbol.for('tuple'), opts0));

                return Elixir.Inspect.Algebra.__load(Elixir).surround_many(open0, ElixirScript.Core.erlang.tuple_to_list(tuple0), close0, opts0, Elixir.Inspect.Algebra.__load(Elixir).to_doc, sep0);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    const __exports = {
        __impl__,
        inspect,
        __MODULE__: Symbol.for('Elixir.Inspect.Tuple'),
        __info__
    };

    Elixir.Inspect.Tuple.__exports = __exports

    return __exports;
}
ElixirScript.Core.Functions.build_namespace(Elixir, 'Elixir.List.Chars.Atom').__load = function(Elixir) {
    if (Elixir.List.Chars.Atom.__exports)
        return Elixir.List.Chars.Atom.__exports;

    function __info__(kind) {
        const __info__map__ = new Map([[Symbol.for('functions'), [new ElixirScript.Core.Tuple(Symbol.for('__impl__'), 1), new ElixirScript.Core.Tuple(Symbol.for('to_charlist'), 1)]], [Symbol.for('macros'), []], [Symbol.for('attributes'), [new ElixirScript.Core.Tuple(Symbol.for('vsn'), [97700795866564022573743187300595678234]), new ElixirScript.Core.Tuple(Symbol.for('behaviour'), [Elixir.List.Chars.__load(Elixir)]), new ElixirScript.Core.Tuple(Symbol.for('protocol_impl'), [new ElixirScript.Core.Tuple(Symbol.for('protocol'), Elixir.List.Chars.__load(Elixir)), new ElixirScript.Core.Tuple(Symbol.for('for'), Elixir.Atom.__load(Elixir))])]], [Symbol.for('compile'), [new ElixirScript.Core.Tuple(Symbol.for('options'), []), new ElixirScript.Core.Tuple(Symbol.for('version'), [55, 46, 49, 46, 50]), new ElixirScript.Core.Tuple(Symbol.for('source'), '/private/tmp/elixir-20170929-51947-wgj4qu/elixir-1.5.2/lib/elixir/lib/list/chars.ex')]], [Symbol.for('md5'), new ElixirScript.Core.BitString(ElixirScript.Core.BitString.integer(73), ElixirScript.Core.BitString.integer(128), ElixirScript.Core.BitString.integer(125), ElixirScript.Core.BitString.integer(36), ElixirScript.Core.BitString.integer(74), ElixirScript.Core.BitString.integer(46), ElixirScript.Core.BitString.integer(190), ElixirScript.Core.BitString.integer(20), ElixirScript.Core.BitString.integer(138), ElixirScript.Core.BitString.integer(6), ElixirScript.Core.BitString.integer(136), ElixirScript.Core.BitString.integer(116), ElixirScript.Core.BitString.integer(158), ElixirScript.Core.BitString.integer(42), ElixirScript.Core.BitString.integer(60), ElixirScript.Core.BitString.integer(26))], [Symbol.for('module'), Symbol.for('Elixir.List.Chars.Atom')]]);

        const value = __info__map__.get(kind);

        if (value !== null) {
            return value;
        }

        throw new ElixirScript.Core.Patterns.MatchError(kind);
    }

    function __impl__(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('for')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.Atom.__load(Elixir);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('target')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.List.Chars.Atom.__load(Elixir);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('protocol')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.List.Chars.__load(Elixir);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function to_charlist(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('atom')], __function_args__, (atom0) => {
                return true;
            })) !== null) {
                let [atom0] = __arg_matches__;

                return ElixirScript.Core.erlang.atom_to_list(atom0);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    const __exports = {
        __impl__,
        to_charlist,
        __MODULE__: Symbol.for('Elixir.List.Chars.Atom'),
        __info__
    };

    Elixir.List.Chars.Atom.__exports = __exports

    return __exports;
}
ElixirScript.Core.Functions.build_namespace(Elixir, 'Elixir.Inspect.Version').__load = function(Elixir) {
    if (Elixir.Inspect.Version.__exports)
        return Elixir.Inspect.Version.__exports;

    function __info__(kind) {
        const __info__map__ = new Map([[Symbol.for('functions'), [new ElixirScript.Core.Tuple(Symbol.for('__impl__'), 1), new ElixirScript.Core.Tuple(Symbol.for('inspect'), 2)]], [Symbol.for('macros'), []], [Symbol.for('attributes'), [new ElixirScript.Core.Tuple(Symbol.for('vsn'), [278869424129507832216941804935223599844]), new ElixirScript.Core.Tuple(Symbol.for('behaviour'), [Elixir.Inspect.__load(Elixir)]), new ElixirScript.Core.Tuple(Symbol.for('protocol_impl'), [new ElixirScript.Core.Tuple(Symbol.for('protocol'), Elixir.Inspect.__load(Elixir)), new ElixirScript.Core.Tuple(Symbol.for('for'), Elixir.Version.__load(Elixir))])]], [Symbol.for('compile'), [new ElixirScript.Core.Tuple(Symbol.for('options'), []), new ElixirScript.Core.Tuple(Symbol.for('version'), [55, 46, 49, 46, 50]), new ElixirScript.Core.Tuple(Symbol.for('source'), '/private/tmp/elixir-20170929-51947-wgj4qu/elixir-1.5.2/lib/elixir/lib/version.ex')]], [Symbol.for('md5'), new ElixirScript.Core.BitString(ElixirScript.Core.BitString.integer(209), ElixirScript.Core.BitString.integer(204), ElixirScript.Core.BitString.integer(76), ElixirScript.Core.BitString.integer(37), ElixirScript.Core.BitString.integer(183), ElixirScript.Core.BitString.integer(92), ElixirScript.Core.BitString.integer(93), ElixirScript.Core.BitString.integer(121), ElixirScript.Core.BitString.integer(58), ElixirScript.Core.BitString.integer(228), ElixirScript.Core.BitString.integer(42), ElixirScript.Core.BitString.integer(220), ElixirScript.Core.BitString.integer(203), ElixirScript.Core.BitString.integer(22), ElixirScript.Core.BitString.integer(98), ElixirScript.Core.BitString.integer(228))], [Symbol.for('module'), Symbol.for('Elixir.Inspect.Version')]]);

        const value = __info__map__.get(kind);

        if (value !== null) {
            return value;
        }

        throw new ElixirScript.Core.Patterns.MatchError(kind);
    }

    function __impl__(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('for')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.Version.__load(Elixir);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('target')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.Inspect.Version.__load(Elixir);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('protocol')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.Inspect.__load(Elixir);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function inspect(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('self'), ElixirScript.Core.Patterns.variable('_opts')], __function_args__, (self0, _opts0) => {
                return true;
            })) !== null) {
                let [self0, _opts0] = __arg_matches__;

                return '#Version<' + (Elixir.String.Chars.__load(Elixir).to_string(self0) + '>');
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    const __exports = {
        __impl__,
        inspect,
        __MODULE__: Symbol.for('Elixir.Inspect.Version'),
        __info__
    };

    Elixir.Inspect.Version.__exports = __exports

    return __exports;
}
ElixirScript.Core.Functions.build_namespace(Elixir, 'Elixir.Inspect.Time').__load = function(Elixir) {
    if (Elixir.Inspect.Time.__exports)
        return Elixir.Inspect.Time.__exports;

    function __info__(kind) {
        const __info__map__ = new Map([[Symbol.for('functions'), [new ElixirScript.Core.Tuple(Symbol.for('__impl__'), 1), new ElixirScript.Core.Tuple(Symbol.for('inspect'), 2)]], [Symbol.for('macros'), []], [Symbol.for('attributes'), [new ElixirScript.Core.Tuple(Symbol.for('vsn'), [50062585991976926825748319592550270632]), new ElixirScript.Core.Tuple(Symbol.for('behaviour'), [Elixir.Inspect.__load(Elixir)]), new ElixirScript.Core.Tuple(Symbol.for('protocol_impl'), [new ElixirScript.Core.Tuple(Symbol.for('protocol'), Elixir.Inspect.__load(Elixir)), new ElixirScript.Core.Tuple(Symbol.for('for'), Elixir.Time.__load(Elixir))])]], [Symbol.for('compile'), [new ElixirScript.Core.Tuple(Symbol.for('options'), []), new ElixirScript.Core.Tuple(Symbol.for('version'), [55, 46, 49, 46, 50]), new ElixirScript.Core.Tuple(Symbol.for('source'), '/private/tmp/elixir-20170929-51947-wgj4qu/elixir-1.5.2/lib/elixir/lib/calendar/time.ex')]], [Symbol.for('md5'), new ElixirScript.Core.BitString(ElixirScript.Core.BitString.integer(37), ElixirScript.Core.BitString.integer(169), ElixirScript.Core.BitString.integer(180), ElixirScript.Core.BitString.integer(14), ElixirScript.Core.BitString.integer(116), ElixirScript.Core.BitString.integer(16), ElixirScript.Core.BitString.integer(24), ElixirScript.Core.BitString.integer(209), ElixirScript.Core.BitString.integer(196), ElixirScript.Core.BitString.integer(108), ElixirScript.Core.BitString.integer(106), ElixirScript.Core.BitString.integer(250), ElixirScript.Core.BitString.integer(68), ElixirScript.Core.BitString.integer(112), ElixirScript.Core.BitString.integer(134), ElixirScript.Core.BitString.integer(168))], [Symbol.for('module'), Symbol.for('Elixir.Inspect.Time')]]);

        const value = __info__map__.get(kind);

        if (value !== null) {
            return value;
        }

        throw new ElixirScript.Core.Patterns.MatchError(kind);
    }

    function __impl__(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('for')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.Time.__load(Elixir);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('target')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.Inspect.Time.__load(Elixir);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('protocol')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.Inspect.__load(Elixir);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function inspect(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([new Map([[Symbol.for('hour'), ElixirScript.Core.Patterns.variable('hour')], [Symbol.for('minute'), ElixirScript.Core.Patterns.variable('minute')], [Symbol.for('second'), ElixirScript.Core.Patterns.variable('second')], [Symbol.for('microsecond'), ElixirScript.Core.Patterns.variable('microsecond')], [Symbol.for('calendar'), Elixir.Calendar.ISO.__load(Elixir)]]), ElixirScript.Core.Patterns.variable('_')], __function_args__, (hour0, minute0, second0, microsecond0) => {
                return true;
            })) !== null) {
                let [hour0, minute0, second0, microsecond0] = __arg_matches__;

                return '~T[' + (Elixir.Calendar.ISO.__load(Elixir).time_to_string(hour0, minute0, second0, microsecond0) + ']');
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('time'), ElixirScript.Core.Patterns.variable('opts')], __function_args__, (time0, opts0) => {
                return true;
            })) !== null) {
                let [time0, opts0] = __arg_matches__;

                return Elixir.Inspect.Any.__load(Elixir).inspect(time0, opts0);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    const __exports = {
        __impl__,
        inspect,
        __MODULE__: Symbol.for('Elixir.Inspect.Time'),
        __info__
    };

    Elixir.Inspect.Time.__exports = __exports

    return __exports;
}
ElixirScript.Core.Functions.build_namespace(Elixir, 'Elixir.Inspect.Stream').__load = function(Elixir) {
    if (Elixir.Inspect.Stream.__exports)
        return Elixir.Inspect.Stream.__exports;

    function __info__(kind) {
        const __info__map__ = new Map([[Symbol.for('functions'), [new ElixirScript.Core.Tuple(Symbol.for('__impl__'), 1), new ElixirScript.Core.Tuple(Symbol.for('inspect'), 2)]], [Symbol.for('macros'), []], [Symbol.for('attributes'), [new ElixirScript.Core.Tuple(Symbol.for('vsn'), [223821501470125537074652101154652896372]), new ElixirScript.Core.Tuple(Symbol.for('behaviour'), [Elixir.Inspect.__load(Elixir)]), new ElixirScript.Core.Tuple(Symbol.for('protocol_impl'), [new ElixirScript.Core.Tuple(Symbol.for('protocol'), Elixir.Inspect.__load(Elixir)), new ElixirScript.Core.Tuple(Symbol.for('for'), Elixir.Stream.__load(Elixir))])]], [Symbol.for('compile'), [new ElixirScript.Core.Tuple(Symbol.for('options'), []), new ElixirScript.Core.Tuple(Symbol.for('version'), [55, 46, 49, 46, 50]), new ElixirScript.Core.Tuple(Symbol.for('source'), '/private/tmp/elixir-20170929-51947-wgj4qu/elixir-1.5.2/lib/elixir/lib/stream.ex')]], [Symbol.for('md5'), new ElixirScript.Core.BitString(ElixirScript.Core.BitString.integer(168), ElixirScript.Core.BitString.integer(98), ElixirScript.Core.BitString.integer(116), ElixirScript.Core.BitString.integer(4), ElixirScript.Core.BitString.integer(31), ElixirScript.Core.BitString.integer(84), ElixirScript.Core.BitString.integer(211), ElixirScript.Core.BitString.integer(117), ElixirScript.Core.BitString.integer(242), ElixirScript.Core.BitString.integer(162), ElixirScript.Core.BitString.integer(175), ElixirScript.Core.BitString.integer(212), ElixirScript.Core.BitString.integer(190), ElixirScript.Core.BitString.integer(61), ElixirScript.Core.BitString.integer(60), ElixirScript.Core.BitString.integer(116))], [Symbol.for('module'), Symbol.for('Elixir.Inspect.Stream')]]);

        const value = __info__map__.get(kind);

        if (value !== null) {
            return value;
        }

        throw new ElixirScript.Core.Patterns.MatchError(kind);
    }

    function __impl__(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('for')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.Stream.__load(Elixir);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('target')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.Inspect.Stream.__load(Elixir);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('protocol')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.Inspect.__load(Elixir);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function inspect(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([new Map([[Symbol.for('enum'), ElixirScript.Core.Patterns.variable('enum')], [Symbol.for('funs'), ElixirScript.Core.Patterns.variable('funs')]]), ElixirScript.Core.Patterns.variable('opts')], __function_args__, (enum0, funs0, opts0) => {
                return true;
            })) !== null) {
                let [enum0, funs0, opts0] = __arg_matches__;

                const [inner0] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.variable('inner'), [new ElixirScript.Core.Tuple(Symbol.for('enum'), enum0), new ElixirScript.Core.Tuple(Symbol.for('funs'), Elixir.Enum.__load(Elixir).reverse(funs0))]);

                return Elixir.Inspect.Algebra.__load(Elixir).concat(['#Stream<', Elixir.Inspect.Algebra.__load(Elixir).to_doc(inner0, opts0), '>']);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    const __exports = {
        __impl__,
        inspect,
        __MODULE__: Symbol.for('Elixir.Inspect.Stream'),
        __info__
    };

    Elixir.Inspect.Stream.__exports = __exports

    return __exports;
}
ElixirScript.Core.Functions.build_namespace(Elixir, 'Elixir.Inspect.Function').__load = function(Elixir) {
    if (Elixir.Inspect.Function.__exports)
        return Elixir.Inspect.Function.__exports;

    function __info__(kind) {
        const __info__map__ = new Map([[Symbol.for('functions'), [new ElixirScript.Core.Tuple(Symbol.for('__impl__'), 1), new ElixirScript.Core.Tuple(Symbol.for('escape_name'), 1), new ElixirScript.Core.Tuple(Symbol.for('extract_anonymous_fun_parent'), 1), new ElixirScript.Core.Tuple(Symbol.for('inspect'), 2)]], [Symbol.for('macros'), []], [Symbol.for('attributes'), [new ElixirScript.Core.Tuple(Symbol.for('vsn'), [111031801136184886746620412315008453231]), new ElixirScript.Core.Tuple(Symbol.for('behaviour'), [Elixir.Inspect.__load(Elixir)]), new ElixirScript.Core.Tuple(Symbol.for('protocol_impl'), [new ElixirScript.Core.Tuple(Symbol.for('protocol'), Elixir.Inspect.__load(Elixir)), new ElixirScript.Core.Tuple(Symbol.for('for'), Elixir.Function.__load(Elixir))])]], [Symbol.for('compile'), [new ElixirScript.Core.Tuple(Symbol.for('options'), []), new ElixirScript.Core.Tuple(Symbol.for('version'), [55, 46, 49, 46, 50]), new ElixirScript.Core.Tuple(Symbol.for('source'), '/private/tmp/elixir-20170929-51947-wgj4qu/elixir-1.5.2/lib/elixir/lib/inspect.ex')]], [Symbol.for('md5'), new ElixirScript.Core.BitString(ElixirScript.Core.BitString.integer(83), ElixirScript.Core.BitString.integer(135), ElixirScript.Core.BitString.integer(242), ElixirScript.Core.BitString.integer(114), ElixirScript.Core.BitString.integer(113), ElixirScript.Core.BitString.integer(23), ElixirScript.Core.BitString.integer(94), ElixirScript.Core.BitString.integer(104), ElixirScript.Core.BitString.integer(149), ElixirScript.Core.BitString.integer(231), ElixirScript.Core.BitString.integer(203), ElixirScript.Core.BitString.integer(76), ElixirScript.Core.BitString.integer(33), ElixirScript.Core.BitString.integer(131), ElixirScript.Core.BitString.integer(74), ElixirScript.Core.BitString.integer(111))], [Symbol.for('module'), Symbol.for('Elixir.Inspect.Function')]]);

        const value = __info__map__.get(kind);

        if (value !== null) {
            return value;
        }

        throw new ElixirScript.Core.Patterns.MatchError(kind);
    }

    function __impl__(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('for')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.Function.__load(Elixir);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('target')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.Inspect.Function.__load(Elixir);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('protocol')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.Inspect.__load(Elixir);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function default_inspect(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('mod'), ElixirScript.Core.Patterns.variable('fun_info')], __function_args__, (mod0, fun_info0) => {
                return true;
            })) !== null) {
                let [mod0, fun_info0] = __arg_matches__;

                return '#Function<' + (Elixir.String.Chars.__load(Elixir).to_string(uniq(fun_info0)) + ('/' + (Elixir.String.Chars.__load(Elixir).to_string(Elixir.Access.__load(Elixir).get(fun_info0, Symbol.for('arity'))) + ' in '))) + (Elixir.String.Chars.__load(Elixir).to_string(Elixir.Inspect.Atom.__load(Elixir).inspect(mod0)) + (Elixir.String.Chars.__load(Elixir).to_string(extract_name(Elixir.Access.__load(Elixir).get(fun_info0, Symbol.for('name')))) + '>'));
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function escape_name(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('atom')], __function_args__, (atom0) => {
                return ElixirScript.Core.erlang.is_atom(atom0);
            })) !== null) {
                let [atom0] = __arg_matches__;

                const [string0] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.variable('string'), ElixirScript.Core.erlang.atom_to_binary(atom0, Symbol.for('utf8')));

                return ElixirScript.Core.Patterns.defmatch(ElixirScript.Core.Patterns.clause([Symbol.for('callable')], () => {
                    return string0;
                }, () => {
                    return true;
                }), ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.variable('type')], (type0) => {
                    return '"' + (string0 + '"');
                }, (type0) => {
                    return type0 === Symbol.for('alias') || type0 === Symbol.for('not_callable');
                }), ElixirScript.Core.Patterns.clause([Symbol.for('other')], () => {
                    const [escaped0] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                        values: [ElixirScript.Core.Patterns.variable('escaped'), ElixirScript.Core.Patterns.variable('_')]
                    }), Elixir.Inspect.BitString.__load(Elixir).escape(string0, 34));

                    const _ref1052455 = new ElixirScript.Core.Tuple(escaped0);

                    return ElixirScript.Core.erlang.iolist_to_binary([34, escaped0, 34]);
                }, () => {
                    return true;
                })).call(this, Elixir.Macro.__load(Elixir).classify_identifier(atom0));
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function extract_anonymous_fun_parent(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('atom')], __function_args__, (atom0) => {
                return ElixirScript.Core.erlang.is_atom(atom0);
            })) !== null) {
                let [atom0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, ElixirScript.Core.erlang.atom_to_binary(atom0, Symbol.for('utf8'))));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.bitStringMatch(ElixirScript.Core.BitString.binary('-'), ElixirScript.Core.BitString.binary({
                'value': ElixirScript.Core.Patterns.variable()
            }))], __function_args__, (rest0) => {
                return true;
            })) !== null) {
                let [rest0] = __arg_matches__;

                const [trailing0, reversed0] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.headTail(ElixirScript.Core.Patterns.variable('trailing'), ElixirScript.Core.Patterns.variable('reversed')), Elixir.Enum.__load(Elixir).reverse(Elixir.String.__load(Elixir).split(rest0, '/')));

                const _ref3871963 = [trailing0, reversed0];

                return ElixirScript.Core.Patterns.defmatch(ElixirScript.Core.Patterns.clause([[ElixirScript.Core.Patterns.variable('arity'), ElixirScript.Core.Patterns.variable('_inner'), ElixirScript.Core.Patterns.variable('_count'), '']], (arity0, _inner0, _count0) => {
                    return new ElixirScript.Core.Tuple(ElixirScript.Core.erlang.binary_to_atom(Elixir.Enum.__load(Elixir).join(Elixir.Enum.__load(Elixir).reverse(reversed0), '/'), Symbol.for('utf8')), arity0);
                }, (arity0, _inner0, _count0) => {
                    return true;
                }), ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.variable('_other')], (_other0) => {
                    return Symbol.for('error');
                }, (_other0) => {
                    return true;
                })).call(this, Elixir.String.__load(Elixir).split(trailing0, '-'));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('other')], __function_args__, (other0) => {
                return ElixirScript.Core.erlang.is_binary(other0);
            })) !== null) {
                let [other0] = __arg_matches__;

                return Symbol.for('error');
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function extract_name(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([[]], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return '';
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('name')], __function_args__, (name0) => {
                return true;
            })) !== null) {
                let [name0] = __arg_matches__;

                return ElixirScript.Core.Patterns.defmatch(ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                    values: [ElixirScript.Core.Patterns.variable('name'), ElixirScript.Core.Patterns.variable('arity')]
                })], (name1, arity0) => {
                    return '.' + (escape_name(name1) + ('/' + arity0));
                }, (name1, arity0) => {
                    return true;
                }), ElixirScript.Core.Patterns.clause([Symbol.for('error')], () => {
                    return '.' + escape_name(name0);
                }, () => {
                    return true;
                })).call(this, extract_anonymous_fun_parent(name0));
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function inspect(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('function'), ElixirScript.Core.Patterns.variable('_opts')], __function_args__, (__function__0, _opts0) => {
                return true;
            })) !== null) {
                let [__function__0, _opts0] = __arg_matches__;

                const [fun_info0] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.variable('fun_info'), ElixirScript.Core.erlang.fun_info(__function__0));

                const [mod0] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.variable('mod'), Elixir.Access.__load(Elixir).get(fun_info0, Symbol.for('module')));

                const [name0] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.variable('name'), Elixir.Access.__load(Elixir).get(fun_info0, Symbol.for('name')));

                return ElixirScript.Core.Patterns.defmatch(ElixirScript.Core.Patterns.clause([false], () => {
                    return ElixirScript.Core.Patterns.defmatch(ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.headTail([101, 108, 105, 120, 105, 114, 95, 99, 111, 109, 112, 105, 108, 101, 114, 95], ElixirScript.Core.Patterns.variable('_'))], () => {
                        return ElixirScript.Core.Patterns.defmatch(ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.variable('x576460752303360031')], (x5764607523033600310) => {
                            return default_inspect(mod0, fun_info0);
                        }, (x5764607523033600310) => {
                            return x5764607523033600310 === null || x5764607523033600310 === false;
                        }), ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.variable('_')], () => {
                            return '#Function<' + (Elixir.String.Chars.__load(Elixir).to_string(uniq(fun_info0)) + (' in file:' + (Elixir.String.Chars.__load(Elixir).to_string(ElixirScript.Core.Functions.call_property(mod0, '__RELATIVE__')) + '>')));
                        }, () => {
                            return true;
                        })).call(this, Elixir.Kernel.__load(Elixir).function_exported__qmark__(mod0, Symbol.for('__RELATIVE__'), 0));
                    }, () => {
                        return true;
                    }), ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.variable('_')], () => {
                        return default_inspect(mod0, fun_info0);
                    }, () => {
                        return true;
                    })).call(this, ElixirScript.Core.erlang.atom_to_list(mod0));
                }, () => {
                    return true;
                }), ElixirScript.Core.Patterns.clause([true], () => {
                    return '&' + (Elixir.String.Chars.__load(Elixir).to_string(Elixir.Inspect.Atom.__load(Elixir).inspect(mod0)) + ('.' + (Elixir.String.Chars.__load(Elixir).to_string(escape_name(name0)) + ('/' + Elixir.String.Chars.__load(Elixir).to_string(Elixir.Access.__load(Elixir).get(fun_info0, Symbol.for('arity')))))));
                }, () => {
                    return true;
                })).call(this, ElixirScript.Core.Patterns.defmatch(ElixirScript.Core.Patterns.clause([true], () => {
                    return ElixirScript.Core.erlang.equals(Elixir.Access.__load(Elixir).get(fun_info0, Symbol.for('env')), []);
                }, () => {
                    return true;
                }), ElixirScript.Core.Patterns.clause([false], () => {
                    return false;
                }, () => {
                    return true;
                })).call(this, ElixirScript.Core.erlang.equals(Elixir.Access.__load(Elixir).get(fun_info0, Symbol.for('type')), Symbol.for('external'))));
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function uniq(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('fun_info')], __function_args__, (fun_info0) => {
                return true;
            })) !== null) {
                let [fun_info0] = __arg_matches__;

                return ElixirScript.Core.erlang.integer_to_binary(Elixir.Access.__load(Elixir).get(fun_info0, Symbol.for('new_index'))) + ('.' + ElixirScript.Core.erlang.integer_to_binary(Elixir.Access.__load(Elixir).get(fun_info0, Symbol.for('uniq'))));
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    const __exports = {
        __impl__,
        escape_name,
        extract_anonymous_fun_parent,
        inspect,
        __MODULE__: Symbol.for('Elixir.Inspect.Function'),
        __info__
    };

    Elixir.Inspect.Function.__exports = __exports

    return __exports;
}
ElixirScript.Core.Functions.build_namespace(Elixir, 'Elixir.Inspect.Range').__load = function(Elixir) {
    if (Elixir.Inspect.Range.__exports)
        return Elixir.Inspect.Range.__exports;

    function __info__(kind) {
        const __info__map__ = new Map([[Symbol.for('functions'), [new ElixirScript.Core.Tuple(Symbol.for('__impl__'), 1), new ElixirScript.Core.Tuple(Symbol.for('inspect'), 2)]], [Symbol.for('macros'), []], [Symbol.for('attributes'), [new ElixirScript.Core.Tuple(Symbol.for('vsn'), [187315243111160685053933427387006138009]), new ElixirScript.Core.Tuple(Symbol.for('behaviour'), [Elixir.Inspect.__load(Elixir)]), new ElixirScript.Core.Tuple(Symbol.for('protocol_impl'), [new ElixirScript.Core.Tuple(Symbol.for('protocol'), Elixir.Inspect.__load(Elixir)), new ElixirScript.Core.Tuple(Symbol.for('for'), Elixir.Range.__load(Elixir))])]], [Symbol.for('compile'), [new ElixirScript.Core.Tuple(Symbol.for('options'), []), new ElixirScript.Core.Tuple(Symbol.for('version'), [55, 46, 49, 46, 50]), new ElixirScript.Core.Tuple(Symbol.for('source'), '/private/tmp/elixir-20170929-51947-wgj4qu/elixir-1.5.2/lib/elixir/lib/range.ex')]], [Symbol.for('md5'), new ElixirScript.Core.BitString(ElixirScript.Core.BitString.integer(140), ElixirScript.Core.BitString.integer(235), ElixirScript.Core.BitString.integer(154), ElixirScript.Core.BitString.integer(131), ElixirScript.Core.BitString.integer(224), ElixirScript.Core.BitString.integer(185), ElixirScript.Core.BitString.integer(49), ElixirScript.Core.BitString.integer(95), ElixirScript.Core.BitString.integer(52), ElixirScript.Core.BitString.integer(237), ElixirScript.Core.BitString.integer(187), ElixirScript.Core.BitString.integer(47), ElixirScript.Core.BitString.integer(163), ElixirScript.Core.BitString.integer(243), ElixirScript.Core.BitString.integer(54), ElixirScript.Core.BitString.integer(153))], [Symbol.for('module'), Symbol.for('Elixir.Inspect.Range')]]);

        const value = __info__map__.get(kind);

        if (value !== null) {
            return value;
        }

        throw new ElixirScript.Core.Patterns.MatchError(kind);
    }

    function __impl__(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('for')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.Range.__load(Elixir);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('target')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.Inspect.Range.__load(Elixir);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('protocol')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.Inspect.__load(Elixir);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function inspect(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([new Map([[Symbol.for('__struct__'), Elixir.Range.__load(Elixir)], [Symbol.for('first'), ElixirScript.Core.Patterns.variable('first')], [Symbol.for('last'), ElixirScript.Core.Patterns.variable('last')]]), ElixirScript.Core.Patterns.variable('opts')], __function_args__, (first0, last0, opts0) => {
                return true;
            })) !== null) {
                let [first0, last0, opts0] = __arg_matches__;

                return Elixir.Inspect.Algebra.__load(Elixir).concat([Elixir.Inspect.Algebra.__load(Elixir).to_doc(first0, opts0), '..', Elixir.Inspect.Algebra.__load(Elixir).to_doc(last0, opts0)]);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    const __exports = {
        __impl__,
        inspect,
        __MODULE__: Symbol.for('Elixir.Inspect.Range'),
        __info__
    };

    Elixir.Inspect.Range.__exports = __exports

    return __exports;
}
ElixirScript.Core.Functions.build_namespace(Elixir, 'Elixir.Inspect.Reference').__load = function(Elixir) {
    if (Elixir.Inspect.Reference.__exports)
        return Elixir.Inspect.Reference.__exports;

    function __info__(kind) {
        const __info__map__ = new Map([[Symbol.for('functions'), [new ElixirScript.Core.Tuple(Symbol.for('__impl__'), 1), new ElixirScript.Core.Tuple(Symbol.for('inspect'), 2)]], [Symbol.for('macros'), []], [Symbol.for('attributes'), [new ElixirScript.Core.Tuple(Symbol.for('vsn'), [287907469039511877351996807151014982446]), new ElixirScript.Core.Tuple(Symbol.for('behaviour'), [Elixir.Inspect.__load(Elixir)]), new ElixirScript.Core.Tuple(Symbol.for('protocol_impl'), [new ElixirScript.Core.Tuple(Symbol.for('protocol'), Elixir.Inspect.__load(Elixir)), new ElixirScript.Core.Tuple(Symbol.for('for'), Elixir.Reference.__load(Elixir))])]], [Symbol.for('compile'), [new ElixirScript.Core.Tuple(Symbol.for('options'), []), new ElixirScript.Core.Tuple(Symbol.for('version'), [55, 46, 49, 46, 50]), new ElixirScript.Core.Tuple(Symbol.for('source'), '/private/tmp/elixir-20170929-51947-wgj4qu/elixir-1.5.2/lib/elixir/lib/inspect.ex')]], [Symbol.for('md5'), new ElixirScript.Core.BitString(ElixirScript.Core.BitString.integer(216), ElixirScript.Core.BitString.integer(152), ElixirScript.Core.BitString.integer(246), ElixirScript.Core.BitString.integer(42), ElixirScript.Core.BitString.integer(87), ElixirScript.Core.BitString.integer(167), ElixirScript.Core.BitString.integer(72), ElixirScript.Core.BitString.integer(250), ElixirScript.Core.BitString.integer(94), ElixirScript.Core.BitString.integer(115), ElixirScript.Core.BitString.integer(131), ElixirScript.Core.BitString.integer(33), ElixirScript.Core.BitString.integer(181), ElixirScript.Core.BitString.integer(13), ElixirScript.Core.BitString.integer(51), ElixirScript.Core.BitString.integer(46))], [Symbol.for('module'), Symbol.for('Elixir.Inspect.Reference')]]);

        const value = __info__map__.get(kind);

        if (value !== null) {
            return value;
        }

        throw new ElixirScript.Core.Patterns.MatchError(kind);
    }

    function __impl__(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('for')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.Reference.__load(Elixir);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('target')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.Inspect.Reference.__load(Elixir);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('protocol')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.Inspect.__load(Elixir);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function inspect(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('ref'), ElixirScript.Core.Patterns.variable('_opts')], __function_args__, (ref0, _opts0) => {
                return true;
            })) !== null) {
                let [ref0, _opts0] = __arg_matches__;

                const [rest0] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.headTail([35, 82, 101, 102], ElixirScript.Core.Patterns.variable('rest')), ElixirScript.Core.erlang.ref_to_list(ref0));

                return '#Reference' + ElixirScript.Core.erlang.iolist_to_binary(rest0);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    const __exports = {
        __impl__,
        inspect,
        __MODULE__: Symbol.for('Elixir.Inspect.Reference'),
        __info__
    };

    Elixir.Inspect.Reference.__exports = __exports

    return __exports;
}
ElixirScript.Core.Functions.build_namespace(Elixir, 'Elixir.Kernel').__load = function(Elixir) {
    if (Elixir.Kernel.__exports)
        return Elixir.Kernel.__exports;

    function __info__(kind) {
        const __info__map__ = new Map([[Symbol.for('functions'), [new ElixirScript.Core.Tuple(Symbol.for('!='), 2), new ElixirScript.Core.Tuple(Symbol.for('!=='), 2), new ElixirScript.Core.Tuple(Symbol.for('*'), 2), new ElixirScript.Core.Tuple(Symbol.for('+'), 1), new ElixirScript.Core.Tuple(Symbol.for('+'), 2), new ElixirScript.Core.Tuple(Symbol.for('++'), 2), new ElixirScript.Core.Tuple(Symbol.for('-'), 1), new ElixirScript.Core.Tuple(Symbol.for('-'), 2), new ElixirScript.Core.Tuple(Symbol.for('--'), 2), new ElixirScript.Core.Tuple(Symbol.for('/'), 2), new ElixirScript.Core.Tuple(Symbol.for('<'), 2), new ElixirScript.Core.Tuple(Symbol.for('<='), 2), new ElixirScript.Core.Tuple(Symbol.for('=='), 2), new ElixirScript.Core.Tuple(Symbol.for('==='), 2), new ElixirScript.Core.Tuple(Symbol.for('=~'), 2), new ElixirScript.Core.Tuple(Symbol.for('>'), 2), new ElixirScript.Core.Tuple(Symbol.for('>='), 2), new ElixirScript.Core.Tuple(Symbol.for('abs'), 1), new ElixirScript.Core.Tuple(Symbol.for('apply'), 2), new ElixirScript.Core.Tuple(Symbol.for('apply'), 3), new ElixirScript.Core.Tuple(Symbol.for('binary_part'), 3), new ElixirScript.Core.Tuple(Symbol.for('bit_size'), 1), new ElixirScript.Core.Tuple(Symbol.for('byte_size'), 1), new ElixirScript.Core.Tuple(Symbol.for('div'), 2), new ElixirScript.Core.Tuple(Symbol.for('elem'), 2), new ElixirScript.Core.Tuple(Symbol.for('exit'), 1), new ElixirScript.Core.Tuple(Symbol.for('function_exported?'), 3), new ElixirScript.Core.Tuple(Symbol.for('get_and_update_in'), 3), new ElixirScript.Core.Tuple(Symbol.for('get_in'), 2), new ElixirScript.Core.Tuple(Symbol.for('hd'), 1), new ElixirScript.Core.Tuple(Symbol.for('inspect'), 1), new ElixirScript.Core.Tuple(Symbol.for('inspect'), 2), new ElixirScript.Core.Tuple(Symbol.for('is_atom'), 1), new ElixirScript.Core.Tuple(Symbol.for('is_binary'), 1), new ElixirScript.Core.Tuple(Symbol.for('is_bitstring'), 1), new ElixirScript.Core.Tuple(Symbol.for('is_boolean'), 1), new ElixirScript.Core.Tuple(Symbol.for('is_float'), 1), new ElixirScript.Core.Tuple(Symbol.for('is_function'), 1), new ElixirScript.Core.Tuple(Symbol.for('is_function'), 2), new ElixirScript.Core.Tuple(Symbol.for('is_integer'), 1), new ElixirScript.Core.Tuple(Symbol.for('is_list'), 1), new ElixirScript.Core.Tuple(Symbol.for('is_map'), 1), new ElixirScript.Core.Tuple(Symbol.for('is_number'), 1), new ElixirScript.Core.Tuple(Symbol.for('is_pid'), 1), new ElixirScript.Core.Tuple(Symbol.for('is_port'), 1), new ElixirScript.Core.Tuple(Symbol.for('is_reference'), 1), new ElixirScript.Core.Tuple(Symbol.for('is_tuple'), 1), new ElixirScript.Core.Tuple(Symbol.for('length'), 1), new ElixirScript.Core.Tuple(Symbol.for('macro_exported?'), 3), new ElixirScript.Core.Tuple(Symbol.for('make_ref'), 0), new ElixirScript.Core.Tuple(Symbol.for('map_size'), 1), new ElixirScript.Core.Tuple(Symbol.for('max'), 2), new ElixirScript.Core.Tuple(Symbol.for('min'), 2), new ElixirScript.Core.Tuple(Symbol.for('node'), 0), new ElixirScript.Core.Tuple(Symbol.for('node'), 1), new ElixirScript.Core.Tuple(Symbol.for('not'), 1), new ElixirScript.Core.Tuple(Symbol.for('pop_in'), 2), new ElixirScript.Core.Tuple(Symbol.for('put_elem'), 3), new ElixirScript.Core.Tuple(Symbol.for('put_in'), 3), new ElixirScript.Core.Tuple(Symbol.for('rem'), 2), new ElixirScript.Core.Tuple(Symbol.for('round'), 1), new ElixirScript.Core.Tuple(Symbol.for('self'), 0), new ElixirScript.Core.Tuple(Symbol.for('send'), 2), new ElixirScript.Core.Tuple(Symbol.for('spawn'), 1), new ElixirScript.Core.Tuple(Symbol.for('spawn'), 3), new ElixirScript.Core.Tuple(Symbol.for('spawn_link'), 1), new ElixirScript.Core.Tuple(Symbol.for('spawn_link'), 3), new ElixirScript.Core.Tuple(Symbol.for('spawn_monitor'), 1), new ElixirScript.Core.Tuple(Symbol.for('spawn_monitor'), 3), new ElixirScript.Core.Tuple(Symbol.for('struct'), 1), new ElixirScript.Core.Tuple(Symbol.for('struct'), 2), new ElixirScript.Core.Tuple(Symbol.for('struct!'), 1), new ElixirScript.Core.Tuple(Symbol.for('struct!'), 2), new ElixirScript.Core.Tuple(Symbol.for('throw'), 1), new ElixirScript.Core.Tuple(Symbol.for('tl'), 1), new ElixirScript.Core.Tuple(Symbol.for('trunc'), 1), new ElixirScript.Core.Tuple(Symbol.for('tuple_size'), 1), new ElixirScript.Core.Tuple(Symbol.for('update_in'), 3)]], [Symbol.for('macros'), [new ElixirScript.Core.Tuple(Symbol.for('!'), 1), new ElixirScript.Core.Tuple(Symbol.for('&&'), 2), new ElixirScript.Core.Tuple(Symbol.for('..'), 2), new ElixirScript.Core.Tuple(Symbol.for('<>'), 2), new ElixirScript.Core.Tuple(Symbol.for('@'), 1), new ElixirScript.Core.Tuple(Symbol.for('alias!'), 1), new ElixirScript.Core.Tuple(Symbol.for('and'), 2), new ElixirScript.Core.Tuple(Symbol.for('binding'), 0), new ElixirScript.Core.Tuple(Symbol.for('binding'), 1), new ElixirScript.Core.Tuple(Symbol.for('def'), 1), new ElixirScript.Core.Tuple(Symbol.for('def'), 2), new ElixirScript.Core.Tuple(Symbol.for('defdelegate'), 2), new ElixirScript.Core.Tuple(Symbol.for('defexception'), 1), new ElixirScript.Core.Tuple(Symbol.for('defimpl'), 2), new ElixirScript.Core.Tuple(Symbol.for('defimpl'), 3), new ElixirScript.Core.Tuple(Symbol.for('defmacro'), 1), new ElixirScript.Core.Tuple(Symbol.for('defmacro'), 2), new ElixirScript.Core.Tuple(Symbol.for('defmacrop'), 1), new ElixirScript.Core.Tuple(Symbol.for('defmacrop'), 2), new ElixirScript.Core.Tuple(Symbol.for('defmodule'), 2), new ElixirScript.Core.Tuple(Symbol.for('defoverridable'), 1), new ElixirScript.Core.Tuple(Symbol.for('defp'), 1), new ElixirScript.Core.Tuple(Symbol.for('defp'), 2), new ElixirScript.Core.Tuple(Symbol.for('defprotocol'), 2), new ElixirScript.Core.Tuple(Symbol.for('defstruct'), 1), new ElixirScript.Core.Tuple(Symbol.for('destructure'), 2), new ElixirScript.Core.Tuple(Symbol.for('get_and_update_in'), 2), new ElixirScript.Core.Tuple(Symbol.for('if'), 2), new ElixirScript.Core.Tuple(Symbol.for('in'), 2), new ElixirScript.Core.Tuple(Symbol.for('is_nil'), 1), new ElixirScript.Core.Tuple(Symbol.for('match?'), 2), new ElixirScript.Core.Tuple(Symbol.for('or'), 2), new ElixirScript.Core.Tuple(Symbol.for('pop_in'), 1), new ElixirScript.Core.Tuple(Symbol.for('put_in'), 2), new ElixirScript.Core.Tuple(Symbol.for('raise'), 1), new ElixirScript.Core.Tuple(Symbol.for('raise'), 2), new ElixirScript.Core.Tuple(Symbol.for('reraise'), 2), new ElixirScript.Core.Tuple(Symbol.for('reraise'), 3), new ElixirScript.Core.Tuple(Symbol.for('sigil_C'), 2), new ElixirScript.Core.Tuple(Symbol.for('sigil_D'), 2), new ElixirScript.Core.Tuple(Symbol.for('sigil_N'), 2), new ElixirScript.Core.Tuple(Symbol.for('sigil_R'), 2), new ElixirScript.Core.Tuple(Symbol.for('sigil_S'), 2), new ElixirScript.Core.Tuple(Symbol.for('sigil_T'), 2), new ElixirScript.Core.Tuple(Symbol.for('sigil_W'), 2), new ElixirScript.Core.Tuple(Symbol.for('sigil_c'), 2), new ElixirScript.Core.Tuple(Symbol.for('sigil_r'), 2), new ElixirScript.Core.Tuple(Symbol.for('sigil_s'), 2), new ElixirScript.Core.Tuple(Symbol.for('sigil_w'), 2), new ElixirScript.Core.Tuple(Symbol.for('to_char_list'), 1), new ElixirScript.Core.Tuple(Symbol.for('to_charlist'), 1), new ElixirScript.Core.Tuple(Symbol.for('to_string'), 1), new ElixirScript.Core.Tuple(Symbol.for('unless'), 2), new ElixirScript.Core.Tuple(Symbol.for('update_in'), 2), new ElixirScript.Core.Tuple(Symbol.for('use'), 1), new ElixirScript.Core.Tuple(Symbol.for('use'), 2), new ElixirScript.Core.Tuple(Symbol.for('var!'), 1), new ElixirScript.Core.Tuple(Symbol.for('var!'), 2), new ElixirScript.Core.Tuple(Symbol.for('|>'), 2), new ElixirScript.Core.Tuple(Symbol.for('||'), 2)]], [Symbol.for('attributes'), [new ElixirScript.Core.Tuple(Symbol.for('vsn'), [172364352636734575967515133400859185304])]], [Symbol.for('compile'), [new ElixirScript.Core.Tuple(Symbol.for('options'), []), new ElixirScript.Core.Tuple(Symbol.for('version'), [55, 46, 49, 46, 50]), new ElixirScript.Core.Tuple(Symbol.for('source'), '/private/tmp/elixir-20170929-51947-wgj4qu/elixir-1.5.2/lib/elixir/lib/kernel.ex')]], [Symbol.for('md5'), new ElixirScript.Core.BitString(ElixirScript.Core.BitString.integer(129), ElixirScript.Core.BitString.integer(172), ElixirScript.Core.BitString.integer(42), ElixirScript.Core.BitString.integer(179), ElixirScript.Core.BitString.integer(251), ElixirScript.Core.BitString.integer(72), ElixirScript.Core.BitString.integer(45), ElixirScript.Core.BitString.integer(106), ElixirScript.Core.BitString.integer(18), ElixirScript.Core.BitString.integer(103), ElixirScript.Core.BitString.integer(42), ElixirScript.Core.BitString.integer(217), ElixirScript.Core.BitString.integer(156), ElixirScript.Core.BitString.integer(66), ElixirScript.Core.BitString.integer(144), ElixirScript.Core.BitString.integer(152))], [Symbol.for('module'), Symbol.for('Elixir.Kernel')]]);

        const value = __info__map__.get(kind);

        if (value !== null) {
            return value;
        }

        throw new ElixirScript.Core.Patterns.MatchError(kind);
    }

    function function_exported__qmark__(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('module'), ElixirScript.Core.Patterns.variable('function'), ElixirScript.Core.Patterns.variable('arity')], __function_args__, (module0, __function__0, arity0) => {
                return true;
            })) !== null) {
                let [module0, __function__0, arity0] = __arg_matches__;

                return ElixirScript.Core.erlang.function_exported(module0, __function__0, arity0);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function inspect(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('x0')], __function_args__, (x00) => {
                return true;
            })) !== null) {
                let [x00] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, x00, []));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('term'), ElixirScript.Core.Patterns.variable('opts')], __function_args__, (term0, opts0) => {
                return ElixirScript.Core.erlang.is_list(opts0);
            })) !== null) {
                let [term0, opts0] = __arg_matches__;

                const [opts1] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.variable('opts'), Elixir.Kernel.__load(Elixir).struct(Elixir.Inspect.Opts.__load(Elixir), opts0));

                const [limit0] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.variable('limit'), ElixirScript.Core.Patterns.defmatch(ElixirScript.Core.Patterns.clause([true], () => {
                    return ElixirScript.Core.Functions.call_property(opts1, 'width');
                }, () => {
                    return true;
                }), ElixirScript.Core.Patterns.clause([false], () => {
                    return Symbol.for('infinity');
                }, () => {
                    return true;
                })).call(this, ElixirScript.Core.Functions.call_property(opts1, 'pretty')));

                return ElixirScript.Core.erlang.iolist_to_binary(Elixir.Inspect.Algebra.__load(Elixir).format(Elixir.Inspect.Algebra.__load(Elixir).to_doc(term0, opts1), limit0));
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function struct(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('struct'), ElixirScript.Core.Patterns.variable('fields')], __function_args__, (struct0, fields0) => {
                return true;
            })) !== null) {
                let [struct0, fields0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, struct0, fields0, (...__function_args__) => {
                    function recur(...__function_args__) {
                        let __arg_matches__ = null;

                        if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                            values: [ElixirScript.Core.Patterns.variable('key'), ElixirScript.Core.Patterns.variable('val')]
                        }), ElixirScript.Core.Patterns.variable('acc')], __function_args__, (key0, val0, acc0) => {
                            return true;
                        })) !== null) {
                            let [key0, val0, acc0] = __arg_matches__;

                            return ElixirScript.Core.Patterns.defmatch(ElixirScript.Core.Patterns.clause([true], () => {
                                return ElixirScript.Core.maps.put(key0, val0, acc0);
                            }, () => {
                                return true;
                            }), ElixirScript.Core.Patterns.clause([false], () => {
                                return acc0;
                            }, () => {
                                return true;
                            })).call(this, ElixirScript.Core.Patterns.defmatch(ElixirScript.Core.Patterns.clause([true], () => {
                                return key0 != Symbol.for('__struct__');
                            }, () => {
                                return true;
                            }), ElixirScript.Core.Patterns.clause([false], () => {
                                return false;
                            }, () => {
                                return true;
                            }), ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.variable('other')], (other0) => {
                                return ElixirScript.Core.erlang.error(new ElixirScript.Core.Tuple(Symbol.for('badbool'), Symbol.for('and'), other0));
                            }, (other0) => {
                                return true;
                            })).call(this, ElixirScript.Core.maps.is_key(key0, acc0)));
                        }

                        throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
                    }

                    return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
                }));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('struct'), [], ElixirScript.Core.Patterns.variable('_fun')], __function_args__, (struct0, _fun0) => {
                return ElixirScript.Core.erlang.is_atom(struct0);
            })) !== null) {
                let [struct0, _fun0] = __arg_matches__;

                return ElixirScript.Core.Functions.call_property(struct0, '__struct__');
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('struct'), ElixirScript.Core.Patterns.variable('fields'), ElixirScript.Core.Patterns.variable('fun')], __function_args__, (struct0, fields0, fun0) => {
                return ElixirScript.Core.erlang.is_atom(struct0);
            })) !== null) {
                let [struct0, fields0, fun0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, ElixirScript.Core.Functions.call_property(struct0, '__struct__'), fields0, fun0));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.capture(new Map([[Symbol.for('__struct__'), ElixirScript.Core.Patterns.variable('_')]])), [], ElixirScript.Core.Patterns.variable('_fun')], __function_args__, (struct0, _fun0) => {
                return true;
            })) !== null) {
                let [struct0, _fun0] = __arg_matches__;

                return struct0;
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.capture(new Map([[Symbol.for('__struct__'), ElixirScript.Core.Patterns.variable('_')]])), ElixirScript.Core.Patterns.variable('fields'), ElixirScript.Core.Patterns.variable('fun')], __function_args__, (struct0, fields0, fun0) => {
                return true;
            })) !== null) {
                let [struct0, fields0, fun0] = __arg_matches__;

                return Elixir.Enum.__load(Elixir).reduce(fields0, struct0, fun0);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function struct__emark__(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('struct'), ElixirScript.Core.Patterns.variable('fields')], __function_args__, (struct0, fields0) => {
                return ElixirScript.Core.erlang.is_atom(struct0);
            })) !== null) {
                let [struct0, fields0] = __arg_matches__;

                return struct0.__struct__(fields0);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('struct'), ElixirScript.Core.Patterns.variable('fields')], __function_args__, (struct0, fields0) => {
                return ElixirScript.Core.erlang.is_map(struct0);
            })) !== null) {
                let [struct0, fields0] = __arg_matches__;

                return struct(struct0, fields0, (...__function_args__) => {
                    function recur(...__function_args__) {
                        let __arg_matches__ = null;

                        if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                            values: [Symbol.for('__struct__'), ElixirScript.Core.Patterns.variable('_')]
                        }), ElixirScript.Core.Patterns.variable('acc')], __function_args__, (acc0) => {
                            return true;
                        })) !== null) {
                            let [acc0] = __arg_matches__;

                            return acc0;
                        } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                            values: [ElixirScript.Core.Patterns.variable('key'), ElixirScript.Core.Patterns.variable('val')]
                        }), ElixirScript.Core.Patterns.variable('acc')], __function_args__, (key0, val0, acc0) => {
                            return true;
                        })) !== null) {
                            let [key0, val0, acc0] = __arg_matches__;

                            return ElixirScript.Core.maps.update(key0, val0, acc0);
                        }

                        throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
                    }

                    return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
                });
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    const __exports = {
        function_exported__qmark__,
        inspect,
        struct,
        struct__emark__,
        __MODULE__: Symbol.for('Elixir.Kernel'),
        __info__
    };

    Elixir.Kernel.__exports = __exports

    return __exports;
}
ElixirScript.Core.Functions.build_namespace(Elixir, 'Elixir.Inspect.Port').__load = function(Elixir) {
    if (Elixir.Inspect.Port.__exports)
        return Elixir.Inspect.Port.__exports;

    function __info__(kind) {
        const __info__map__ = new Map([[Symbol.for('functions'), [new ElixirScript.Core.Tuple(Symbol.for('__impl__'), 1), new ElixirScript.Core.Tuple(Symbol.for('inspect'), 2)]], [Symbol.for('macros'), []], [Symbol.for('attributes'), [new ElixirScript.Core.Tuple(Symbol.for('vsn'), [37068664154452575815414955260239476135]), new ElixirScript.Core.Tuple(Symbol.for('behaviour'), [Elixir.Inspect.__load(Elixir)]), new ElixirScript.Core.Tuple(Symbol.for('protocol_impl'), [new ElixirScript.Core.Tuple(Symbol.for('protocol'), Elixir.Inspect.__load(Elixir)), new ElixirScript.Core.Tuple(Symbol.for('for'), Elixir.Port.__load(Elixir))])]], [Symbol.for('compile'), [new ElixirScript.Core.Tuple(Symbol.for('options'), []), new ElixirScript.Core.Tuple(Symbol.for('version'), [55, 46, 49, 46, 50]), new ElixirScript.Core.Tuple(Symbol.for('source'), '/private/tmp/elixir-20170929-51947-wgj4qu/elixir-1.5.2/lib/elixir/lib/inspect.ex')]], [Symbol.for('md5'), new ElixirScript.Core.BitString(ElixirScript.Core.BitString.integer(27), ElixirScript.Core.BitString.integer(227), ElixirScript.Core.BitString.integer(42), ElixirScript.Core.BitString.integer(63), ElixirScript.Core.BitString.integer(93), ElixirScript.Core.BitString.integer(10), ElixirScript.Core.BitString.integer(138), ElixirScript.Core.BitString.integer(148), ElixirScript.Core.BitString.integer(253), ElixirScript.Core.BitString.integer(71), ElixirScript.Core.BitString.integer(104), ElixirScript.Core.BitString.integer(191), ElixirScript.Core.BitString.integer(24), ElixirScript.Core.BitString.integer(252), ElixirScript.Core.BitString.integer(245), ElixirScript.Core.BitString.integer(167))], [Symbol.for('module'), Symbol.for('Elixir.Inspect.Port')]]);

        const value = __info__map__.get(kind);

        if (value !== null) {
            return value;
        }

        throw new ElixirScript.Core.Patterns.MatchError(kind);
    }

    function __impl__(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('for')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.Port.__load(Elixir);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('target')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.Inspect.Port.__load(Elixir);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('protocol')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.Inspect.__load(Elixir);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function inspect(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('port'), ElixirScript.Core.Patterns.variable('_opts')], __function_args__, (port0, _opts0) => {
                return true;
            })) !== null) {
                let [port0, _opts0] = __arg_matches__;

                return ElixirScript.Core.erlang.iolist_to_binary(ElixirScript.Core.erlang.port_to_list(port0));
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    const __exports = {
        __impl__,
        inspect,
        __MODULE__: Symbol.for('Elixir.Inspect.Port'),
        __info__
    };

    Elixir.Inspect.Port.__exports = __exports

    return __exports;
}
ElixirScript.Core.Functions.build_namespace(Elixir, 'Elixir.Inspect.NaiveDateTime').__load = function(Elixir) {
    if (Elixir.Inspect.NaiveDateTime.__exports)
        return Elixir.Inspect.NaiveDateTime.__exports;

    function __info__(kind) {
        const __info__map__ = new Map([[Symbol.for('functions'), [new ElixirScript.Core.Tuple(Symbol.for('__impl__'), 1), new ElixirScript.Core.Tuple(Symbol.for('inspect'), 2)]], [Symbol.for('macros'), []], [Symbol.for('attributes'), [new ElixirScript.Core.Tuple(Symbol.for('vsn'), [246267717907583518262980087234714940619]), new ElixirScript.Core.Tuple(Symbol.for('behaviour'), [Elixir.Inspect.__load(Elixir)]), new ElixirScript.Core.Tuple(Symbol.for('protocol_impl'), [new ElixirScript.Core.Tuple(Symbol.for('protocol'), Elixir.Inspect.__load(Elixir)), new ElixirScript.Core.Tuple(Symbol.for('for'), Elixir.NaiveDateTime.__load(Elixir))])]], [Symbol.for('compile'), [new ElixirScript.Core.Tuple(Symbol.for('options'), []), new ElixirScript.Core.Tuple(Symbol.for('version'), [55, 46, 49, 46, 50]), new ElixirScript.Core.Tuple(Symbol.for('source'), '/private/tmp/elixir-20170929-51947-wgj4qu/elixir-1.5.2/lib/elixir/lib/calendar/naive_datetime.ex')]], [Symbol.for('md5'), new ElixirScript.Core.BitString(ElixirScript.Core.BitString.integer(185), ElixirScript.Core.BitString.integer(69), ElixirScript.Core.BitString.integer(111), ElixirScript.Core.BitString.integer(238), ElixirScript.Core.BitString.integer(1), ElixirScript.Core.BitString.integer(47), ElixirScript.Core.BitString.integer(40), ElixirScript.Core.BitString.integer(82), ElixirScript.Core.BitString.integer(117), ElixirScript.Core.BitString.integer(40), ElixirScript.Core.BitString.integer(193), ElixirScript.Core.BitString.integer(58), ElixirScript.Core.BitString.integer(89), ElixirScript.Core.BitString.integer(44), ElixirScript.Core.BitString.integer(52), ElixirScript.Core.BitString.integer(203))], [Symbol.for('module'), Symbol.for('Elixir.Inspect.NaiveDateTime')]]);

        const value = __info__map__.get(kind);

        if (value !== null) {
            return value;
        }

        throw new ElixirScript.Core.Patterns.MatchError(kind);
    }

    function __impl__(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('for')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.NaiveDateTime.__load(Elixir);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('target')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.Inspect.NaiveDateTime.__load(Elixir);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('protocol')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.Inspect.__load(Elixir);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function inspect(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([new Map([[Symbol.for('calendar'), Elixir.Calendar.ISO.__load(Elixir)], [Symbol.for('year'), ElixirScript.Core.Patterns.variable('year')], [Symbol.for('month'), ElixirScript.Core.Patterns.variable('month')], [Symbol.for('day'), ElixirScript.Core.Patterns.variable('day')], [Symbol.for('hour'), ElixirScript.Core.Patterns.variable('hour')], [Symbol.for('minute'), ElixirScript.Core.Patterns.variable('minute')], [Symbol.for('second'), ElixirScript.Core.Patterns.variable('second')], [Symbol.for('microsecond'), ElixirScript.Core.Patterns.variable('microsecond')]]), ElixirScript.Core.Patterns.variable('_')], __function_args__, (year0, month0, day0, hour0, minute0, second0, microsecond0) => {
                return true;
            })) !== null) {
                let [year0, month0, day0, hour0, minute0, second0, microsecond0] = __arg_matches__;

                const [formatted0] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.variable('formatted'), Elixir.Calendar.ISO.__load(Elixir).naive_datetime_to_string(year0, month0, day0, hour0, minute0, second0, microsecond0));

                return '~N[' + (formatted0 + ']');
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('naive'), ElixirScript.Core.Patterns.variable('opts')], __function_args__, (naive0, opts0) => {
                return true;
            })) !== null) {
                let [naive0, opts0] = __arg_matches__;

                return Elixir.Inspect.Any.__load(Elixir).inspect(naive0, opts0);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    const __exports = {
        __impl__,
        inspect,
        __MODULE__: Symbol.for('Elixir.Inspect.NaiveDateTime'),
        __info__
    };

    Elixir.Inspect.NaiveDateTime.__exports = __exports

    return __exports;
}
ElixirScript.Core.Functions.build_namespace(Elixir, 'Elixir.Inspect.PID').__load = function(Elixir) {
    if (Elixir.Inspect.PID.__exports)
        return Elixir.Inspect.PID.__exports;

    function __info__(kind) {
        const __info__map__ = new Map([[Symbol.for('functions'), [new ElixirScript.Core.Tuple(Symbol.for('__impl__'), 1), new ElixirScript.Core.Tuple(Symbol.for('inspect'), 2)]], [Symbol.for('macros'), []], [Symbol.for('attributes'), [new ElixirScript.Core.Tuple(Symbol.for('vsn'), [273851053481387852377627181786082946915]), new ElixirScript.Core.Tuple(Symbol.for('behaviour'), [Elixir.Inspect.__load(Elixir)]), new ElixirScript.Core.Tuple(Symbol.for('protocol_impl'), [new ElixirScript.Core.Tuple(Symbol.for('protocol'), Elixir.Inspect.__load(Elixir)), new ElixirScript.Core.Tuple(Symbol.for('for'), Elixir.PID.__load(Elixir))])]], [Symbol.for('compile'), [new ElixirScript.Core.Tuple(Symbol.for('options'), []), new ElixirScript.Core.Tuple(Symbol.for('version'), [55, 46, 49, 46, 50]), new ElixirScript.Core.Tuple(Symbol.for('source'), '/private/tmp/elixir-20170929-51947-wgj4qu/elixir-1.5.2/lib/elixir/lib/inspect.ex')]], [Symbol.for('md5'), new ElixirScript.Core.BitString(ElixirScript.Core.BitString.integer(206), ElixirScript.Core.BitString.integer(5), ElixirScript.Core.BitString.integer(203), ElixirScript.Core.BitString.integer(95), ElixirScript.Core.BitString.integer(30), ElixirScript.Core.BitString.integer(242), ElixirScript.Core.BitString.integer(88), ElixirScript.Core.BitString.integer(128), ElixirScript.Core.BitString.integer(64), ElixirScript.Core.BitString.integer(211), ElixirScript.Core.BitString.integer(217), ElixirScript.Core.BitString.integer(20), ElixirScript.Core.BitString.integer(234), ElixirScript.Core.BitString.integer(213), ElixirScript.Core.BitString.integer(175), ElixirScript.Core.BitString.integer(99))], [Symbol.for('module'), Symbol.for('Elixir.Inspect.PID')]]);

        const value = __info__map__.get(kind);

        if (value !== null) {
            return value;
        }

        throw new ElixirScript.Core.Patterns.MatchError(kind);
    }

    function __impl__(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('for')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.PID.__load(Elixir);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('target')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.Inspect.PID.__load(Elixir);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('protocol')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.Inspect.__load(Elixir);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function inspect(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('pid'), ElixirScript.Core.Patterns.variable('_opts')], __function_args__, (pid0, _opts0) => {
                return true;
            })) !== null) {
                let [pid0, _opts0] = __arg_matches__;

                return '#PID' + ElixirScript.Core.erlang.iolist_to_binary(ElixirScript.Core.erlang.pid_to_list(pid0));
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    const __exports = {
        __impl__,
        inspect,
        __MODULE__: Symbol.for('Elixir.Inspect.PID'),
        __info__
    };

    Elixir.Inspect.PID.__exports = __exports

    return __exports;
}
ElixirScript.Core.Functions.build_namespace(Elixir, 'Elixir.Inspect.Integer').__load = function(Elixir) {
    if (Elixir.Inspect.Integer.__exports)
        return Elixir.Inspect.Integer.__exports;

    function __info__(kind) {
        const __info__map__ = new Map([[Symbol.for('functions'), [new ElixirScript.Core.Tuple(Symbol.for('__impl__'), 1), new ElixirScript.Core.Tuple(Symbol.for('inspect'), 2)]], [Symbol.for('macros'), []], [Symbol.for('attributes'), [new ElixirScript.Core.Tuple(Symbol.for('vsn'), [301493878501254457846068050554174817349]), new ElixirScript.Core.Tuple(Symbol.for('behaviour'), [Elixir.Inspect.__load(Elixir)]), new ElixirScript.Core.Tuple(Symbol.for('protocol_impl'), [new ElixirScript.Core.Tuple(Symbol.for('protocol'), Elixir.Inspect.__load(Elixir)), new ElixirScript.Core.Tuple(Symbol.for('for'), Elixir.Integer.__load(Elixir))])]], [Symbol.for('compile'), [new ElixirScript.Core.Tuple(Symbol.for('options'), []), new ElixirScript.Core.Tuple(Symbol.for('version'), [55, 46, 49, 46, 50]), new ElixirScript.Core.Tuple(Symbol.for('source'), '/private/tmp/elixir-20170929-51947-wgj4qu/elixir-1.5.2/lib/elixir/lib/inspect.ex')]], [Symbol.for('md5'), new ElixirScript.Core.BitString(ElixirScript.Core.BitString.integer(226), ElixirScript.Core.BitString.integer(209), ElixirScript.Core.BitString.integer(155), ElixirScript.Core.BitString.integer(222), ElixirScript.Core.BitString.integer(156), ElixirScript.Core.BitString.integer(7), ElixirScript.Core.BitString.integer(195), ElixirScript.Core.BitString.integer(137), ElixirScript.Core.BitString.integer(254), ElixirScript.Core.BitString.integer(29), ElixirScript.Core.BitString.integer(91), ElixirScript.Core.BitString.integer(253), ElixirScript.Core.BitString.integer(50), ElixirScript.Core.BitString.integer(115), ElixirScript.Core.BitString.integer(196), ElixirScript.Core.BitString.integer(69))], [Symbol.for('module'), Symbol.for('Elixir.Inspect.Integer')]]);

        const value = __info__map__.get(kind);

        if (value !== null) {
            return value;
        }

        throw new ElixirScript.Core.Patterns.MatchError(kind);
    }

    function __impl__(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('for')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.Integer.__load(Elixir);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('target')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.Inspect.Integer.__load(Elixir);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('protocol')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.Inspect.__load(Elixir);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function base_to_value(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('base')], __function_args__, (base0) => {
                return true;
            })) !== null) {
                let [base0] = __arg_matches__;

                return ElixirScript.Core.Patterns.defmatch(ElixirScript.Core.Patterns.clause([Symbol.for('binary')], () => {
                    return 2;
                }, () => {
                    return true;
                }), ElixirScript.Core.Patterns.clause([Symbol.for('decimal')], () => {
                    return 10;
                }, () => {
                    return true;
                }), ElixirScript.Core.Patterns.clause([Symbol.for('octal')], () => {
                    return 8;
                }, () => {
                    return true;
                }), ElixirScript.Core.Patterns.clause([Symbol.for('hex')], () => {
                    return 16;
                }, () => {
                    return true;
                })).call(this, base0);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function inspect(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('term'), ElixirScript.Core.Patterns.capture(new Map([[Symbol.for('__struct__'), {
                __MODULE__: Symbol.for('Elixir.Inspect.Opts')
            }], [Symbol.for('base'), ElixirScript.Core.Patterns.variable('base')]]))], __function_args__, (term0, base0, opts0) => {
                return true;
            })) !== null) {
                let [term0, base0, opts0] = __arg_matches__;

                const [inspected0] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.variable('inspected'), prepend_prefix(ElixirScript.Core.erlang.integer_to_binary(term0, base_to_value(base0)), base0));

                return Elixir.Inspect.Algebra.__load(Elixir).color(inspected0, Symbol.for('number'), opts0);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function prepend_prefix(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('value'), Symbol.for('decimal')], __function_args__, (value0) => {
                return true;
            })) !== null) {
                let [value0] = __arg_matches__;

                return value0;
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('value'), ElixirScript.Core.Patterns.variable('base')], __function_args__, (value0, base0) => {
                return true;
            })) !== null) {
                let [value0, base0] = __arg_matches__;

                const [prefix0] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.variable('prefix'), ElixirScript.Core.Patterns.defmatch(ElixirScript.Core.Patterns.clause([Symbol.for('binary')], () => {
                    return '0b';
                }, () => {
                    return true;
                }), ElixirScript.Core.Patterns.clause([Symbol.for('octal')], () => {
                    return '0o';
                }, () => {
                    return true;
                }), ElixirScript.Core.Patterns.clause([Symbol.for('hex')], () => {
                    return '0x';
                }, () => {
                    return true;
                })).call(this, base0));

                return prefix0 + value0;
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    const __exports = {
        __impl__,
        inspect,
        __MODULE__: Symbol.for('Elixir.Inspect.Integer'),
        __info__
    };

    Elixir.Inspect.Integer.__exports = __exports

    return __exports;
}
ElixirScript.Core.Functions.build_namespace(Elixir, 'Elixir.Inspect.MapSet').__load = function(Elixir) {
    if (Elixir.Inspect.MapSet.__exports)
        return Elixir.Inspect.MapSet.__exports;

    function __info__(kind) {
        const __info__map__ = new Map([[Symbol.for('functions'), [new ElixirScript.Core.Tuple(Symbol.for('__impl__'), 1), new ElixirScript.Core.Tuple(Symbol.for('inspect'), 2)]], [Symbol.for('macros'), []], [Symbol.for('attributes'), [new ElixirScript.Core.Tuple(Symbol.for('vsn'), [55471823164207554513784527776211894694]), new ElixirScript.Core.Tuple(Symbol.for('behaviour'), [Elixir.Inspect.__load(Elixir)]), new ElixirScript.Core.Tuple(Symbol.for('protocol_impl'), [new ElixirScript.Core.Tuple(Symbol.for('protocol'), Elixir.Inspect.__load(Elixir)), new ElixirScript.Core.Tuple(Symbol.for('for'), Elixir.MapSet.__load(Elixir))])]], [Symbol.for('compile'), [new ElixirScript.Core.Tuple(Symbol.for('options'), []), new ElixirScript.Core.Tuple(Symbol.for('version'), [55, 46, 49, 46, 50]), new ElixirScript.Core.Tuple(Symbol.for('source'), '/private/tmp/elixir-20170929-51947-wgj4qu/elixir-1.5.2/lib/elixir/lib/map_set.ex')]], [Symbol.for('md5'), new ElixirScript.Core.BitString(ElixirScript.Core.BitString.integer(41), ElixirScript.Core.BitString.integer(187), ElixirScript.Core.BitString.integer(124), ElixirScript.Core.BitString.integer(10), ElixirScript.Core.BitString.integer(43), ElixirScript.Core.BitString.integer(82), ElixirScript.Core.BitString.integer(111), ElixirScript.Core.BitString.integer(80), ElixirScript.Core.BitString.integer(145), ElixirScript.Core.BitString.integer(83), ElixirScript.Core.BitString.integer(195), ElixirScript.Core.BitString.integer(36), ElixirScript.Core.BitString.integer(222), ElixirScript.Core.BitString.integer(45), ElixirScript.Core.BitString.integer(129), ElixirScript.Core.BitString.integer(166))], [Symbol.for('module'), Symbol.for('Elixir.Inspect.MapSet')]]);

        const value = __info__map__.get(kind);

        if (value !== null) {
            return value;
        }

        throw new ElixirScript.Core.Patterns.MatchError(kind);
    }

    function __impl__(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('for')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.MapSet.__load(Elixir);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('target')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.Inspect.MapSet.__load(Elixir);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('protocol')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.Inspect.__load(Elixir);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function inspect(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('map_set'), ElixirScript.Core.Patterns.variable('opts')], __function_args__, (map_set0, opts0) => {
                return true;
            })) !== null) {
                let [map_set0, opts0] = __arg_matches__;

                return Elixir.Inspect.Algebra.__load(Elixir).concat(['#MapSet<', Elixir.Inspect.List.__load(Elixir).inspect(Elixir.MapSet.__load(Elixir).to_list(map_set0), opts0), '>']);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    const __exports = {
        __impl__,
        inspect,
        __MODULE__: Symbol.for('Elixir.Inspect.MapSet'),
        __info__
    };

    Elixir.Inspect.MapSet.__exports = __exports

    return __exports;
}
ElixirScript.Core.Functions.build_namespace(Elixir, 'Elixir.IO').__load = function(Elixir) {
    if (Elixir.IO.__exports)
        return Elixir.IO.__exports;

    function __info__(kind) {
        const __info__map__ = new Map([[Symbol.for('functions'), [new ElixirScript.Core.Tuple(Symbol.for('binread'), 1), new ElixirScript.Core.Tuple(Symbol.for('binread'), 2), new ElixirScript.Core.Tuple(Symbol.for('binstream'), 2), new ElixirScript.Core.Tuple(Symbol.for('binwrite'), 1), new ElixirScript.Core.Tuple(Symbol.for('binwrite'), 2), new ElixirScript.Core.Tuple(Symbol.for('chardata_to_string'), 1), new ElixirScript.Core.Tuple(Symbol.for('each_binstream'), 2), new ElixirScript.Core.Tuple(Symbol.for('each_stream'), 2), new ElixirScript.Core.Tuple(Symbol.for('getn'), 1), new ElixirScript.Core.Tuple(Symbol.for('getn'), 2), new ElixirScript.Core.Tuple(Symbol.for('getn'), 3), new ElixirScript.Core.Tuple(Symbol.for('gets'), 1), new ElixirScript.Core.Tuple(Symbol.for('gets'), 2), new ElixirScript.Core.Tuple(Symbol.for('inspect'), 1), new ElixirScript.Core.Tuple(Symbol.for('inspect'), 2), new ElixirScript.Core.Tuple(Symbol.for('inspect'), 3), new ElixirScript.Core.Tuple(Symbol.for('iodata_length'), 1), new ElixirScript.Core.Tuple(Symbol.for('iodata_to_binary'), 1), new ElixirScript.Core.Tuple(Symbol.for('puts'), 1), new ElixirScript.Core.Tuple(Symbol.for('puts'), 2), new ElixirScript.Core.Tuple(Symbol.for('read'), 1), new ElixirScript.Core.Tuple(Symbol.for('read'), 2), new ElixirScript.Core.Tuple(Symbol.for('stream'), 2), new ElixirScript.Core.Tuple(Symbol.for('warn'), 1), new ElixirScript.Core.Tuple(Symbol.for('warn'), 2), new ElixirScript.Core.Tuple(Symbol.for('write'), 1), new ElixirScript.Core.Tuple(Symbol.for('write'), 2)]], [Symbol.for('macros'), []], [Symbol.for('attributes'), [new ElixirScript.Core.Tuple(Symbol.for('vsn'), [292834763636995047343532822420047650369])]], [Symbol.for('compile'), [new ElixirScript.Core.Tuple(Symbol.for('options'), []), new ElixirScript.Core.Tuple(Symbol.for('version'), [55, 46, 49, 46, 50]), new ElixirScript.Core.Tuple(Symbol.for('source'), '/private/tmp/elixir-20170929-51947-wgj4qu/elixir-1.5.2/lib/elixir/lib/io.ex')]], [Symbol.for('md5'), new ElixirScript.Core.BitString(ElixirScript.Core.BitString.integer(220), ElixirScript.Core.BitString.integer(77), ElixirScript.Core.BitString.integer(236), ElixirScript.Core.BitString.integer(139), ElixirScript.Core.BitString.integer(144), ElixirScript.Core.BitString.integer(214), ElixirScript.Core.BitString.integer(163), ElixirScript.Core.BitString.integer(55), ElixirScript.Core.BitString.integer(4), ElixirScript.Core.BitString.integer(242), ElixirScript.Core.BitString.integer(222), ElixirScript.Core.BitString.integer(30), ElixirScript.Core.BitString.integer(12), ElixirScript.Core.BitString.integer(169), ElixirScript.Core.BitString.integer(222), ElixirScript.Core.BitString.integer(65))], [Symbol.for('module'), Symbol.for('Elixir.IO')]]);

        const value = __info__map__.get(kind);

        if (value !== null) {
            return value;
        }

        throw new ElixirScript.Core.Patterns.MatchError(kind);
    }

    function binread(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('device'), Symbol.for('all')], __function_args__, (device0) => {
                return true;
            })) !== null) {
                let [device0] = __arg_matches__;

                return do_binread_all(map_dev(device0), '');
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('device'), Symbol.for('line')], __function_args__, (device0) => {
                return true;
            })) !== null) {
                let [device0] = __arg_matches__;

                return ElixirScript.Core.Patterns.defmatch(ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                    values: [Symbol.for('ok'), ElixirScript.Core.Patterns.variable('data')]
                })], (data0) => {
                    return data0;
                }, (data0) => {
                    return true;
                }), ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.variable('other')], (other0) => {
                    return other0;
                }, (other0) => {
                    return true;
                })).call(this, ElixirScript.Core.file.read_line(map_dev(device0)));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('device'), ElixirScript.Core.Patterns.variable('count')], __function_args__, (device0, count0) => {
                return ElixirScript.Core.erlang.is_integer(count0) && count0 >= 0;
            })) !== null) {
                let [device0, count0] = __arg_matches__;

                return ElixirScript.Core.Patterns.defmatch(ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                    values: [Symbol.for('ok'), ElixirScript.Core.Patterns.variable('data')]
                })], (data0) => {
                    return data0;
                }, (data0) => {
                    return true;
                }), ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.variable('other')], (other0) => {
                    return other0;
                }, (other0) => {
                    return true;
                })).call(this, ElixirScript.Core.file.read(map_dev(device0), count0));
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function binwrite(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('device'), ElixirScript.Core.Patterns.variable('item')], __function_args__, (device0, item0) => {
                return ElixirScript.Core.erlang.is_list(item0) || ElixirScript.Core.erlang.is_binary(item0);
            })) !== null) {
                let [device0, item0] = __arg_matches__;

                return ElixirScript.Core.file.write(map_dev(device0), item0);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function chardata_to_string(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('string')], __function_args__, (string0) => {
                return ElixirScript.Core.erlang.is_binary(string0);
            })) !== null) {
                let [string0] = __arg_matches__;

                return string0;
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('list')], __function_args__, (list0) => {
                return ElixirScript.Core.erlang.is_list(list0);
            })) !== null) {
                let [list0] = __arg_matches__;

                return Elixir.List.__load(Elixir).to_string(list0);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function do_binread_all(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('mapped_dev'), ElixirScript.Core.Patterns.variable('acc')], __function_args__, (mapped_dev0, acc0) => {
                return true;
            })) !== null) {
                let [mapped_dev0, acc0] = __arg_matches__;

                return ElixirScript.Core.Patterns.defmatch(ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                    values: [Symbol.for('ok'), ElixirScript.Core.Patterns.variable('data')]
                })], (data0) => {
                    return new ElixirScript.Core.Functions.Recurse(recur.bind(null, mapped_dev0, acc0 + data0));
                }, (data0) => {
                    return true;
                }), ElixirScript.Core.Patterns.clause([Symbol.for('eof')], () => {
                    return acc0;
                }, () => {
                    return true;
                }), ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.variable('other')], (other0) => {
                    return other0;
                }, (other0) => {
                    return true;
                })).call(this, ElixirScript.Core.file.read(mapped_dev0, 4096));
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function do_read_all(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('mapped_dev'), ElixirScript.Core.Patterns.variable('acc')], __function_args__, (mapped_dev0, acc0) => {
                return true;
            })) !== null) {
                let [mapped_dev0, acc0] = __arg_matches__;

                return ElixirScript.Core.Patterns.defmatch(ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.variable('line')], (line0) => {
                    return new ElixirScript.Core.Functions.Recurse(recur.bind(null, mapped_dev0, acc0 + line0));
                }, (line0) => {
                    return ElixirScript.Core.erlang.is_binary(line0);
                }), ElixirScript.Core.Patterns.clause([Symbol.for('eof')], () => {
                    return acc0;
                }, () => {
                    return true;
                }), ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.variable('other')], (other0) => {
                    return other0;
                }, (other0) => {
                    return true;
                })).call(this, ElixirScript.Core.io.get_line(mapped_dev0, ''));
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function each_binstream(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('device'), ElixirScript.Core.Patterns.variable('line_or_chars')], __function_args__, (device0, line_or_chars0) => {
                return true;
            })) !== null) {
                let [device0, line_or_chars0] = __arg_matches__;

                return ElixirScript.Core.Patterns.defmatch(ElixirScript.Core.Patterns.clause([Symbol.for('eof')], () => {
                    return new ElixirScript.Core.Tuple(Symbol.for('halt'), device0);
                }, () => {
                    return true;
                }), ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                    values: [Symbol.for('error'), ElixirScript.Core.Patterns.variable('reason')]
                })], (reason0) => {
                    return ElixirScript.Core.erlang.error(Elixir.IO.StreamError.__load(Elixir).exception([new ElixirScript.Core.Tuple(Symbol.for('reason'), reason0)]));
                }, (reason0) => {
                    return true;
                }), ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.variable('data')], (data0) => {
                    return new ElixirScript.Core.Tuple([data0], device0);
                }, (data0) => {
                    return true;
                })).call(this, binread(device0, line_or_chars0));
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function each_stream(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('device'), ElixirScript.Core.Patterns.variable('line_or_codepoints')], __function_args__, (device0, line_or_codepoints0) => {
                return true;
            })) !== null) {
                let [device0, line_or_codepoints0] = __arg_matches__;

                return ElixirScript.Core.Patterns.defmatch(ElixirScript.Core.Patterns.clause([Symbol.for('eof')], () => {
                    return new ElixirScript.Core.Tuple(Symbol.for('halt'), device0);
                }, () => {
                    return true;
                }), ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                    values: [Symbol.for('error'), ElixirScript.Core.Patterns.variable('reason')]
                })], (reason0) => {
                    return ElixirScript.Core.erlang.error(Elixir.IO.StreamError.__load(Elixir).exception([new ElixirScript.Core.Tuple(Symbol.for('reason'), reason0)]));
                }, (reason0) => {
                    return true;
                }), ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.variable('data')], (data0) => {
                    return new ElixirScript.Core.Tuple([data0], device0);
                }, (data0) => {
                    return true;
                })).call(this, read(device0, line_or_codepoints0));
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function map_dev(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('stdio')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Symbol.for('standard_io');
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('stderr')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Symbol.for('standard_error');
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('other')], __function_args__, (other0) => {
                return ElixirScript.Core.erlang.is_atom(other0) || ElixirScript.Core.erlang.is_pid(other0) || ElixirScript.Core.erlang.is_tuple(other0);
            })) !== null) {
                let [other0] = __arg_matches__;

                return other0;
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function read(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('device'), Symbol.for('all')], __function_args__, (device0) => {
                return true;
            })) !== null) {
                let [device0] = __arg_matches__;

                return do_read_all(map_dev(device0), '');
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('device'), Symbol.for('line')], __function_args__, (device0) => {
                return true;
            })) !== null) {
                let [device0] = __arg_matches__;

                return ElixirScript.Core.io.get_line(map_dev(device0), []);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('device'), ElixirScript.Core.Patterns.variable('count')], __function_args__, (device0, count0) => {
                return ElixirScript.Core.erlang.is_integer(count0) && count0 >= 0;
            })) !== null) {
                let [device0, count0] = __arg_matches__;

                return ElixirScript.Core.io.get_chars(map_dev(device0), [], count0);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function to_chardata(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('list')], __function_args__, (list0) => {
                return ElixirScript.Core.erlang.is_list(list0);
            })) !== null) {
                let [list0] = __arg_matches__;

                return list0;
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('other')], __function_args__, (other0) => {
                return true;
            })) !== null) {
                let [other0] = __arg_matches__;

                return Elixir.String.Chars.__load(Elixir).to_string(other0);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function warn(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('message')], __function_args__, (message0) => {
                return true;
            })) !== null) {
                let [message0] = __arg_matches__;

                const [stacktrace0] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                    values: [Symbol.for('current_stacktrace'), ElixirScript.Core.Patterns.variable('stacktrace')]
                }), Elixir.Process.__load(Elixir).info(ElixirScript.Core.Functions.call_property(ElixirScript.Core.erlang.self), Symbol.for('current_stacktrace')));

                const _ref5576726 = new ElixirScript.Core.Tuple(stacktrace0);

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, message0, Elixir.Enum.__load(Elixir).drop(stacktrace0, 2)));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('message'), []], __function_args__, (message0) => {
                return true;
            })) !== null) {
                let [message0] = __arg_matches__;

                return ElixirScript.Core.elixir_errors.warn([to_chardata(message0), 10]);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('message'), ElixirScript.Core.Patterns.variable('stacktrace')], __function_args__, (message0, stacktrace0) => {
                return ElixirScript.Core.erlang.is_list(stacktrace0);
            })) !== null) {
                let [message0, stacktrace0] = __arg_matches__;

                const [formatted0] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.variable('formatted'), Elixir.Enum.__load(Elixir).map_join(stacktrace0, '\n  ', Elixir.Exception.__load(Elixir).format_stacktrace_entry));

                return ElixirScript.Core.elixir_errors.warn([to_chardata(message0), 10, '  ', formatted0, 10]);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function write(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('device'), ElixirScript.Core.Patterns.variable('item')], __function_args__, (device0, item0) => {
                return true;
            })) !== null) {
                let [device0, item0] = __arg_matches__;

                return ElixirScript.Core.io.put_chars(map_dev(device0), to_chardata(item0));
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    const __exports = {
        binread,
        binwrite,
        chardata_to_string,
        each_binstream,
        each_stream,
        read,
        warn,
        write,
        __MODULE__: Symbol.for('Elixir.IO'),
        __info__
    };

    Elixir.IO.__exports = __exports

    return __exports;
}
ElixirScript.Core.Functions.build_namespace(Elixir, 'Elixir.Inspect.HashSet').__load = function(Elixir) {
    if (Elixir.Inspect.HashSet.__exports)
        return Elixir.Inspect.HashSet.__exports;

    function __info__(kind) {
        const __info__map__ = new Map([[Symbol.for('functions'), [new ElixirScript.Core.Tuple(Symbol.for('__impl__'), 1), new ElixirScript.Core.Tuple(Symbol.for('inspect'), 2)]], [Symbol.for('macros'), []], [Symbol.for('attributes'), [new ElixirScript.Core.Tuple(Symbol.for('vsn'), [294440628594850747376135622864665144969]), new ElixirScript.Core.Tuple(Symbol.for('behaviour'), [Elixir.Inspect.__load(Elixir)]), new ElixirScript.Core.Tuple(Symbol.for('protocol_impl'), [new ElixirScript.Core.Tuple(Symbol.for('protocol'), Elixir.Inspect.__load(Elixir)), new ElixirScript.Core.Tuple(Symbol.for('for'), Elixir.HashSet.__load(Elixir))])]], [Symbol.for('compile'), [new ElixirScript.Core.Tuple(Symbol.for('options'), []), new ElixirScript.Core.Tuple(Symbol.for('version'), [55, 46, 49, 46, 50]), new ElixirScript.Core.Tuple(Symbol.for('source'), '/private/tmp/elixir-20170929-51947-wgj4qu/elixir-1.5.2/lib/elixir/lib/hash_set.ex')]], [Symbol.for('md5'), new ElixirScript.Core.BitString(ElixirScript.Core.BitString.integer(221), ElixirScript.Core.BitString.integer(131), ElixirScript.Core.BitString.integer(51), ElixirScript.Core.BitString.integer(204), ElixirScript.Core.BitString.integer(234), ElixirScript.Core.BitString.integer(51), ElixirScript.Core.BitString.integer(40), ElixirScript.Core.BitString.integer(80), ElixirScript.Core.BitString.integer(201), ElixirScript.Core.BitString.integer(222), ElixirScript.Core.BitString.integer(255), ElixirScript.Core.BitString.integer(13), ElixirScript.Core.BitString.integer(57), ElixirScript.Core.BitString.integer(137), ElixirScript.Core.BitString.integer(110), ElixirScript.Core.BitString.integer(137))], [Symbol.for('module'), Symbol.for('Elixir.Inspect.HashSet')]]);

        const value = __info__map__.get(kind);

        if (value !== null) {
            return value;
        }

        throw new ElixirScript.Core.Patterns.MatchError(kind);
    }

    function __impl__(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('for')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.HashSet.__load(Elixir);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('target')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.Inspect.HashSet.__load(Elixir);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('protocol')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.Inspect.__load(Elixir);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function inspect(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('set'), ElixirScript.Core.Patterns.variable('opts')], __function_args__, (set0, opts0) => {
                return true;
            })) !== null) {
                let [set0, opts0] = __arg_matches__;

                const [module0] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.variable('module'), Elixir.HashSet.__load(Elixir));

                return Elixir.Inspect.Algebra.__load(Elixir).concat(['#HashSet<', Elixir.Inspect.List.__load(Elixir).inspect(module0.to_list(set0), opts0), '>']);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    const __exports = {
        __impl__,
        inspect,
        __MODULE__: Symbol.for('Elixir.Inspect.HashSet'),
        __info__
    };

    Elixir.Inspect.HashSet.__exports = __exports

    return __exports;
}
ElixirScript.Core.Functions.build_namespace(Elixir, 'Elixir.Inspect.HashDict').__load = function(Elixir) {
    if (Elixir.Inspect.HashDict.__exports)
        return Elixir.Inspect.HashDict.__exports;

    function __info__(kind) {
        const __info__map__ = new Map([[Symbol.for('functions'), [new ElixirScript.Core.Tuple(Symbol.for('__impl__'), 1), new ElixirScript.Core.Tuple(Symbol.for('inspect'), 2)]], [Symbol.for('macros'), []], [Symbol.for('attributes'), [new ElixirScript.Core.Tuple(Symbol.for('vsn'), [274674645674081767613756541103337189783]), new ElixirScript.Core.Tuple(Symbol.for('behaviour'), [Elixir.Inspect.__load(Elixir)]), new ElixirScript.Core.Tuple(Symbol.for('protocol_impl'), [new ElixirScript.Core.Tuple(Symbol.for('protocol'), Elixir.Inspect.__load(Elixir)), new ElixirScript.Core.Tuple(Symbol.for('for'), Elixir.HashDict.__load(Elixir))])]], [Symbol.for('compile'), [new ElixirScript.Core.Tuple(Symbol.for('options'), []), new ElixirScript.Core.Tuple(Symbol.for('version'), [55, 46, 49, 46, 50]), new ElixirScript.Core.Tuple(Symbol.for('source'), '/private/tmp/elixir-20170929-51947-wgj4qu/elixir-1.5.2/lib/elixir/lib/hash_dict.ex')]], [Symbol.for('md5'), new ElixirScript.Core.BitString(ElixirScript.Core.BitString.integer(206), ElixirScript.Core.BitString.integer(164), ElixirScript.Core.BitString.integer(105), ElixirScript.Core.BitString.integer(154), ElixirScript.Core.BitString.integer(11), ElixirScript.Core.BitString.integer(32), ElixirScript.Core.BitString.integer(202), ElixirScript.Core.BitString.integer(42), ElixirScript.Core.BitString.integer(212), ElixirScript.Core.BitString.integer(210), ElixirScript.Core.BitString.integer(188), ElixirScript.Core.BitString.integer(87), ElixirScript.Core.BitString.integer(223), ElixirScript.Core.BitString.integer(57), ElixirScript.Core.BitString.integer(49), ElixirScript.Core.BitString.integer(151))], [Symbol.for('module'), Symbol.for('Elixir.Inspect.HashDict')]]);

        const value = __info__map__.get(kind);

        if (value !== null) {
            return value;
        }

        throw new ElixirScript.Core.Patterns.MatchError(kind);
    }

    function __impl__(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('for')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.HashDict.__load(Elixir);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('target')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.Inspect.HashDict.__load(Elixir);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('protocol')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.Inspect.__load(Elixir);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function inspect(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('dict'), ElixirScript.Core.Patterns.variable('opts')], __function_args__, (dict0, opts0) => {
                return true;
            })) !== null) {
                let [dict0, opts0] = __arg_matches__;

                const [module0] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.variable('module'), Elixir.HashDict.__load(Elixir));

                return Elixir.Inspect.Algebra.__load(Elixir).concat(['#HashDict<', Elixir.Inspect.List.__load(Elixir).inspect(module0.to_list(dict0), opts0), '>']);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    const __exports = {
        __impl__,
        inspect,
        __MODULE__: Symbol.for('Elixir.Inspect.HashDict'),
        __info__
    };

    Elixir.Inspect.HashDict.__exports = __exports

    return __exports;
}
ElixirScript.Core.Functions.build_namespace(Elixir, 'Elixir.Calendar.ISO').__load = function(Elixir) {
    if (Elixir.Calendar.ISO.__exports)
        return Elixir.Calendar.ISO.__exports;

    function __info__(kind) {
        const __info__map__ = new Map([[Symbol.for('functions'), [new ElixirScript.Core.Tuple(Symbol.for('add_day_fraction_to_iso_days'), 3), new ElixirScript.Core.Tuple(Symbol.for('date_from_iso_days_days'), 1), new ElixirScript.Core.Tuple(Symbol.for('date_to_iso8601'), 3), new ElixirScript.Core.Tuple(Symbol.for('date_to_iso8601'), 4), new ElixirScript.Core.Tuple(Symbol.for('date_to_iso_days_days'), 3), new ElixirScript.Core.Tuple(Symbol.for('date_to_string'), 3), new ElixirScript.Core.Tuple(Symbol.for('datetime_to_iso8601'), 11), new ElixirScript.Core.Tuple(Symbol.for('datetime_to_iso8601'), 12), new ElixirScript.Core.Tuple(Symbol.for('datetime_to_string'), 11), new ElixirScript.Core.Tuple(Symbol.for('day_of_week'), 3), new ElixirScript.Core.Tuple(Symbol.for('day_rollover_relative_to_midnight_utc'), 0), new ElixirScript.Core.Tuple(Symbol.for('days_in_month'), 2), new ElixirScript.Core.Tuple(Symbol.for('from_unix'), 2), new ElixirScript.Core.Tuple(Symbol.for('iso_days_to_unit'), 2), new ElixirScript.Core.Tuple(Symbol.for('leap_year?'), 1), new ElixirScript.Core.Tuple(Symbol.for('naive_datetime_from_iso_days'), 1), new ElixirScript.Core.Tuple(Symbol.for('naive_datetime_to_iso8601'), 7), new ElixirScript.Core.Tuple(Symbol.for('naive_datetime_to_iso8601'), 8), new ElixirScript.Core.Tuple(Symbol.for('naive_datetime_to_iso_days'), 7), new ElixirScript.Core.Tuple(Symbol.for('naive_datetime_to_string'), 7), new ElixirScript.Core.Tuple(Symbol.for('parse_microsecond'), 1), new ElixirScript.Core.Tuple(Symbol.for('parse_offset'), 1), new ElixirScript.Core.Tuple(Symbol.for('time_from_day_fraction'), 1), new ElixirScript.Core.Tuple(Symbol.for('time_to_day_fraction'), 4), new ElixirScript.Core.Tuple(Symbol.for('time_to_iso8601'), 4), new ElixirScript.Core.Tuple(Symbol.for('time_to_iso8601'), 5), new ElixirScript.Core.Tuple(Symbol.for('time_to_string'), 4), new ElixirScript.Core.Tuple(Symbol.for('time_to_string'), 5), new ElixirScript.Core.Tuple(Symbol.for('valid_date?'), 3), new ElixirScript.Core.Tuple(Symbol.for('valid_time?'), 4)]], [Symbol.for('macros'), []], [Symbol.for('attributes'), [new ElixirScript.Core.Tuple(Symbol.for('vsn'), [195976659437177031771667633162401479932]), new ElixirScript.Core.Tuple(Symbol.for('behaviour'), [Elixir.Calendar.__load(Elixir)])]], [Symbol.for('compile'), [new ElixirScript.Core.Tuple(Symbol.for('options'), []), new ElixirScript.Core.Tuple(Symbol.for('version'), [55, 46, 49, 46, 50]), new ElixirScript.Core.Tuple(Symbol.for('source'), '/private/tmp/elixir-20170929-51947-wgj4qu/elixir-1.5.2/lib/elixir/lib/calendar/iso.ex')]], [Symbol.for('md5'), new ElixirScript.Core.BitString(ElixirScript.Core.BitString.integer(147), ElixirScript.Core.BitString.integer(111), ElixirScript.Core.BitString.integer(187), ElixirScript.Core.BitString.integer(79), ElixirScript.Core.BitString.integer(115), ElixirScript.Core.BitString.integer(236), ElixirScript.Core.BitString.integer(48), ElixirScript.Core.BitString.integer(97), ElixirScript.Core.BitString.integer(180), ElixirScript.Core.BitString.integer(34), ElixirScript.Core.BitString.integer(124), ElixirScript.Core.BitString.integer(113), ElixirScript.Core.BitString.integer(29), ElixirScript.Core.BitString.integer(193), ElixirScript.Core.BitString.integer(252), ElixirScript.Core.BitString.integer(252))], [Symbol.for('module'), Symbol.for('Elixir.Calendar.ISO')]]);

        const value = __info__map__.get(kind);

        if (value !== null) {
            return value;
        }

        throw new ElixirScript.Core.Patterns.MatchError(kind);
    }

    function date_from_iso_days_days(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('days')], __function_args__, (days0) => {
                return days0 <= 3652424;
            })) !== null) {
                let [days0] = __arg_matches__;

                return ElixirScript.Core.calendar.gregorian_days_to_date(days0);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function date_to_string(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('year'), ElixirScript.Core.Patterns.variable('month'), ElixirScript.Core.Patterns.variable('day')], __function_args__, (year0, month0, day0) => {
                return true;
            })) !== null) {
                let [year0, month0, day0] = __arg_matches__;

                return zero_pad(year0, 4) + ('-' + (zero_pad(month0, 2) + ('-' + zero_pad(day0, 2))));
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function datetime_to_string(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('year'), ElixirScript.Core.Patterns.variable('month'), ElixirScript.Core.Patterns.variable('day'), ElixirScript.Core.Patterns.variable('hour'), ElixirScript.Core.Patterns.variable('minute'), ElixirScript.Core.Patterns.variable('second'), ElixirScript.Core.Patterns.variable('microsecond'), ElixirScript.Core.Patterns.variable('time_zone'), ElixirScript.Core.Patterns.variable('zone_abbr'), ElixirScript.Core.Patterns.variable('utc_offset'), ElixirScript.Core.Patterns.variable('std_offset')], __function_args__, (year0, month0, day0, hour0, minute0, second0, microsecond0, time_zone0, zone_abbr0, utc_offset0, std_offset0) => {
                return true;
            })) !== null) {
                let [year0, month0, day0, hour0, minute0, second0, microsecond0, time_zone0, zone_abbr0, utc_offset0, std_offset0] = __arg_matches__;

                return date_to_string(year0, month0, day0) + (' ' + (time_to_string(hour0, minute0, second0, microsecond0) + (offset_to_string(utc_offset0, std_offset0, time_zone0) + zone_to_string(utc_offset0, std_offset0, zone_abbr0, time_zone0))));
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function format_offset(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('total'), ElixirScript.Core.Patterns.variable('hour'), ElixirScript.Core.Patterns.variable('minute'), Symbol.for('extended')], __function_args__, (total0, hour0, minute0) => {
                return true;
            })) !== null) {
                let [total0, hour0, minute0] = __arg_matches__;

                return sign(total0) + (zero_pad(hour0, 2) + (':' + zero_pad(minute0, 2)));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('total'), ElixirScript.Core.Patterns.variable('hour'), ElixirScript.Core.Patterns.variable('minute'), Symbol.for('basic')], __function_args__, (total0, hour0, minute0) => {
                return true;
            })) !== null) {
                let [total0, hour0, minute0] = __arg_matches__;

                return sign(total0) + (zero_pad(hour0, 2) + zero_pad(minute0, 2));
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function naive_datetime_to_string(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('year'), ElixirScript.Core.Patterns.variable('month'), ElixirScript.Core.Patterns.variable('day'), ElixirScript.Core.Patterns.variable('hour'), ElixirScript.Core.Patterns.variable('minute'), ElixirScript.Core.Patterns.variable('second'), ElixirScript.Core.Patterns.variable('microsecond')], __function_args__, (year0, month0, day0, hour0, minute0, second0, microsecond0) => {
                return true;
            })) !== null) {
                let [year0, month0, day0, hour0, minute0, second0, microsecond0] = __arg_matches__;

                return date_to_string(year0, month0, day0) + (' ' + time_to_string(hour0, minute0, second0, microsecond0));
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function offset_to_string(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('x0'), ElixirScript.Core.Patterns.variable('x1'), ElixirScript.Core.Patterns.variable('x2')], __function_args__, (x00, x10, x20) => {
                return true;
            })) !== null) {
                let [x00, x10, x20] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, x00, x10, x20, Symbol.for('extended')));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([0, 0, 'Etc/UTC', ElixirScript.Core.Patterns.variable('_format')], __function_args__, (_format0) => {
                return true;
            })) !== null) {
                let [_format0] = __arg_matches__;

                return 'Z';
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('utc'), ElixirScript.Core.Patterns.variable('std'), ElixirScript.Core.Patterns.variable('_zone'), ElixirScript.Core.Patterns.variable('format')], __function_args__, (utc0, std0, _zone0, format0) => {
                return true;
            })) !== null) {
                let [utc0, std0, _zone0, format0] = __arg_matches__;

                const [total0] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.variable('total'), utc0 + std0);

                const [second0] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.variable('second'), ElixirScript.Core.erlang.abs(total0));

                const [minute0] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.variable('minute'), ElixirScript.Core.erlang.div(ElixirScript.Core.erlang.rem(second0, 3600), 60));

                const [hour0] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.variable('hour'), ElixirScript.Core.erlang.div(second0, 3600));

                return format_offset(total0, hour0, minute0, format0);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function sign(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('total')], __function_args__, (total0) => {
                return total0 < 0;
            })) !== null) {
                let [total0] = __arg_matches__;

                return '-';
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('_')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return '+';
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function time_to_string(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('x0'), ElixirScript.Core.Patterns.variable('x1'), ElixirScript.Core.Patterns.variable('x2'), ElixirScript.Core.Patterns.variable('x3')], __function_args__, (x00, x10, x20, x30) => {
                return true;
            })) !== null) {
                let [x00, x10, x20, x30] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, x00, x10, x20, x30, Symbol.for('extended')));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('hour'), ElixirScript.Core.Patterns.variable('minute'), ElixirScript.Core.Patterns.variable('second'), ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                values: [ElixirScript.Core.Patterns.variable('_'), 0]
            }), ElixirScript.Core.Patterns.variable('format')], __function_args__, (hour0, minute0, second0, format0) => {
                return true;
            })) !== null) {
                let [hour0, minute0, second0, format0] = __arg_matches__;

                return time_to_string_format(hour0, minute0, second0, format0);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('hour'), ElixirScript.Core.Patterns.variable('minute'), ElixirScript.Core.Patterns.variable('second'), ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                values: [ElixirScript.Core.Patterns.variable('microsecond'), ElixirScript.Core.Patterns.variable('precision')]
            }), ElixirScript.Core.Patterns.variable('format')], __function_args__, (hour0, minute0, second0, microsecond0, precision0, format0) => {
                return true;
            })) !== null) {
                let [hour0, minute0, second0, microsecond0, precision0, format0] = __arg_matches__;

                return time_to_string_format(hour0, minute0, second0, format0) + ('.' + ElixirScript.Core.erlang.binary_part(zero_pad(microsecond0, 6), 0, precision0));
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function time_to_string_format(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('hour'), ElixirScript.Core.Patterns.variable('minute'), ElixirScript.Core.Patterns.variable('second'), Symbol.for('extended')], __function_args__, (hour0, minute0, second0) => {
                return true;
            })) !== null) {
                let [hour0, minute0, second0] = __arg_matches__;

                return zero_pad(hour0, 2) + (':' + (zero_pad(minute0, 2) + (':' + zero_pad(second0, 2))));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('hour'), ElixirScript.Core.Patterns.variable('minute'), ElixirScript.Core.Patterns.variable('second'), Symbol.for('basic')], __function_args__, (hour0, minute0, second0) => {
                return true;
            })) !== null) {
                let [hour0, minute0, second0] = __arg_matches__;

                return zero_pad(hour0, 2) + (zero_pad(minute0, 2) + zero_pad(second0, 2));
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function zero_pad(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('val'), ElixirScript.Core.Patterns.variable('count')], __function_args__, (val0, count0) => {
                return true;
            })) !== null) {
                let [val0, count0] = __arg_matches__;

                const [num0] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.variable('num'), ElixirScript.Core.erlang.integer_to_binary(val0));

                return ElixirScript.Core.binary.copy('0', count0 - ElixirScript.Core.erlang.byte_size(num0)) + num0;
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function zone_to_string(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([0, 0, ElixirScript.Core.Patterns.variable('_abbr'), 'Etc/UTC'], __function_args__, (_abbr0) => {
                return true;
            })) !== null) {
                let [_abbr0] = __arg_matches__;

                return '';
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('_'), ElixirScript.Core.Patterns.variable('_'), ElixirScript.Core.Patterns.variable('abbr'), ElixirScript.Core.Patterns.variable('zone')], __function_args__, (abbr0, zone0) => {
                return true;
            })) !== null) {
                let [abbr0, zone0] = __arg_matches__;

                return ' ' + (abbr0 + (' ' + zone0));
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    const __exports = {
        date_from_iso_days_days,
        date_to_string,
        datetime_to_string,
        naive_datetime_to_string,
        time_to_string,
        __MODULE__: Symbol.for('Elixir.Calendar.ISO'),
        __info__
    };

    Elixir.Calendar.ISO.__exports = __exports

    return __exports;
}
ElixirScript.Core.Functions.build_namespace(Elixir, 'Elixir.Enumerable.Date.Range').__load = function(Elixir) {
    if (Elixir.Enumerable.Date.Range.__exports)
        return Elixir.Enumerable.Date.Range.__exports;

    function __info__(kind) {
        const __info__map__ = new Map([[Symbol.for('functions'), [new ElixirScript.Core.Tuple(Symbol.for('__impl__'), 1), new ElixirScript.Core.Tuple(Symbol.for('count'), 1), new ElixirScript.Core.Tuple(Symbol.for('member?'), 2), new ElixirScript.Core.Tuple(Symbol.for('reduce'), 3)]], [Symbol.for('macros'), []], [Symbol.for('attributes'), [new ElixirScript.Core.Tuple(Symbol.for('vsn'), [168715343931978085351117066959922908211]), new ElixirScript.Core.Tuple(Symbol.for('behaviour'), [Elixir.Enumerable.__load(Elixir)]), new ElixirScript.Core.Tuple(Symbol.for('protocol_impl'), [new ElixirScript.Core.Tuple(Symbol.for('protocol'), Elixir.Enumerable.__load(Elixir)), new ElixirScript.Core.Tuple(Symbol.for('for'), Elixir.Date.Range.__load(Elixir))])]], [Symbol.for('compile'), [new ElixirScript.Core.Tuple(Symbol.for('options'), []), new ElixirScript.Core.Tuple(Symbol.for('version'), [55, 46, 49, 46, 50]), new ElixirScript.Core.Tuple(Symbol.for('source'), '/private/tmp/elixir-20170929-51947-wgj4qu/elixir-1.5.2/lib/elixir/lib/calendar/date_range.ex')]], [Symbol.for('md5'), new ElixirScript.Core.BitString(ElixirScript.Core.BitString.integer(126), ElixirScript.Core.BitString.integer(237), ElixirScript.Core.BitString.integer(100), ElixirScript.Core.BitString.integer(175), ElixirScript.Core.BitString.integer(5), ElixirScript.Core.BitString.integer(140), ElixirScript.Core.BitString.integer(95), ElixirScript.Core.BitString.integer(149), ElixirScript.Core.BitString.integer(232), ElixirScript.Core.BitString.integer(82), ElixirScript.Core.BitString.integer(200), ElixirScript.Core.BitString.integer(103), ElixirScript.Core.BitString.integer(152), ElixirScript.Core.BitString.integer(95), ElixirScript.Core.BitString.integer(204), ElixirScript.Core.BitString.integer(51))], [Symbol.for('module'), Symbol.for('Elixir.Enumerable.Date.Range')]]);

        const value = __info__map__.get(kind);

        if (value !== null) {
            return value;
        }

        throw new ElixirScript.Core.Patterns.MatchError(kind);
    }

    function __impl__(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('for')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.Date.Range.__load(Elixir);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('target')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.Enumerable.Date.Range.__load(Elixir);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('protocol')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.Enumerable.__load(Elixir);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function count(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([new Map([[Symbol.for('__struct__'), {
                __MODULE__: Symbol.for('Elixir.Date.Range')
            }], [Symbol.for('first_in_iso_days'), ElixirScript.Core.Patterns.variable('first_in_iso_days')], [Symbol.for('last_in_iso_days'), ElixirScript.Core.Patterns.variable('last_in_iso_days')]])], __function_args__, (first_in_iso_days0, last_in_iso_days0) => {
                return true;
            })) !== null) {
                let [first_in_iso_days0, last_in_iso_days0] = __arg_matches__;

                return new ElixirScript.Core.Tuple(Symbol.for('ok'), ElixirScript.Core.erlang.abs(first_in_iso_days0 - last_in_iso_days0) + 1);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function date_from_iso_days_days(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('days'), Elixir.Calendar.ISO.__load(Elixir)], __function_args__, (days0) => {
                return true;
            })) !== null) {
                let [days0] = __arg_matches__;

                const [year0, month0, day0] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                    values: [ElixirScript.Core.Patterns.variable('year'), ElixirScript.Core.Patterns.variable('month'), ElixirScript.Core.Patterns.variable('day')]
                }), Elixir.Calendar.ISO.__load(Elixir).date_from_iso_days_days(days0));

                const _ref6591030 = new ElixirScript.Core.Tuple(year0, month0, day0);

                return Elixir.Date.__load(Elixir).__struct__(new Map([[Symbol.for('year'), year0], [Symbol.for('month'), month0], [Symbol.for('day'), day0], [Symbol.for('calendar'), Elixir.Calendar.ISO.__load(Elixir)]]));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('days'), ElixirScript.Core.Patterns.variable('calendar')], __function_args__, (days0, calendar0) => {
                return true;
            })) !== null) {
                let [days0, calendar0] = __arg_matches__;

                const [year0, month0, day0] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                    values: [ElixirScript.Core.Patterns.variable('year'), ElixirScript.Core.Patterns.variable('month'), ElixirScript.Core.Patterns.variable('day'), ElixirScript.Core.Patterns.variable('_'), ElixirScript.Core.Patterns.variable('_'), ElixirScript.Core.Patterns.variable('_'), ElixirScript.Core.Patterns.variable('_')]
                }), calendar0.naive_datetime_from_iso_days(new ElixirScript.Core.Tuple(days0, new ElixirScript.Core.Tuple(0, 86400000000))));

                const _ref2050879 = new ElixirScript.Core.Tuple(year0, month0, day0);

                return Elixir.Date.__load(Elixir).__struct__(new Map([[Symbol.for('year'), year0], [Symbol.for('month'), month0], [Symbol.for('day'), day0], [Symbol.for('calendar'), calendar0]]));
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function member__qmark__(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([new Map([[Symbol.for('first'), new Map([[Symbol.for('calendar'), ElixirScript.Core.Patterns.variable('calendar')], [Symbol.for('year'), ElixirScript.Core.Patterns.variable('first_year')], [Symbol.for('month'), ElixirScript.Core.Patterns.variable('first_month')], [Symbol.for('day'), ElixirScript.Core.Patterns.variable('first_day')]])], [Symbol.for('last'), new Map([[Symbol.for('calendar'), ElixirScript.Core.Patterns.variable('calendar')], [Symbol.for('year'), ElixirScript.Core.Patterns.variable('last_year')], [Symbol.for('month'), ElixirScript.Core.Patterns.variable('last_month')], [Symbol.for('day'), ElixirScript.Core.Patterns.variable('last_day')]])], [Symbol.for('first_in_iso_days'), ElixirScript.Core.Patterns.variable('first_in_iso_days')], [Symbol.for('last_in_iso_days'), ElixirScript.Core.Patterns.variable('last_in_iso_days')]]), new Map([[Symbol.for('__struct__'), {
                __MODULE__: Symbol.for('Elixir.Date')
            }], [Symbol.for('calendar'), ElixirScript.Core.Patterns.variable('calendar')], [Symbol.for('year'), ElixirScript.Core.Patterns.variable('year')], [Symbol.for('month'), ElixirScript.Core.Patterns.variable('month')], [Symbol.for('day'), ElixirScript.Core.Patterns.variable('day')]])], __function_args__, (calendar0, first_year0, first_month0, first_day0, calendar1, last_year0, last_month0, last_day0, first_in_iso_days0, last_in_iso_days0, calendar2, year0, month0, day0) => {
                return true;
            })) !== null) {
                let [calendar0, first_year0, first_month0, first_day0, calendar1, last_year0, last_month0, last_day0, first_in_iso_days0, last_in_iso_days0, calendar2, year0, month0, day0] = __arg_matches__;

                const [first0] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.variable('first'), new ElixirScript.Core.Tuple(first_year0, first_month0, first_day0));

                const [last0] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.variable('last'), new ElixirScript.Core.Tuple(last_year0, last_month0, last_day0));

                const [date0] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.variable('date'), new ElixirScript.Core.Tuple(year0, month0, day0));

                return ElixirScript.Core.Patterns.defmatch(ElixirScript.Core.Patterns.clause([false], () => {
                    return new ElixirScript.Core.Tuple(Symbol.for('ok'), ElixirScript.Core.Patterns.defmatch(ElixirScript.Core.Patterns.clause([true], () => {
                        return date0 <= first0;
                    }, () => {
                        return true;
                    }), ElixirScript.Core.Patterns.clause([false], () => {
                        return false;
                    }, () => {
                        return true;
                    })).call(this, date0 >= last0));
                }, () => {
                    return true;
                }), ElixirScript.Core.Patterns.clause([true], () => {
                    return new ElixirScript.Core.Tuple(Symbol.for('ok'), ElixirScript.Core.Patterns.defmatch(ElixirScript.Core.Patterns.clause([true], () => {
                        return date0 <= last0;
                    }, () => {
                        return true;
                    }), ElixirScript.Core.Patterns.clause([false], () => {
                        return false;
                    }, () => {
                        return true;
                    })).call(this, date0 >= first0));
                }, () => {
                    return true;
                })).call(this, first_in_iso_days0 <= last_in_iso_days0);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('_'), ElixirScript.Core.Patterns.variable('_')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return new ElixirScript.Core.Tuple(Symbol.for('ok'), false);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function reduce(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([new Map([[Symbol.for('__struct__'), {
                __MODULE__: Symbol.for('Elixir.Date.Range')
            }], [Symbol.for('first_in_iso_days'), ElixirScript.Core.Patterns.variable('first_in_iso_days')], [Symbol.for('last_in_iso_days'), ElixirScript.Core.Patterns.variable('last_in_iso_days')], [Symbol.for('first'), new Map([[Symbol.for('calendar'), ElixirScript.Core.Patterns.variable('calendar')]])]]), ElixirScript.Core.Patterns.variable('acc'), ElixirScript.Core.Patterns.variable('fun')], __function_args__, (first_in_iso_days0, last_in_iso_days0, calendar0, acc0, fun0) => {
                return true;
            })) !== null) {
                let [first_in_iso_days0, last_in_iso_days0, calendar0, acc0, fun0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, first_in_iso_days0, last_in_iso_days0, acc0, fun0, calendar0, first_in_iso_days0 <= last_in_iso_days0));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('_x'), ElixirScript.Core.Patterns.variable('_y'), ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                values: [Symbol.for('halt'), ElixirScript.Core.Patterns.variable('acc')]
            }), ElixirScript.Core.Patterns.variable('_fun'), ElixirScript.Core.Patterns.variable('_calendar'), ElixirScript.Core.Patterns.variable('_up?')], __function_args__, (_x0, _y0, acc0, _fun0, _calendar0, _up__qmark__0) => {
                return true;
            })) !== null) {
                let [_x0, _y0, acc0, _fun0, _calendar0, _up__qmark__0] = __arg_matches__;

                return new ElixirScript.Core.Tuple(Symbol.for('halted'), acc0);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('x'), ElixirScript.Core.Patterns.variable('y'), ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                values: [Symbol.for('suspend'), ElixirScript.Core.Patterns.variable('acc')]
            }), ElixirScript.Core.Patterns.variable('fun'), ElixirScript.Core.Patterns.variable('calendar'), ElixirScript.Core.Patterns.variable('up?')], __function_args__, (x0, y0, acc0, fun0, calendar0, up__qmark__0) => {
                return true;
            })) !== null) {
                let [x0, y0, acc0, fun0, calendar0, up__qmark__0] = __arg_matches__;

                return new ElixirScript.Core.Tuple(Symbol.for('suspended'), acc0, (...__function_args__) => {
                    function recur(...__function_args__) {
                        let __arg_matches__ = null;

                        if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('x1')], __function_args__, (x10) => {
                            return true;
                        })) !== null) {
                            let [x10] = __arg_matches__;

                            return reduce(x0, y0, x10, fun0, calendar0, up__qmark__0);
                        }

                        throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
                    }

                    return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
                });
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('x'), ElixirScript.Core.Patterns.variable('y'), ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                values: [Symbol.for('cont'), ElixirScript.Core.Patterns.variable('acc')]
            }), ElixirScript.Core.Patterns.variable('fun'), ElixirScript.Core.Patterns.variable('calendar'), ElixirScript.Core.Patterns.capture(true)], __function_args__, (x0, y0, acc0, fun0, calendar0, up__qmark__0) => {
                return x0 <= y0;
            })) !== null) {
                let [x0, y0, acc0, fun0, calendar0, up__qmark__0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, x0 + 1, y0, fun0(date_from_iso_days_days(x0, calendar0), acc0), fun0, calendar0, up__qmark__0));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('x'), ElixirScript.Core.Patterns.variable('y'), ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                values: [Symbol.for('cont'), ElixirScript.Core.Patterns.variable('acc')]
            }), ElixirScript.Core.Patterns.variable('fun'), ElixirScript.Core.Patterns.variable('calendar'), ElixirScript.Core.Patterns.capture(false)], __function_args__, (x0, y0, acc0, fun0, calendar0, up__qmark__0) => {
                return x0 >= y0;
            })) !== null) {
                let [x0, y0, acc0, fun0, calendar0, up__qmark__0] = __arg_matches__;

                return new ElixirScript.Core.Functions.Recurse(recur.bind(null, x0 - 1, y0, fun0(date_from_iso_days_days(x0, calendar0), acc0), fun0, calendar0, up__qmark__0));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('_'), ElixirScript.Core.Patterns.variable('_'), ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                values: [Symbol.for('cont'), ElixirScript.Core.Patterns.variable('acc')]
            }), ElixirScript.Core.Patterns.variable('_fun'), ElixirScript.Core.Patterns.variable('_calendar'), ElixirScript.Core.Patterns.variable('_up')], __function_args__, (acc0, _fun0, _calendar0, _up0) => {
                return true;
            })) !== null) {
                let [acc0, _fun0, _calendar0, _up0] = __arg_matches__;

                return new ElixirScript.Core.Tuple(Symbol.for('done'), acc0);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    const __exports = {
        __impl__,
        count,
        member__qmark__,
        reduce,
        __MODULE__: Symbol.for('Elixir.Enumerable.Date.Range'),
        __info__
    };

    Elixir.Enumerable.Date.Range.__exports = __exports

    return __exports;
}
ElixirScript.Core.Functions.build_namespace(Elixir, 'Elixir.Inspect.Float').__load = function(Elixir) {
    if (Elixir.Inspect.Float.__exports)
        return Elixir.Inspect.Float.__exports;

    function __info__(kind) {
        const __info__map__ = new Map([[Symbol.for('functions'), [new ElixirScript.Core.Tuple(Symbol.for('__impl__'), 1), new ElixirScript.Core.Tuple(Symbol.for('inspect'), 2)]], [Symbol.for('macros'), []], [Symbol.for('attributes'), [new ElixirScript.Core.Tuple(Symbol.for('vsn'), [89087476177898614045903688196455465555]), new ElixirScript.Core.Tuple(Symbol.for('behaviour'), [Elixir.Inspect.__load(Elixir)]), new ElixirScript.Core.Tuple(Symbol.for('protocol_impl'), [new ElixirScript.Core.Tuple(Symbol.for('protocol'), Elixir.Inspect.__load(Elixir)), new ElixirScript.Core.Tuple(Symbol.for('for'), Elixir.Float.__load(Elixir))])]], [Symbol.for('compile'), [new ElixirScript.Core.Tuple(Symbol.for('options'), []), new ElixirScript.Core.Tuple(Symbol.for('version'), [55, 46, 49, 46, 50]), new ElixirScript.Core.Tuple(Symbol.for('source'), '/private/tmp/elixir-20170929-51947-wgj4qu/elixir-1.5.2/lib/elixir/lib/inspect.ex')]], [Symbol.for('md5'), new ElixirScript.Core.BitString(ElixirScript.Core.BitString.integer(67), ElixirScript.Core.BitString.integer(5), ElixirScript.Core.BitString.integer(159), ElixirScript.Core.BitString.integer(177), ElixirScript.Core.BitString.integer(159), ElixirScript.Core.BitString.integer(245), ElixirScript.Core.BitString.integer(111), ElixirScript.Core.BitString.integer(174), ElixirScript.Core.BitString.integer(41), ElixirScript.Core.BitString.integer(191), ElixirScript.Core.BitString.integer(145), ElixirScript.Core.BitString.integer(248), ElixirScript.Core.BitString.integer(251), ElixirScript.Core.BitString.integer(197), ElixirScript.Core.BitString.integer(2), ElixirScript.Core.BitString.integer(83))], [Symbol.for('module'), Symbol.for('Elixir.Inspect.Float')]]);

        const value = __info__map__.get(kind);

        if (value !== null) {
            return value;
        }

        throw new ElixirScript.Core.Patterns.MatchError(kind);
    }

    function __impl__(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('for')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.Float.__load(Elixir);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('target')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.Inspect.Float.__load(Elixir);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('protocol')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.Inspect.__load(Elixir);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function inspect(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('term'), ElixirScript.Core.Patterns.variable('opts')], __function_args__, (term0, opts0) => {
                return true;
            })) !== null) {
                let [term0, opts0] = __arg_matches__;

                const [inspected0] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.variable('inspected'), ElixirScript.Core.erlang.iolist_to_binary(io_lib_format.fwrite_g(term0)));

                return Elixir.Inspect.Algebra.__load(Elixir).color(inspected0, Symbol.for('number'), opts0);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    const __exports = {
        __impl__,
        inspect,
        __MODULE__: Symbol.for('Elixir.Inspect.Float'),
        __info__
    };

    Elixir.Inspect.Float.__exports = __exports

    return __exports;
}
ElixirScript.Core.Functions.build_namespace(Elixir, 'Elixir.Inspect.DateTime').__load = function(Elixir) {
    if (Elixir.Inspect.DateTime.__exports)
        return Elixir.Inspect.DateTime.__exports;

    function __info__(kind) {
        const __info__map__ = new Map([[Symbol.for('functions'), [new ElixirScript.Core.Tuple(Symbol.for('__impl__'), 1), new ElixirScript.Core.Tuple(Symbol.for('inspect'), 2)]], [Symbol.for('macros'), []], [Symbol.for('attributes'), [new ElixirScript.Core.Tuple(Symbol.for('vsn'), [231978842975781920988326917422164751410]), new ElixirScript.Core.Tuple(Symbol.for('behaviour'), [Elixir.Inspect.__load(Elixir)]), new ElixirScript.Core.Tuple(Symbol.for('protocol_impl'), [new ElixirScript.Core.Tuple(Symbol.for('protocol'), Elixir.Inspect.__load(Elixir)), new ElixirScript.Core.Tuple(Symbol.for('for'), Elixir.DateTime.__load(Elixir))])]], [Symbol.for('compile'), [new ElixirScript.Core.Tuple(Symbol.for('options'), []), new ElixirScript.Core.Tuple(Symbol.for('version'), [55, 46, 49, 46, 50]), new ElixirScript.Core.Tuple(Symbol.for('source'), '/private/tmp/elixir-20170929-51947-wgj4qu/elixir-1.5.2/lib/elixir/lib/calendar/datetime.ex')]], [Symbol.for('md5'), new ElixirScript.Core.BitString(ElixirScript.Core.BitString.integer(174), ElixirScript.Core.BitString.integer(133), ElixirScript.Core.BitString.integer(128), ElixirScript.Core.BitString.integer(0), ElixirScript.Core.BitString.integer(253), ElixirScript.Core.BitString.integer(241), ElixirScript.Core.BitString.integer(233), ElixirScript.Core.BitString.integer(37), ElixirScript.Core.BitString.integer(186), ElixirScript.Core.BitString.integer(19), ElixirScript.Core.BitString.integer(127), ElixirScript.Core.BitString.integer(34), ElixirScript.Core.BitString.integer(44), ElixirScript.Core.BitString.integer(244), ElixirScript.Core.BitString.integer(52), ElixirScript.Core.BitString.integer(50))], [Symbol.for('module'), Symbol.for('Elixir.Inspect.DateTime')]]);

        const value = __info__map__.get(kind);

        if (value !== null) {
            return value;
        }

        throw new ElixirScript.Core.Patterns.MatchError(kind);
    }

    function __impl__(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('for')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.DateTime.__load(Elixir);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('target')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.Inspect.DateTime.__load(Elixir);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('protocol')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.Inspect.__load(Elixir);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function inspect(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([new Map([[Symbol.for('calendar'), Elixir.Calendar.ISO.__load(Elixir)], [Symbol.for('year'), ElixirScript.Core.Patterns.variable('year')], [Symbol.for('month'), ElixirScript.Core.Patterns.variable('month')], [Symbol.for('day'), ElixirScript.Core.Patterns.variable('day')], [Symbol.for('hour'), ElixirScript.Core.Patterns.variable('hour')], [Symbol.for('minute'), ElixirScript.Core.Patterns.variable('minute')], [Symbol.for('second'), ElixirScript.Core.Patterns.variable('second')], [Symbol.for('microsecond'), ElixirScript.Core.Patterns.variable('microsecond')], [Symbol.for('time_zone'), ElixirScript.Core.Patterns.variable('time_zone')], [Symbol.for('zone_abbr'), ElixirScript.Core.Patterns.variable('zone_abbr')], [Symbol.for('utc_offset'), ElixirScript.Core.Patterns.variable('utc_offset')], [Symbol.for('std_offset'), ElixirScript.Core.Patterns.variable('std_offset')]]), ElixirScript.Core.Patterns.variable('_')], __function_args__, (year0, month0, day0, hour0, minute0, second0, microsecond0, time_zone0, zone_abbr0, utc_offset0, std_offset0) => {
                return true;
            })) !== null) {
                let [year0, month0, day0, hour0, minute0, second0, microsecond0, time_zone0, zone_abbr0, utc_offset0, std_offset0] = __arg_matches__;

                return '#DateTime<' + (Elixir.Calendar.ISO.__load(Elixir).datetime_to_string(year0, month0, day0, hour0, minute0, second0, microsecond0, time_zone0, zone_abbr0, utc_offset0, std_offset0) + '>');
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('datetime'), ElixirScript.Core.Patterns.variable('opts')], __function_args__, (datetime0, opts0) => {
                return true;
            })) !== null) {
                let [datetime0, opts0] = __arg_matches__;

                return Elixir.Inspect.Any.__load(Elixir).inspect(datetime0, opts0);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    const __exports = {
        __impl__,
        inspect,
        __MODULE__: Symbol.for('Elixir.Inspect.DateTime'),
        __info__
    };

    Elixir.Inspect.DateTime.__exports = __exports

    return __exports;
}
ElixirScript.Core.Functions.build_namespace(Elixir, 'Elixir.Inspect.Atom').__load = function(Elixir) {
    if (Elixir.Inspect.Atom.__exports)
        return Elixir.Inspect.Atom.__exports;

    function __info__(kind) {
        const __info__map__ = new Map([[Symbol.for('functions'), [new ElixirScript.Core.Tuple(Symbol.for('__impl__'), 1), new ElixirScript.Core.Tuple(Symbol.for('inspect'), 1), new ElixirScript.Core.Tuple(Symbol.for('inspect'), 2)]], [Symbol.for('macros'), []], [Symbol.for('attributes'), [new ElixirScript.Core.Tuple(Symbol.for('vsn'), [267231803564960618030444420931652859533]), new ElixirScript.Core.Tuple(Symbol.for('behaviour'), [Elixir.Inspect.__load(Elixir)]), new ElixirScript.Core.Tuple(Symbol.for('protocol_impl'), [new ElixirScript.Core.Tuple(Symbol.for('protocol'), Elixir.Inspect.__load(Elixir)), new ElixirScript.Core.Tuple(Symbol.for('for'), Elixir.Atom.__load(Elixir))])]], [Symbol.for('compile'), [new ElixirScript.Core.Tuple(Symbol.for('options'), []), new ElixirScript.Core.Tuple(Symbol.for('version'), [55, 46, 49, 46, 50]), new ElixirScript.Core.Tuple(Symbol.for('source'), '/private/tmp/elixir-20170929-51947-wgj4qu/elixir-1.5.2/lib/elixir/lib/inspect.ex')]], [Symbol.for('md5'), new ElixirScript.Core.BitString(ElixirScript.Core.BitString.integer(201), ElixirScript.Core.BitString.integer(10), ElixirScript.Core.BitString.integer(249), ElixirScript.Core.BitString.integer(39), ElixirScript.Core.BitString.integer(108), ElixirScript.Core.BitString.integer(242), ElixirScript.Core.BitString.integer(125), ElixirScript.Core.BitString.integer(31), ElixirScript.Core.BitString.integer(21), ElixirScript.Core.BitString.integer(87), ElixirScript.Core.BitString.integer(33), ElixirScript.Core.BitString.integer(252), ElixirScript.Core.BitString.integer(61), ElixirScript.Core.BitString.integer(226), ElixirScript.Core.BitString.integer(182), ElixirScript.Core.BitString.integer(141))], [Symbol.for('module'), Symbol.for('Elixir.Inspect.Atom')]]);

        const value = __info__map__.get(kind);

        if (value !== null) {
            return value;
        }

        throw new ElixirScript.Core.Patterns.MatchError(kind);
    }

    function __impl__(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('for')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.Atom.__load(Elixir);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('target')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.Inspect.Atom.__load(Elixir);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('protocol')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.Inspect.__load(Elixir);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function color_key(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('atom')], __function_args__, (atom0) => {
                return ElixirScript.Core.erlang.is_boolean(atom0);
            })) !== null) {
                let [atom0] = __arg_matches__;

                return Symbol.for('boolean');
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([null], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return null;
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('_')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Symbol.for('atom');
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function inspect(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('atom')], __function_args__, (atom0) => {
                return ElixirScript.Core.erlang.equals(atom0, null) || ElixirScript.Core.erlang.is_boolean(atom0);
            })) !== null) {
                let [atom0] = __arg_matches__;

                return ElixirScript.Core.erlang.atom_to_binary(atom0, Symbol.for('utf8'));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('atom')], __function_args__, (atom0) => {
                return ElixirScript.Core.erlang.is_atom(atom0);
            })) !== null) {
                let [atom0] = __arg_matches__;

                const [binary0] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.variable('binary'), ElixirScript.Core.erlang.atom_to_binary(atom0, Symbol.for('utf8')));

                return ElixirScript.Core.Patterns.defmatch(ElixirScript.Core.Patterns.clause([Symbol.for('alias')], () => {
                    return ElixirScript.Core.Patterns.defmatch(ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.variable('binary')], (binary1) => {
                        return binary1;
                    }, (binary1) => {
                        return binary1 === 'Elixir.Elixir' || binary1 === 'Elixir';
                    }), ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.bitStringMatch(ElixirScript.Core.BitString.binary('Elixir.Elixir.'), ElixirScript.Core.BitString.binary({
                        'value': ElixirScript.Core.Patterns.variable()
                    }))], (_rest0) => {
                        return binary0;
                    }, (_rest0) => {
                        return true;
                    }), ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.bitStringMatch(ElixirScript.Core.BitString.binary('Elixir.'), ElixirScript.Core.BitString.binary({
                        'value': ElixirScript.Core.Patterns.variable()
                    }))], (rest0) => {
                        return rest0;
                    }, (rest0) => {
                        return true;
                    })).call(this, binary0);
                }, () => {
                    return true;
                }), ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.variable('type')], (type0) => {
                    return ':' + binary0;
                }, (type0) => {
                    return type0 === Symbol.for('not_callable') || type0 === Symbol.for('callable');
                }), ElixirScript.Core.Patterns.clause([Symbol.for('other')], () => {
                    const [escaped0] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                        values: [ElixirScript.Core.Patterns.variable('escaped'), ElixirScript.Core.Patterns.variable('_')]
                    }), Elixir.Inspect.BitString.__load(Elixir).escape(binary0, 34));

                    const _ref4753461 = new ElixirScript.Core.Tuple(escaped0);

                    return ElixirScript.Core.erlang.iolist_to_binary([58, 34, escaped0, 34]);
                }, () => {
                    return true;
                })).call(this, Elixir.Macro.__load(Elixir).classify_identifier(atom0));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('atom'), ElixirScript.Core.Patterns.variable('opts')], __function_args__, (atom0, opts0) => {
                return true;
            })) !== null) {
                let [atom0, opts0] = __arg_matches__;

                return Elixir.Inspect.Algebra.__load(Elixir).color(inspect(atom0), color_key(atom0), opts0);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    const __exports = {
        __impl__,
        inspect,
        __MODULE__: Symbol.for('Elixir.Inspect.Atom'),
        __info__
    };

    Elixir.Inspect.Atom.__exports = __exports

    return __exports;
}
ElixirScript.Core.Functions.build_namespace(Elixir, 'Elixir.Inspect.Date.Range').__load = function(Elixir) {
    if (Elixir.Inspect.Date.Range.__exports)
        return Elixir.Inspect.Date.Range.__exports;

    function __info__(kind) {
        const __info__map__ = new Map([[Symbol.for('functions'), [new ElixirScript.Core.Tuple(Symbol.for('__impl__'), 1), new ElixirScript.Core.Tuple(Symbol.for('inspect'), 2)]], [Symbol.for('macros'), []], [Symbol.for('attributes'), [new ElixirScript.Core.Tuple(Symbol.for('vsn'), [48658295195240662390305946859954921906]), new ElixirScript.Core.Tuple(Symbol.for('behaviour'), [Elixir.Inspect.__load(Elixir)]), new ElixirScript.Core.Tuple(Symbol.for('protocol_impl'), [new ElixirScript.Core.Tuple(Symbol.for('protocol'), Elixir.Inspect.__load(Elixir)), new ElixirScript.Core.Tuple(Symbol.for('for'), Elixir.Date.Range.__load(Elixir))])]], [Symbol.for('compile'), [new ElixirScript.Core.Tuple(Symbol.for('options'), []), new ElixirScript.Core.Tuple(Symbol.for('version'), [55, 46, 49, 46, 50]), new ElixirScript.Core.Tuple(Symbol.for('source'), '/private/tmp/elixir-20170929-51947-wgj4qu/elixir-1.5.2/lib/elixir/lib/calendar/date_range.ex')]], [Symbol.for('md5'), new ElixirScript.Core.BitString(ElixirScript.Core.BitString.integer(36), ElixirScript.Core.BitString.integer(155), ElixirScript.Core.BitString.integer(63), ElixirScript.Core.BitString.integer(44), ElixirScript.Core.BitString.integer(181), ElixirScript.Core.BitString.integer(41), ElixirScript.Core.BitString.integer(54), ElixirScript.Core.BitString.integer(230), ElixirScript.Core.BitString.integer(189), ElixirScript.Core.BitString.integer(182), ElixirScript.Core.BitString.integer(109), ElixirScript.Core.BitString.integer(58), ElixirScript.Core.BitString.integer(111), ElixirScript.Core.BitString.integer(218), ElixirScript.Core.BitString.integer(97), ElixirScript.Core.BitString.integer(178))], [Symbol.for('module'), Symbol.for('Elixir.Inspect.Date.Range')]]);

        const value = __info__map__.get(kind);

        if (value !== null) {
            return value;
        }

        throw new ElixirScript.Core.Patterns.MatchError(kind);
    }

    function __impl__(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('for')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.Date.Range.__load(Elixir);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('target')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.Inspect.Date.Range.__load(Elixir);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('protocol')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.Inspect.__load(Elixir);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function inspect(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([new Map([[Symbol.for('__struct__'), {
                __MODULE__: Symbol.for('Elixir.Date.Range')
            }], [Symbol.for('first'), ElixirScript.Core.Patterns.variable('first')], [Symbol.for('last'), ElixirScript.Core.Patterns.variable('last')]]), ElixirScript.Core.Patterns.variable('_')], __function_args__, (first0, last0) => {
                return true;
            })) !== null) {
                let [first0, last0] = __arg_matches__;

                return '#DateRange<' + (Elixir.Kernel.__load(Elixir).inspect(first0) + (', ' + (Elixir.Kernel.__load(Elixir).inspect(last0) + '>')));
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    const __exports = {
        __impl__,
        inspect,
        __MODULE__: Symbol.for('Elixir.Inspect.Date.Range'),
        __info__
    };

    Elixir.Inspect.Date.Range.__exports = __exports

    return __exports;
}
ElixirScript.Core.Functions.build_namespace(Elixir, 'Elixir.Inspect.Any').__load = function(Elixir) {
    if (Elixir.Inspect.Any.__exports)
        return Elixir.Inspect.Any.__exports;

    function __info__(kind) {
        const __info__map__ = new Map([[Symbol.for('functions'), [new ElixirScript.Core.Tuple(Symbol.for('__impl__'), 1), new ElixirScript.Core.Tuple(Symbol.for('inspect'), 2)]], [Symbol.for('macros'), []], [Symbol.for('attributes'), [new ElixirScript.Core.Tuple(Symbol.for('vsn'), [232443040136612472322366954251157380634]), new ElixirScript.Core.Tuple(Symbol.for('behaviour'), [Elixir.Inspect.__load(Elixir)]), new ElixirScript.Core.Tuple(Symbol.for('protocol_impl'), [new ElixirScript.Core.Tuple(Symbol.for('protocol'), Elixir.Inspect.__load(Elixir)), new ElixirScript.Core.Tuple(Symbol.for('for'), Elixir.Any.__load(Elixir))])]], [Symbol.for('compile'), [new ElixirScript.Core.Tuple(Symbol.for('options'), []), new ElixirScript.Core.Tuple(Symbol.for('version'), [55, 46, 49, 46, 50]), new ElixirScript.Core.Tuple(Symbol.for('source'), '/private/tmp/elixir-20170929-51947-wgj4qu/elixir-1.5.2/lib/elixir/lib/inspect.ex')]], [Symbol.for('md5'), new ElixirScript.Core.BitString(ElixirScript.Core.BitString.integer(174), ElixirScript.Core.BitString.integer(222), ElixirScript.Core.BitString.integer(230), ElixirScript.Core.BitString.integer(176), ElixirScript.Core.BitString.integer(223), ElixirScript.Core.BitString.integer(51), ElixirScript.Core.BitString.integer(26), ElixirScript.Core.BitString.integer(60), ElixirScript.Core.BitString.integer(188), ElixirScript.Core.BitString.integer(33), ElixirScript.Core.BitString.integer(199), ElixirScript.Core.BitString.integer(149), ElixirScript.Core.BitString.integer(163), ElixirScript.Core.BitString.integer(214), ElixirScript.Core.BitString.integer(30), ElixirScript.Core.BitString.integer(26))], [Symbol.for('module'), Symbol.for('Elixir.Inspect.Any')]]);

        const value = __info__map__.get(kind);

        if (value !== null) {
            return value;
        }

        throw new ElixirScript.Core.Patterns.MatchError(kind);
    }

    function __impl__(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('for')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.Any.__load(Elixir);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('target')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.Inspect.Any.__load(Elixir);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('protocol')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.Inspect.__load(Elixir);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function inspect(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.capture(new Map([[Symbol.for('__struct__'), ElixirScript.Core.Patterns.variable('struct')]])), ElixirScript.Core.Patterns.variable('opts')], __function_args__, (struct0, map0, opts0) => {
                return true;
            })) !== null) {
                let [struct0, map0, opts0] = __arg_matches__;

                return ElixirScript.Core.SpecialForms._try(() => {
                    return ElixirScript.Core.Functions.call_property(struct0, '__struct__');
                }, ElixirScript.Core.Patterns.defmatch(ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.variable('_')], () => {
                    return Elixir.Inspect.Map.__load(Elixir).inspect(map0, opts0);
                }, () => {
                    return true;
                })), null, (...__function_args__) => {
                    function recur(...__function_args__) {
                        let __arg_matches__ = null;

                        if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('dunder')], __function_args__, (dunder0) => {
                            return true;
                        })) !== null) {
                            let [dunder0] = __arg_matches__;

                            return ElixirScript.Core.Patterns.defmatch(ElixirScript.Core.Patterns.clause([false], () => {
                                return Elixir.Inspect.Map.__load(Elixir).inspect(map0, opts0);
                            }, () => {
                                return true;
                            }), ElixirScript.Core.Patterns.clause([true], () => {
                                const [pruned0] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.variable('pruned'), ElixirScript.Core.maps.remove(Symbol.for('__exception__'), ElixirScript.Core.maps.remove(Symbol.for('__struct__'), map0)));

                                const [colorless_opts0] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.variable('colorless_opts'), new Map([...opts0, [Symbol.for('syntax_colors'), []]]));

                                return Elixir.Inspect.Map.__load(Elixir).inspect(pruned0, Elixir.Inspect.Atom.__load(Elixir).inspect(struct0, colorless_opts0), opts0);
                            }, () => {
                                return true;
                            })).call(this, ElixirScript.Core.erlang.equals(ElixirScript.Core.maps.keys(dunder0), ElixirScript.Core.maps.keys(map0)));
                        }

                        throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
                    }

                    return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
                }, null);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    const __exports = {
        __impl__,
        inspect,
        __MODULE__: Symbol.for('Elixir.Inspect.Any'),
        __info__
    };

    Elixir.Inspect.Any.__exports = __exports

    return __exports;
}
ElixirScript.Core.Functions.build_namespace(Elixir, 'Elixir.Inspect.Date').__load = function(Elixir) {
    if (Elixir.Inspect.Date.__exports)
        return Elixir.Inspect.Date.__exports;

    function __info__(kind) {
        const __info__map__ = new Map([[Symbol.for('functions'), [new ElixirScript.Core.Tuple(Symbol.for('__impl__'), 1), new ElixirScript.Core.Tuple(Symbol.for('inspect'), 2)]], [Symbol.for('macros'), []], [Symbol.for('attributes'), [new ElixirScript.Core.Tuple(Symbol.for('vsn'), [277507269637214045403982873272960162308]), new ElixirScript.Core.Tuple(Symbol.for('behaviour'), [Elixir.Inspect.__load(Elixir)]), new ElixirScript.Core.Tuple(Symbol.for('protocol_impl'), [new ElixirScript.Core.Tuple(Symbol.for('protocol'), Elixir.Inspect.__load(Elixir)), new ElixirScript.Core.Tuple(Symbol.for('for'), Elixir.Date.__load(Elixir))])]], [Symbol.for('compile'), [new ElixirScript.Core.Tuple(Symbol.for('options'), []), new ElixirScript.Core.Tuple(Symbol.for('version'), [55, 46, 49, 46, 50]), new ElixirScript.Core.Tuple(Symbol.for('source'), '/private/tmp/elixir-20170929-51947-wgj4qu/elixir-1.5.2/lib/elixir/lib/calendar/date.ex')]], [Symbol.for('md5'), new ElixirScript.Core.BitString(ElixirScript.Core.BitString.integer(208), ElixirScript.Core.BitString.integer(197), ElixirScript.Core.BitString.integer(244), ElixirScript.Core.BitString.integer(190), ElixirScript.Core.BitString.integer(231), ElixirScript.Core.BitString.integer(28), ElixirScript.Core.BitString.integer(238), ElixirScript.Core.BitString.integer(160), ElixirScript.Core.BitString.integer(180), ElixirScript.Core.BitString.integer(37), ElixirScript.Core.BitString.integer(213), ElixirScript.Core.BitString.integer(22), ElixirScript.Core.BitString.integer(136), ElixirScript.Core.BitString.integer(144), ElixirScript.Core.BitString.integer(26), ElixirScript.Core.BitString.integer(4))], [Symbol.for('module'), Symbol.for('Elixir.Inspect.Date')]]);

        const value = __info__map__.get(kind);

        if (value !== null) {
            return value;
        }

        throw new ElixirScript.Core.Patterns.MatchError(kind);
    }

    function __impl__(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('for')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.Date.__load(Elixir);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('target')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.Inspect.Date.__load(Elixir);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('protocol')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.Inspect.__load(Elixir);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function inspect(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([new Map([[Symbol.for('calendar'), Elixir.Calendar.ISO.__load(Elixir)], [Symbol.for('year'), ElixirScript.Core.Patterns.variable('year')], [Symbol.for('month'), ElixirScript.Core.Patterns.variable('month')], [Symbol.for('day'), ElixirScript.Core.Patterns.variable('day')]]), ElixirScript.Core.Patterns.variable('_')], __function_args__, (year0, month0, day0) => {
                return true;
            })) !== null) {
                let [year0, month0, day0] = __arg_matches__;

                return '~D[' + (Elixir.Calendar.ISO.__load(Elixir).date_to_string(year0, month0, day0) + ']');
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('date'), ElixirScript.Core.Patterns.variable('opts')], __function_args__, (date0, opts0) => {
                return true;
            })) !== null) {
                let [date0, opts0] = __arg_matches__;

                return Elixir.Inspect.Any.__load(Elixir).inspect(date0, opts0);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    const __exports = {
        __impl__,
        inspect,
        __MODULE__: Symbol.for('Elixir.Inspect.Date'),
        __info__
    };

    Elixir.Inspect.Date.__exports = __exports

    return __exports;
}
ElixirScript.Core.Functions.build_namespace(Elixir, 'Elixir.Collectable.Map').__load = function(Elixir) {
    if (Elixir.Collectable.Map.__exports)
        return Elixir.Collectable.Map.__exports;

    function __info__(kind) {
        const __info__map__ = new Map([[Symbol.for('functions'), [new ElixirScript.Core.Tuple(Symbol.for('__impl__'), 1), new ElixirScript.Core.Tuple(Symbol.for('into'), 1)]], [Symbol.for('macros'), []], [Symbol.for('attributes'), [new ElixirScript.Core.Tuple(Symbol.for('vsn'), [187995768860455173195585815177111323379]), new ElixirScript.Core.Tuple(Symbol.for('behaviour'), [Elixir.Collectable.__load(Elixir)]), new ElixirScript.Core.Tuple(Symbol.for('protocol_impl'), [new ElixirScript.Core.Tuple(Symbol.for('protocol'), Elixir.Collectable.__load(Elixir)), new ElixirScript.Core.Tuple(Symbol.for('for'), Elixir.Map.__load(Elixir))])]], [Symbol.for('compile'), [new ElixirScript.Core.Tuple(Symbol.for('options'), []), new ElixirScript.Core.Tuple(Symbol.for('version'), [55, 46, 49, 46, 50]), new ElixirScript.Core.Tuple(Symbol.for('source'), '/private/tmp/elixir-20170929-51947-wgj4qu/elixir-1.5.2/lib/elixir/lib/collectable.ex')]], [Symbol.for('md5'), new ElixirScript.Core.BitString(ElixirScript.Core.BitString.integer(141), ElixirScript.Core.BitString.integer(110), ElixirScript.Core.BitString.integer(171), ElixirScript.Core.BitString.integer(6), ElixirScript.Core.BitString.integer(106), ElixirScript.Core.BitString.integer(104), ElixirScript.Core.BitString.integer(183), ElixirScript.Core.BitString.integer(56), ElixirScript.Core.BitString.integer(47), ElixirScript.Core.BitString.integer(31), ElixirScript.Core.BitString.integer(163), ElixirScript.Core.BitString.integer(159), ElixirScript.Core.BitString.integer(58), ElixirScript.Core.BitString.integer(12), ElixirScript.Core.BitString.integer(194), ElixirScript.Core.BitString.integer(243))], [Symbol.for('module'), Symbol.for('Elixir.Collectable.Map')]]);

        const value = __info__map__.get(kind);

        if (value !== null) {
            return value;
        }

        throw new ElixirScript.Core.Patterns.MatchError(kind);
    }

    function __impl__(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('for')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.Map.__load(Elixir);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('target')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.Collectable.Map.__load(Elixir);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('protocol')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.Collectable.__load(Elixir);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function into(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('original')], __function_args__, (original0) => {
                return true;
            })) !== null) {
                let [original0] = __arg_matches__;

                return new ElixirScript.Core.Tuple(original0, (...__function_args__) => {
                    function recur(...__function_args__) {
                        let __arg_matches__ = null;

                        if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('map'), ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                            values: [Symbol.for('cont'), ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                                values: [ElixirScript.Core.Patterns.variable('k'), ElixirScript.Core.Patterns.variable('v')]
                            })]
                        })], __function_args__, (map0, k0, v0) => {
                            return true;
                        })) !== null) {
                            let [map0, k0, v0] = __arg_matches__;

                            return ElixirScript.Core.maps.put(k0, v0, map0);
                        } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('map'), Symbol.for('done')], __function_args__, (map0) => {
                            return true;
                        })) !== null) {
                            let [map0] = __arg_matches__;

                            return map0;
                        } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('_'), Symbol.for('halt')], __function_args__, () => {
                            return true;
                        })) !== null) {
                            let [] = __arg_matches__;

                            return Symbol.for('ok');
                        }

                        throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
                    }

                    return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
                });
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    const __exports = {
        __impl__,
        into,
        __MODULE__: Symbol.for('Elixir.Collectable.Map'),
        __info__
    };

    Elixir.Collectable.Map.__exports = __exports

    return __exports;
}
ElixirScript.Core.Functions.build_namespace(Elixir, 'Elixir.Collectable.File.Stream').__load = function(Elixir) {
    if (Elixir.Collectable.File.Stream.__exports)
        return Elixir.Collectable.File.Stream.__exports;

    function __info__(kind) {
        const __info__map__ = new Map([[Symbol.for('functions'), [new ElixirScript.Core.Tuple(Symbol.for('__impl__'), 1), new ElixirScript.Core.Tuple(Symbol.for('into'), 1)]], [Symbol.for('macros'), []], [Symbol.for('attributes'), [new ElixirScript.Core.Tuple(Symbol.for('vsn'), [16327015539200823396106240687071204221]), new ElixirScript.Core.Tuple(Symbol.for('behaviour'), [Elixir.Collectable.__load(Elixir)]), new ElixirScript.Core.Tuple(Symbol.for('protocol_impl'), [new ElixirScript.Core.Tuple(Symbol.for('protocol'), Elixir.Collectable.__load(Elixir)), new ElixirScript.Core.Tuple(Symbol.for('for'), Elixir.File.Stream.__load(Elixir))])]], [Symbol.for('compile'), [new ElixirScript.Core.Tuple(Symbol.for('options'), []), new ElixirScript.Core.Tuple(Symbol.for('version'), [55, 46, 49, 46, 50]), new ElixirScript.Core.Tuple(Symbol.for('source'), '/private/tmp/elixir-20170929-51947-wgj4qu/elixir-1.5.2/lib/elixir/lib/file/stream.ex')]], [Symbol.for('md5'), new ElixirScript.Core.BitString(ElixirScript.Core.BitString.integer(12), ElixirScript.Core.BitString.integer(72), ElixirScript.Core.BitString.integer(120), ElixirScript.Core.BitString.integer(4), ElixirScript.Core.BitString.integer(31), ElixirScript.Core.BitString.integer(254), ElixirScript.Core.BitString.integer(240), ElixirScript.Core.BitString.integer(67), ElixirScript.Core.BitString.integer(110), ElixirScript.Core.BitString.integer(142), ElixirScript.Core.BitString.integer(251), ElixirScript.Core.BitString.integer(191), ElixirScript.Core.BitString.integer(48), ElixirScript.Core.BitString.integer(162), ElixirScript.Core.BitString.integer(147), ElixirScript.Core.BitString.integer(125))], [Symbol.for('module'), Symbol.for('Elixir.Collectable.File.Stream')]]);

        const value = __info__map__.get(kind);

        if (value !== null) {
            return value;
        }

        throw new ElixirScript.Core.Patterns.MatchError(kind);
    }

    function __impl__(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('for')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.File.Stream.__load(Elixir);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('target')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.Collectable.File.Stream.__load(Elixir);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('protocol')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.Collectable.__load(Elixir);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function into(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.capture(new Map([[Symbol.for('path'), ElixirScript.Core.Patterns.variable('path')], [Symbol.for('modes'), ElixirScript.Core.Patterns.variable('modes')], [Symbol.for('raw'), ElixirScript.Core.Patterns.variable('raw')]]))], __function_args__, (path0, modes0, raw0, stream0) => {
                return true;
            })) !== null) {
                let [path0, modes0, raw0, stream0] = __arg_matches__;

                const [modes1] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.variable('modes'), ElixirScript.Core.SpecialForms._for(ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.variable('mode')], (mode0) => {
                    return mode;
                }, (mode0) => {
                    return ElixirScript.Core.erlang.not(mode === Symbol.for('read'));
                }), [ElixirScript.Core.Patterns.list_generator(ElixirScript.Core.Patterns.variable('mode'), modes0)], Elixir.Collectable.__load(Elixir), []));

                return ElixirScript.Core.Patterns.defmatch(ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                    values: [Symbol.for('ok'), ElixirScript.Core.Patterns.variable('device')]
                })], (device0) => {
                    return new ElixirScript.Core.Tuple(Symbol.for('ok'), into(device0, stream0, raw0));
                }, (device0) => {
                    return true;
                }), ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                    values: [Symbol.for('error'), ElixirScript.Core.Patterns.variable('reason')]
                })], (reason0) => {
                    return ElixirScript.Core.erlang.error(Elixir.File.Error.__load(Elixir).exception([new ElixirScript.Core.Tuple(Symbol.for('reason'), reason0), new ElixirScript.Core.Tuple(Symbol.for('action'), 'stream'), new ElixirScript.Core.Tuple(Symbol.for('path'), path0)]));
                }, (reason0) => {
                    return true;
                })).call(this, ElixirScript.Core.file.open(path0, ElixirScript.Core.Functions.concat(Symbol.for('write'), modes1)));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('device'), ElixirScript.Core.Patterns.variable('stream'), ElixirScript.Core.Patterns.variable('raw')], __function_args__, (device0, stream0, raw0) => {
                return true;
            })) !== null) {
                let [device0, stream0, raw0] = __arg_matches__;

                return (...__function_args__) => {
                    function recur(...__function_args__) {
                        let __arg_matches__ = null;

                        if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('ok'), ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                            values: [Symbol.for('cont'), ElixirScript.Core.Patterns.variable('x')]
                        })], __function_args__, (x0) => {
                            return true;
                        })) !== null) {
                            let [x0] = __arg_matches__;

                            return ElixirScript.Core.Patterns.defmatch(ElixirScript.Core.Patterns.clause([true], () => {
                                return Elixir.IO.__load(Elixir).binwrite(device0, x0);
                            }, () => {
                                return true;
                            }), ElixirScript.Core.Patterns.clause([false], () => {
                                return Elixir.IO.__load(Elixir).write(device0, x0);
                            }, () => {
                                return true;
                            })).call(this, raw0);
                        } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('ok'), Symbol.for('done')], __function_args__, () => {
                            return true;
                        })) !== null) {
                            let [] = __arg_matches__;

                            const [] = ElixirScript.Core.Patterns.match(Symbol.for('ok'), ElixirScript.Core.file.close(device0));

                            return stream0;
                        } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('ok'), Symbol.for('halt')], __function_args__, () => {
                            return true;
                        })) !== null) {
                            let [] = __arg_matches__;

                            const [] = ElixirScript.Core.Patterns.match(Symbol.for('ok'), ElixirScript.Core.file.close(device0));

                            return [];
                        }

                        throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
                    }

                    return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
                };
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    const __exports = {
        __impl__,
        into,
        __MODULE__: Symbol.for('Elixir.Collectable.File.Stream'),
        __info__
    };

    Elixir.Collectable.File.Stream.__exports = __exports

    return __exports;
}
ElixirScript.Core.Functions.build_namespace(Elixir, 'Elixir.Collectable.MapSet').__load = function(Elixir) {
    if (Elixir.Collectable.MapSet.__exports)
        return Elixir.Collectable.MapSet.__exports;

    function __info__(kind) {
        const __info__map__ = new Map([[Symbol.for('functions'), [new ElixirScript.Core.Tuple(Symbol.for('__impl__'), 1), new ElixirScript.Core.Tuple(Symbol.for('into'), 1)]], [Symbol.for('macros'), []], [Symbol.for('attributes'), [new ElixirScript.Core.Tuple(Symbol.for('vsn'), [201123945222870993102087730716103515836]), new ElixirScript.Core.Tuple(Symbol.for('behaviour'), [Elixir.Collectable.__load(Elixir)]), new ElixirScript.Core.Tuple(Symbol.for('protocol_impl'), [new ElixirScript.Core.Tuple(Symbol.for('protocol'), Elixir.Collectable.__load(Elixir)), new ElixirScript.Core.Tuple(Symbol.for('for'), Elixir.MapSet.__load(Elixir))])]], [Symbol.for('compile'), [new ElixirScript.Core.Tuple(Symbol.for('options'), []), new ElixirScript.Core.Tuple(Symbol.for('version'), [55, 46, 49, 46, 50]), new ElixirScript.Core.Tuple(Symbol.for('source'), '/private/tmp/elixir-20170929-51947-wgj4qu/elixir-1.5.2/lib/elixir/lib/map_set.ex')]], [Symbol.for('md5'), new ElixirScript.Core.BitString(ElixirScript.Core.BitString.integer(151), ElixirScript.Core.BitString.integer(79), ElixirScript.Core.BitString.integer(16), ElixirScript.Core.BitString.integer(23), ElixirScript.Core.BitString.integer(215), ElixirScript.Core.BitString.integer(152), ElixirScript.Core.BitString.integer(3), ElixirScript.Core.BitString.integer(35), ElixirScript.Core.BitString.integer(100), ElixirScript.Core.BitString.integer(144), ElixirScript.Core.BitString.integer(10), ElixirScript.Core.BitString.integer(46), ElixirScript.Core.BitString.integer(235), ElixirScript.Core.BitString.integer(181), ElixirScript.Core.BitString.integer(158), ElixirScript.Core.BitString.integer(188))], [Symbol.for('module'), Symbol.for('Elixir.Collectable.MapSet')]]);

        const value = __info__map__.get(kind);

        if (value !== null) {
            return value;
        }

        throw new ElixirScript.Core.Patterns.MatchError(kind);
    }

    function __impl__(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('for')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.MapSet.__load(Elixir);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('target')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.Collectable.MapSet.__load(Elixir);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('protocol')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.Collectable.__load(Elixir);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function into(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('original')], __function_args__, (original0) => {
                return true;
            })) !== null) {
                let [original0] = __arg_matches__;

                return new ElixirScript.Core.Tuple(original0, (...__function_args__) => {
                    function recur(...__function_args__) {
                        let __arg_matches__ = null;

                        if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('map_set'), ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                            values: [Symbol.for('cont'), ElixirScript.Core.Patterns.variable('x')]
                        })], __function_args__, (map_set0, x0) => {
                            return true;
                        })) !== null) {
                            let [map_set0, x0] = __arg_matches__;

                            return Elixir.MapSet.__load(Elixir).put(map_set0, x0);
                        } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('map_set'), Symbol.for('done')], __function_args__, (map_set0) => {
                            return true;
                        })) !== null) {
                            let [map_set0] = __arg_matches__;

                            return map_set0;
                        } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('_'), Symbol.for('halt')], __function_args__, () => {
                            return true;
                        })) !== null) {
                            let [] = __arg_matches__;

                            return Symbol.for('ok');
                        }

                        throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
                    }

                    return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
                });
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    const __exports = {
        __impl__,
        into,
        __MODULE__: Symbol.for('Elixir.Collectable.MapSet'),
        __info__
    };

    Elixir.Collectable.MapSet.__exports = __exports

    return __exports;
}
ElixirScript.Core.Functions.build_namespace(Elixir, 'Elixir.Collectable.IO.Stream').__load = function(Elixir) {
    if (Elixir.Collectable.IO.Stream.__exports)
        return Elixir.Collectable.IO.Stream.__exports;

    function __info__(kind) {
        const __info__map__ = new Map([[Symbol.for('functions'), [new ElixirScript.Core.Tuple(Symbol.for('__impl__'), 1), new ElixirScript.Core.Tuple(Symbol.for('into'), 1)]], [Symbol.for('macros'), []], [Symbol.for('attributes'), [new ElixirScript.Core.Tuple(Symbol.for('vsn'), [6471490514993830449207609781703435649]), new ElixirScript.Core.Tuple(Symbol.for('behaviour'), [Elixir.Collectable.__load(Elixir)]), new ElixirScript.Core.Tuple(Symbol.for('protocol_impl'), [new ElixirScript.Core.Tuple(Symbol.for('protocol'), Elixir.Collectable.__load(Elixir)), new ElixirScript.Core.Tuple(Symbol.for('for'), Elixir.IO.Stream.__load(Elixir))])]], [Symbol.for('compile'), [new ElixirScript.Core.Tuple(Symbol.for('options'), []), new ElixirScript.Core.Tuple(Symbol.for('version'), [55, 46, 49, 46, 50]), new ElixirScript.Core.Tuple(Symbol.for('source'), '/private/tmp/elixir-20170929-51947-wgj4qu/elixir-1.5.2/lib/elixir/lib/io/stream.ex')]], [Symbol.for('md5'), new ElixirScript.Core.BitString(ElixirScript.Core.BitString.integer(4), ElixirScript.Core.BitString.integer(222), ElixirScript.Core.BitString.integer(93), ElixirScript.Core.BitString.integer(29), ElixirScript.Core.BitString.integer(218), ElixirScript.Core.BitString.integer(67), ElixirScript.Core.BitString.integer(180), ElixirScript.Core.BitString.integer(135), ElixirScript.Core.BitString.integer(247), ElixirScript.Core.BitString.integer(1), ElixirScript.Core.BitString.integer(104), ElixirScript.Core.BitString.integer(203), ElixirScript.Core.BitString.integer(76), ElixirScript.Core.BitString.integer(120), ElixirScript.Core.BitString.integer(101), ElixirScript.Core.BitString.integer(129))], [Symbol.for('module'), Symbol.for('Elixir.Collectable.IO.Stream')]]);

        const value = __info__map__.get(kind);

        if (value !== null) {
            return value;
        }

        throw new ElixirScript.Core.Patterns.MatchError(kind);
    }

    function __impl__(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('for')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.IO.Stream.__load(Elixir);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('target')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.Collectable.IO.Stream.__load(Elixir);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('protocol')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.Collectable.__load(Elixir);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function into(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.capture(new Map([[Symbol.for('device'), ElixirScript.Core.Patterns.variable('device')], [Symbol.for('raw'), ElixirScript.Core.Patterns.variable('raw')]]))], __function_args__, (device0, raw0, stream0) => {
                return true;
            })) !== null) {
                let [device0, raw0, stream0] = __arg_matches__;

                return new ElixirScript.Core.Tuple(Symbol.for('ok'), into(stream0, device0, raw0));
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('stream'), ElixirScript.Core.Patterns.variable('device'), ElixirScript.Core.Patterns.variable('raw')], __function_args__, (stream0, device0, raw0) => {
                return true;
            })) !== null) {
                let [stream0, device0, raw0] = __arg_matches__;

                return (...__function_args__) => {
                    function recur(...__function_args__) {
                        let __arg_matches__ = null;

                        if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('ok'), ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                            values: [Symbol.for('cont'), ElixirScript.Core.Patterns.variable('x')]
                        })], __function_args__, (x0) => {
                            return true;
                        })) !== null) {
                            let [x0] = __arg_matches__;

                            return ElixirScript.Core.Patterns.defmatch(ElixirScript.Core.Patterns.clause([true], () => {
                                return Elixir.IO.__load(Elixir).binwrite(device0, x0);
                            }, () => {
                                return true;
                            }), ElixirScript.Core.Patterns.clause([false], () => {
                                return Elixir.IO.__load(Elixir).write(device0, x0);
                            }, () => {
                                return true;
                            })).call(this, raw0);
                        } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('ok'), ElixirScript.Core.Patterns.variable('_')], __function_args__, () => {
                            return true;
                        })) !== null) {
                            let [] = __arg_matches__;

                            return stream0;
                        }

                        throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
                    }

                    return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
                };
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    const __exports = {
        __impl__,
        into,
        __MODULE__: Symbol.for('Elixir.Collectable.IO.Stream'),
        __info__
    };

    Elixir.Collectable.IO.Stream.__exports = __exports

    return __exports;
}
ElixirScript.Core.Functions.build_namespace(Elixir, 'Elixir.Collectable.List').__load = function(Elixir) {
    if (Elixir.Collectable.List.__exports)
        return Elixir.Collectable.List.__exports;

    function __info__(kind) {
        const __info__map__ = new Map([[Symbol.for('functions'), [new ElixirScript.Core.Tuple(Symbol.for('__impl__'), 1), new ElixirScript.Core.Tuple(Symbol.for('into'), 1)]], [Symbol.for('macros'), []], [Symbol.for('attributes'), [new ElixirScript.Core.Tuple(Symbol.for('vsn'), [55779311016678289098223658602199838871]), new ElixirScript.Core.Tuple(Symbol.for('behaviour'), [Elixir.Collectable.__load(Elixir)]), new ElixirScript.Core.Tuple(Symbol.for('protocol_impl'), [new ElixirScript.Core.Tuple(Symbol.for('protocol'), Elixir.Collectable.__load(Elixir)), new ElixirScript.Core.Tuple(Symbol.for('for'), Elixir.List.__load(Elixir))])]], [Symbol.for('compile'), [new ElixirScript.Core.Tuple(Symbol.for('options'), []), new ElixirScript.Core.Tuple(Symbol.for('version'), [55, 46, 49, 46, 50]), new ElixirScript.Core.Tuple(Symbol.for('source'), '/private/tmp/elixir-20170929-51947-wgj4qu/elixir-1.5.2/lib/elixir/lib/collectable.ex')]], [Symbol.for('md5'), new ElixirScript.Core.BitString(ElixirScript.Core.BitString.integer(41), ElixirScript.Core.BitString.integer(246), ElixirScript.Core.BitString.integer(180), ElixirScript.Core.BitString.integer(92), ElixirScript.Core.BitString.integer(127), ElixirScript.Core.BitString.integer(225), ElixirScript.Core.BitString.integer(202), ElixirScript.Core.BitString.integer(196), ElixirScript.Core.BitString.integer(128), ElixirScript.Core.BitString.integer(52), ElixirScript.Core.BitString.integer(178), ElixirScript.Core.BitString.integer(15), ElixirScript.Core.BitString.integer(91), ElixirScript.Core.BitString.integer(252), ElixirScript.Core.BitString.integer(240), ElixirScript.Core.BitString.integer(151))], [Symbol.for('module'), Symbol.for('Elixir.Collectable.List')]]);

        const value = __info__map__.get(kind);

        if (value !== null) {
            return value;
        }

        throw new ElixirScript.Core.Patterns.MatchError(kind);
    }

    function __impl__(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('for')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.List.__load(Elixir);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('target')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.Collectable.List.__load(Elixir);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('protocol')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.Collectable.__load(Elixir);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function into(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('original')], __function_args__, (original0) => {
                return true;
            })) !== null) {
                let [original0] = __arg_matches__;

                return new ElixirScript.Core.Tuple([], (...__function_args__) => {
                    function recur(...__function_args__) {
                        let __arg_matches__ = null;

                        if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('list'), ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                            values: [Symbol.for('cont'), ElixirScript.Core.Patterns.variable('x')]
                        })], __function_args__, (list0, x0) => {
                            return true;
                        })) !== null) {
                            let [list0, x0] = __arg_matches__;

                            return ElixirScript.Core.Functions.concat(x0, list0);
                        } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('list'), Symbol.for('done')], __function_args__, (list0) => {
                            return true;
                        })) !== null) {
                            let [list0] = __arg_matches__;

                            return ElixirScript.Core.erlang.list_concatenation(original0, ElixirScript.Core.lists.reverse(list0));
                        } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('_'), Symbol.for('halt')], __function_args__, () => {
                            return true;
                        })) !== null) {
                            let [] = __arg_matches__;

                            return Symbol.for('ok');
                        }

                        throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
                    }

                    return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
                });
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    const __exports = {
        __impl__,
        into,
        __MODULE__: Symbol.for('Elixir.Collectable.List'),
        __info__
    };

    Elixir.Collectable.List.__exports = __exports

    return __exports;
}
ElixirScript.Core.Functions.build_namespace(Elixir, 'Elixir.Date').__load = function(Elixir) {
    if (Elixir.Date.__exports)
        return Elixir.Date.__exports;

    function __info__(kind) {
        const __info__map__ = new Map([[Symbol.for('functions'), [new ElixirScript.Core.Tuple(Symbol.for('__struct__'), 0), new ElixirScript.Core.Tuple(Symbol.for('__struct__'), 1), new ElixirScript.Core.Tuple(Symbol.for('add'), 2), new ElixirScript.Core.Tuple(Symbol.for('compare'), 2), new ElixirScript.Core.Tuple(Symbol.for('convert'), 2), new ElixirScript.Core.Tuple(Symbol.for('convert!'), 2), new ElixirScript.Core.Tuple(Symbol.for('day_of_week'), 1), new ElixirScript.Core.Tuple(Symbol.for('days_in_month'), 1), new ElixirScript.Core.Tuple(Symbol.for('diff'), 2), new ElixirScript.Core.Tuple(Symbol.for('from_erl'), 1), new ElixirScript.Core.Tuple(Symbol.for('from_erl'), 2), new ElixirScript.Core.Tuple(Symbol.for('from_erl!'), 1), new ElixirScript.Core.Tuple(Symbol.for('from_iso8601'), 1), new ElixirScript.Core.Tuple(Symbol.for('from_iso8601'), 2), new ElixirScript.Core.Tuple(Symbol.for('from_iso8601!'), 1), new ElixirScript.Core.Tuple(Symbol.for('from_iso8601!'), 2), new ElixirScript.Core.Tuple(Symbol.for('leap_year?'), 1), new ElixirScript.Core.Tuple(Symbol.for('new'), 3), new ElixirScript.Core.Tuple(Symbol.for('new'), 4), new ElixirScript.Core.Tuple(Symbol.for('range'), 2), new ElixirScript.Core.Tuple(Symbol.for('to_erl'), 1), new ElixirScript.Core.Tuple(Symbol.for('to_iso8601'), 1), new ElixirScript.Core.Tuple(Symbol.for('to_iso8601'), 2), new ElixirScript.Core.Tuple(Symbol.for('to_string'), 1), new ElixirScript.Core.Tuple(Symbol.for('utc_today'), 0), new ElixirScript.Core.Tuple(Symbol.for('utc_today'), 1)]], [Symbol.for('macros'), []], [Symbol.for('attributes'), [new ElixirScript.Core.Tuple(Symbol.for('vsn'), [297157210700454293750872531435667034224])]], [Symbol.for('compile'), [new ElixirScript.Core.Tuple(Symbol.for('options'), []), new ElixirScript.Core.Tuple(Symbol.for('version'), [55, 46, 49, 46, 50]), new ElixirScript.Core.Tuple(Symbol.for('source'), '/private/tmp/elixir-20170929-51947-wgj4qu/elixir-1.5.2/lib/elixir/lib/calendar/date.ex')]], [Symbol.for('md5'), new ElixirScript.Core.BitString(ElixirScript.Core.BitString.integer(223), ElixirScript.Core.BitString.integer(142), ElixirScript.Core.BitString.integer(101), ElixirScript.Core.BitString.integer(163), ElixirScript.Core.BitString.integer(158), ElixirScript.Core.BitString.integer(38), ElixirScript.Core.BitString.integer(228), ElixirScript.Core.BitString.integer(135), ElixirScript.Core.BitString.integer(48), ElixirScript.Core.BitString.integer(96), ElixirScript.Core.BitString.integer(157), ElixirScript.Core.BitString.integer(84), ElixirScript.Core.BitString.integer(96), ElixirScript.Core.BitString.integer(99), ElixirScript.Core.BitString.integer(144), ElixirScript.Core.BitString.integer(112))], [Symbol.for('module'), Symbol.for('Elixir.Date')]]);

        const value = __info__map__.get(kind);

        if (value !== null) {
            return value;
        }

        throw new ElixirScript.Core.Patterns.MatchError(kind);
    }

    function __struct__(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return new Map([[Symbol.for('__struct__'), Elixir.Date.__load(Elixir)], [Symbol.for('calendar'), Elixir.Calendar.ISO.__load(Elixir)], [Symbol.for('day'), null], [Symbol.for('month'), null], [Symbol.for('year'), null]]);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('kv576460752303417596')], __function_args__, (kv5764607523034175960) => {
                return true;
            })) !== null) {
                let [kv5764607523034175960] = __arg_matches__;

                const [map5764607523034175960, keys5764607523034175960] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                    values: [ElixirScript.Core.Patterns.variable('map576460752303417596'), ElixirScript.Core.Patterns.variable('keys576460752303417596')]
                }), Elixir.Enum.__load(Elixir).reduce(kv5764607523034175960, new ElixirScript.Core.Tuple(__struct__(), [Symbol.for('year'), Symbol.for('month'), Symbol.for('day')]), (...__function_args__) => {
                    function recur(...__function_args__) {
                        let __arg_matches__ = null;

                        if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                            values: [ElixirScript.Core.Patterns.variable('key576460752303417596'), ElixirScript.Core.Patterns.variable('val576460752303417596')]
                        }), ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                            values: [ElixirScript.Core.Patterns.variable('map576460752303417596'), ElixirScript.Core.Patterns.variable('keys576460752303417596')]
                        })], __function_args__, (key5764607523034175960, val5764607523034175960, map5764607523034175960, keys5764607523034175960) => {
                            return true;
                        })) !== null) {
                            let [key5764607523034175960, val5764607523034175960, map5764607523034175960, keys5764607523034175960] = __arg_matches__;

                            return new ElixirScript.Core.Tuple(ElixirScript.Core.maps.update(key5764607523034175960, val5764607523034175960, map5764607523034175960), Elixir.List.__load(Elixir).__delete__(keys5764607523034175960, key5764607523034175960));
                        }

                        throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
                    }

                    return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
                }));

                const _ref3918862 = new ElixirScript.Core.Tuple(map5764607523034175960, keys5764607523034175960);

                return ElixirScript.Core.Patterns.defmatch(ElixirScript.Core.Patterns.clause([[]], () => {
                    return map5764607523034175960;
                }, () => {
                    return true;
                }), ElixirScript.Core.Patterns.clause([ElixirScript.Core.Patterns.variable('_')], () => {
                    return ElixirScript.Core.erlang.error(Elixir.ArgumentError.__load(Elixir).exception('the following keys must also be given when building ' + ('struct ' + (Elixir.String.Chars.__load(Elixir).to_string(Elixir.Kernel.__load(Elixir).inspect(Elixir.Date.__load(Elixir))) + (': ' + Elixir.String.Chars.__load(Elixir).to_string(Elixir.Kernel.__load(Elixir).inspect(keys5764607523034175960)))))));
                }, () => {
                    return true;
                })).call(this, keys5764607523034175960);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    const __exports = {
        __struct__,
        __MODULE__: Symbol.for('Elixir.Date'),
        __info__
    };

    Elixir.Date.__exports = __exports

    return __exports;
}
ElixirScript.Core.Functions.build_namespace(Elixir, 'Elixir.Collectable.HashSet').__load = function(Elixir) {
    if (Elixir.Collectable.HashSet.__exports)
        return Elixir.Collectable.HashSet.__exports;

    function __info__(kind) {
        const __info__map__ = new Map([[Symbol.for('functions'), [new ElixirScript.Core.Tuple(Symbol.for('__impl__'), 1), new ElixirScript.Core.Tuple(Symbol.for('into'), 1)]], [Symbol.for('macros'), []], [Symbol.for('attributes'), [new ElixirScript.Core.Tuple(Symbol.for('vsn'), [241167772762676161834400947358447922847]), new ElixirScript.Core.Tuple(Symbol.for('behaviour'), [Elixir.Collectable.__load(Elixir)]), new ElixirScript.Core.Tuple(Symbol.for('protocol_impl'), [new ElixirScript.Core.Tuple(Symbol.for('protocol'), Elixir.Collectable.__load(Elixir)), new ElixirScript.Core.Tuple(Symbol.for('for'), Elixir.HashSet.__load(Elixir))])]], [Symbol.for('compile'), [new ElixirScript.Core.Tuple(Symbol.for('options'), []), new ElixirScript.Core.Tuple(Symbol.for('version'), [55, 46, 49, 46, 50]), new ElixirScript.Core.Tuple(Symbol.for('source'), '/private/tmp/elixir-20170929-51947-wgj4qu/elixir-1.5.2/lib/elixir/lib/hash_set.ex')]], [Symbol.for('md5'), new ElixirScript.Core.BitString(ElixirScript.Core.BitString.integer(181), ElixirScript.Core.BitString.integer(111), ElixirScript.Core.BitString.integer(57), ElixirScript.Core.BitString.integer(56), ElixirScript.Core.BitString.integer(129), ElixirScript.Core.BitString.integer(215), ElixirScript.Core.BitString.integer(217), ElixirScript.Core.BitString.integer(214), ElixirScript.Core.BitString.integer(121), ElixirScript.Core.BitString.integer(29), ElixirScript.Core.BitString.integer(98), ElixirScript.Core.BitString.integer(254), ElixirScript.Core.BitString.integer(148), ElixirScript.Core.BitString.integer(83), ElixirScript.Core.BitString.integer(110), ElixirScript.Core.BitString.integer(159))], [Symbol.for('module'), Symbol.for('Elixir.Collectable.HashSet')]]);

        const value = __info__map__.get(kind);

        if (value !== null) {
            return value;
        }

        throw new ElixirScript.Core.Patterns.MatchError(kind);
    }

    function __impl__(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('for')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.HashSet.__load(Elixir);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('target')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.Collectable.HashSet.__load(Elixir);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('protocol')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.Collectable.__load(Elixir);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function into(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('original')], __function_args__, (original0) => {
                return true;
            })) !== null) {
                let [original0] = __arg_matches__;

                const [module0] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.variable('module'), Elixir.HashSet.__load(Elixir));

                return new ElixirScript.Core.Tuple(original0, (...__function_args__) => {
                    function recur(...__function_args__) {
                        let __arg_matches__ = null;

                        if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('set'), ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                            values: [Symbol.for('cont'), ElixirScript.Core.Patterns.variable('term')]
                        })], __function_args__, (set0, term0) => {
                            return true;
                        })) !== null) {
                            let [set0, term0] = __arg_matches__;

                            return module0.put(set0, term0);
                        } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('set'), Symbol.for('done')], __function_args__, (set0) => {
                            return true;
                        })) !== null) {
                            let [set0] = __arg_matches__;

                            return set0;
                        } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('_'), Symbol.for('halt')], __function_args__, () => {
                            return true;
                        })) !== null) {
                            let [] = __arg_matches__;

                            return Symbol.for('ok');
                        }

                        throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
                    }

                    return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
                });
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    const __exports = {
        __impl__,
        into,
        __MODULE__: Symbol.for('Elixir.Collectable.HashSet'),
        __info__
    };

    Elixir.Collectable.HashSet.__exports = __exports

    return __exports;
}
ElixirScript.Core.Functions.build_namespace(Elixir, 'Elixir.Collectable.HashDict').__load = function(Elixir) {
    if (Elixir.Collectable.HashDict.__exports)
        return Elixir.Collectable.HashDict.__exports;

    function __info__(kind) {
        const __info__map__ = new Map([[Symbol.for('functions'), [new ElixirScript.Core.Tuple(Symbol.for('__impl__'), 1), new ElixirScript.Core.Tuple(Symbol.for('into'), 1)]], [Symbol.for('macros'), []], [Symbol.for('attributes'), [new ElixirScript.Core.Tuple(Symbol.for('vsn'), [28980757101466574604644416400370752562]), new ElixirScript.Core.Tuple(Symbol.for('behaviour'), [Elixir.Collectable.__load(Elixir)]), new ElixirScript.Core.Tuple(Symbol.for('protocol_impl'), [new ElixirScript.Core.Tuple(Symbol.for('protocol'), Elixir.Collectable.__load(Elixir)), new ElixirScript.Core.Tuple(Symbol.for('for'), Elixir.HashDict.__load(Elixir))])]], [Symbol.for('compile'), [new ElixirScript.Core.Tuple(Symbol.for('options'), []), new ElixirScript.Core.Tuple(Symbol.for('version'), [55, 46, 49, 46, 50]), new ElixirScript.Core.Tuple(Symbol.for('source'), '/private/tmp/elixir-20170929-51947-wgj4qu/elixir-1.5.2/lib/elixir/lib/hash_dict.ex')]], [Symbol.for('md5'), new ElixirScript.Core.BitString(ElixirScript.Core.BitString.integer(21), ElixirScript.Core.BitString.integer(205), ElixirScript.Core.BitString.integer(125), ElixirScript.Core.BitString.integer(164), ElixirScript.Core.BitString.integer(127), ElixirScript.Core.BitString.integer(49), ElixirScript.Core.BitString.integer(160), ElixirScript.Core.BitString.integer(196), ElixirScript.Core.BitString.integer(69), ElixirScript.Core.BitString.integer(65), ElixirScript.Core.BitString.integer(45), ElixirScript.Core.BitString.integer(35), ElixirScript.Core.BitString.integer(60), ElixirScript.Core.BitString.integer(56), ElixirScript.Core.BitString.integer(220), ElixirScript.Core.BitString.integer(50))], [Symbol.for('module'), Symbol.for('Elixir.Collectable.HashDict')]]);

        const value = __info__map__.get(kind);

        if (value !== null) {
            return value;
        }

        throw new ElixirScript.Core.Patterns.MatchError(kind);
    }

    function __impl__(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('for')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.HashDict.__load(Elixir);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('target')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.Collectable.HashDict.__load(Elixir);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('protocol')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.Collectable.__load(Elixir);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function into(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('original')], __function_args__, (original0) => {
                return true;
            })) !== null) {
                let [original0] = __arg_matches__;

                const [module0] = ElixirScript.Core.Patterns.match(ElixirScript.Core.Patterns.variable('module'), Elixir.HashDict.__load(Elixir));

                return new ElixirScript.Core.Tuple(original0, (...__function_args__) => {
                    function recur(...__function_args__) {
                        let __arg_matches__ = null;

                        if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('dict'), ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                            values: [Symbol.for('cont'), ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                                values: [ElixirScript.Core.Patterns.variable('key'), ElixirScript.Core.Patterns.variable('value')]
                            })]
                        })], __function_args__, (dict0, key0, value0) => {
                            return true;
                        })) !== null) {
                            let [dict0, key0, value0] = __arg_matches__;

                            return module0.put(dict0, key0, value0);
                        } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('dict'), Symbol.for('done')], __function_args__, (dict0) => {
                            return true;
                        })) !== null) {
                            let [dict0] = __arg_matches__;

                            return dict0;
                        } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('_'), Symbol.for('halt')], __function_args__, () => {
                            return true;
                        })) !== null) {
                            let [] = __arg_matches__;

                            return Symbol.for('ok');
                        }

                        throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
                    }

                    return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
                });
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    const __exports = {
        __impl__,
        into,
        __MODULE__: Symbol.for('Elixir.Collectable.HashDict'),
        __info__
    };

    Elixir.Collectable.HashDict.__exports = __exports

    return __exports;
}
ElixirScript.Core.Functions.build_namespace(Elixir, 'Elixir.Collectable.BitString').__load = function(Elixir) {
    if (Elixir.Collectable.BitString.__exports)
        return Elixir.Collectable.BitString.__exports;

    function __info__(kind) {
        const __info__map__ = new Map([[Symbol.for('functions'), [new ElixirScript.Core.Tuple(Symbol.for('__impl__'), 1), new ElixirScript.Core.Tuple(Symbol.for('into'), 1)]], [Symbol.for('macros'), []], [Symbol.for('attributes'), [new ElixirScript.Core.Tuple(Symbol.for('vsn'), [250114994464600621518264955728023998254]), new ElixirScript.Core.Tuple(Symbol.for('behaviour'), [Elixir.Collectable.__load(Elixir)]), new ElixirScript.Core.Tuple(Symbol.for('protocol_impl'), [new ElixirScript.Core.Tuple(Symbol.for('protocol'), Elixir.Collectable.__load(Elixir)), new ElixirScript.Core.Tuple(Symbol.for('for'), Elixir.BitString.__load(Elixir))])]], [Symbol.for('compile'), [new ElixirScript.Core.Tuple(Symbol.for('options'), []), new ElixirScript.Core.Tuple(Symbol.for('version'), [55, 46, 49, 46, 50]), new ElixirScript.Core.Tuple(Symbol.for('source'), '/private/tmp/elixir-20170929-51947-wgj4qu/elixir-1.5.2/lib/elixir/lib/collectable.ex')]], [Symbol.for('md5'), new ElixirScript.Core.BitString(ElixirScript.Core.BitString.integer(188), ElixirScript.Core.BitString.integer(42), ElixirScript.Core.BitString.integer(101), ElixirScript.Core.BitString.integer(79), ElixirScript.Core.BitString.integer(21), ElixirScript.Core.BitString.integer(69), ElixirScript.Core.BitString.integer(119), ElixirScript.Core.BitString.integer(225), ElixirScript.Core.BitString.integer(89), ElixirScript.Core.BitString.integer(41), ElixirScript.Core.BitString.integer(235), ElixirScript.Core.BitString.integer(76), ElixirScript.Core.BitString.integer(200), ElixirScript.Core.BitString.integer(139), ElixirScript.Core.BitString.integer(79), ElixirScript.Core.BitString.integer(46))], [Symbol.for('module'), Symbol.for('Elixir.Collectable.BitString')]]);

        const value = __info__map__.get(kind);

        if (value !== null) {
            return value;
        }

        throw new ElixirScript.Core.Patterns.MatchError(kind);
    }

    function __impl__(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('for')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.BitString.__load(Elixir);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('target')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.Collectable.BitString.__load(Elixir);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('protocol')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.Collectable.__load(Elixir);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function into(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('original')], __function_args__, (original0) => {
                return true;
            })) !== null) {
                let [original0] = __arg_matches__;

                return new ElixirScript.Core.Tuple(original0, (...__function_args__) => {
                    function recur(...__function_args__) {
                        let __arg_matches__ = null;

                        if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('acc'), ElixirScript.Core.Patterns.type(ElixirScript.Core.Tuple, {
                            values: [Symbol.for('cont'), ElixirScript.Core.Patterns.variable('x')]
                        })], __function_args__, (acc0, x0) => {
                            return ElixirScript.Core.erlang.is_bitstring(x0);
                        })) !== null) {
                            let [acc0, x0] = __arg_matches__;

                            return ElixirScript.Core.Functions.concat(acc0, x0);
                        } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('acc'), Symbol.for('done')], __function_args__, (acc0) => {
                            return true;
                        })) !== null) {
                            let [acc0] = __arg_matches__;

                            return ElixirScript.Core.erlang.iolist_to_binary(acc0);
                        } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('_'), Symbol.for('halt')], __function_args__, () => {
                            return true;
                        })) !== null) {
                            let [] = __arg_matches__;

                            return Symbol.for('ok');
                        }

                        throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
                    }

                    return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
                });
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    const __exports = {
        __impl__,
        into,
        __MODULE__: Symbol.for('Elixir.Collectable.BitString'),
        __info__
    };

    Elixir.Collectable.BitString.__exports = __exports

    return __exports;
}
ElixirScript.Core.Functions.build_namespace(Elixir, 'Elixir.String.Chars.BitString').__load = function(Elixir) {
    if (Elixir.String.Chars.BitString.__exports)
        return Elixir.String.Chars.BitString.__exports;

    function __info__(kind) {
        const __info__map__ = new Map([[Symbol.for('functions'), [new ElixirScript.Core.Tuple(Symbol.for('__impl__'), 1), new ElixirScript.Core.Tuple(Symbol.for('to_string'), 1)]], [Symbol.for('macros'), []], [Symbol.for('attributes'), [new ElixirScript.Core.Tuple(Symbol.for('vsn'), [188537102984946501004334746554259962702]), new ElixirScript.Core.Tuple(Symbol.for('behaviour'), [Elixir.String.Chars.__load(Elixir)]), new ElixirScript.Core.Tuple(Symbol.for('protocol_impl'), [new ElixirScript.Core.Tuple(Symbol.for('protocol'), Elixir.String.Chars.__load(Elixir)), new ElixirScript.Core.Tuple(Symbol.for('for'), Elixir.BitString.__load(Elixir))])]], [Symbol.for('compile'), [new ElixirScript.Core.Tuple(Symbol.for('options'), []), new ElixirScript.Core.Tuple(Symbol.for('version'), [55, 46, 49, 46, 50]), new ElixirScript.Core.Tuple(Symbol.for('source'), '/private/tmp/elixir-20170929-51947-wgj4qu/elixir-1.5.2/lib/elixir/lib/string/chars.ex')]], [Symbol.for('md5'), new ElixirScript.Core.BitString(ElixirScript.Core.BitString.integer(141), ElixirScript.Core.BitString.integer(214), ElixirScript.Core.BitString.integer(236), ElixirScript.Core.BitString.integer(219), ElixirScript.Core.BitString.integer(167), ElixirScript.Core.BitString.integer(189), ElixirScript.Core.BitString.integer(79), ElixirScript.Core.BitString.integer(38), ElixirScript.Core.BitString.integer(87), ElixirScript.Core.BitString.integer(46), ElixirScript.Core.BitString.integer(244), ElixirScript.Core.BitString.integer(139), ElixirScript.Core.BitString.integer(47), ElixirScript.Core.BitString.integer(35), ElixirScript.Core.BitString.integer(123), ElixirScript.Core.BitString.integer(78))], [Symbol.for('module'), Symbol.for('Elixir.String.Chars.BitString')]]);

        const value = __info__map__.get(kind);

        if (value !== null) {
            return value;
        }

        throw new ElixirScript.Core.Patterns.MatchError(kind);
    }

    function __impl__(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('for')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.BitString.__load(Elixir);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('target')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.String.Chars.BitString.__load(Elixir);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('protocol')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.String.Chars.__load(Elixir);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function to_string(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('term')], __function_args__, (term0) => {
                return ElixirScript.Core.erlang.is_binary(term0);
            })) !== null) {
                let [term0] = __arg_matches__;

                return term0;
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('term')], __function_args__, (term0) => {
                return true;
            })) !== null) {
                let [term0] = __arg_matches__;

                return ElixirScript.Core.erlang.error(Elixir.Protocol.UndefinedError.__load(Elixir).exception([new ElixirScript.Core.Tuple(Symbol.for('protocol'), Elixir.String.Chars.__load(Elixir)), new ElixirScript.Core.Tuple(Symbol.for('value'), term0), new ElixirScript.Core.Tuple(Symbol.for('description'), 'cannot convert a bitstring to a string')]));
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    const __exports = {
        __impl__,
        to_string,
        __MODULE__: Symbol.for('Elixir.String.Chars.BitString'),
        __info__
    };

    Elixir.String.Chars.BitString.__exports = __exports

    return __exports;
}
ElixirScript.Core.Functions.build_namespace(Elixir, 'Elixir.String.Chars.Atom').__load = function(Elixir) {
    if (Elixir.String.Chars.Atom.__exports)
        return Elixir.String.Chars.Atom.__exports;

    function __info__(kind) {
        const __info__map__ = new Map([[Symbol.for('functions'), [new ElixirScript.Core.Tuple(Symbol.for('__impl__'), 1), new ElixirScript.Core.Tuple(Symbol.for('to_string'), 1)]], [Symbol.for('macros'), []], [Symbol.for('attributes'), [new ElixirScript.Core.Tuple(Symbol.for('vsn'), [137149904966578425907086416172928763983]), new ElixirScript.Core.Tuple(Symbol.for('behaviour'), [Elixir.String.Chars.__load(Elixir)]), new ElixirScript.Core.Tuple(Symbol.for('protocol_impl'), [new ElixirScript.Core.Tuple(Symbol.for('protocol'), Elixir.String.Chars.__load(Elixir)), new ElixirScript.Core.Tuple(Symbol.for('for'), Elixir.Atom.__load(Elixir))])]], [Symbol.for('compile'), [new ElixirScript.Core.Tuple(Symbol.for('options'), []), new ElixirScript.Core.Tuple(Symbol.for('version'), [55, 46, 49, 46, 50]), new ElixirScript.Core.Tuple(Symbol.for('source'), '/private/tmp/elixir-20170929-51947-wgj4qu/elixir-1.5.2/lib/elixir/lib/string/chars.ex')]], [Symbol.for('md5'), new ElixirScript.Core.BitString(ElixirScript.Core.BitString.integer(103), ElixirScript.Core.BitString.integer(46), ElixirScript.Core.BitString.integer(28), ElixirScript.Core.BitString.integer(98), ElixirScript.Core.BitString.integer(237), ElixirScript.Core.BitString.integer(51), ElixirScript.Core.BitString.integer(223), ElixirScript.Core.BitString.integer(252), ElixirScript.Core.BitString.integer(22), ElixirScript.Core.BitString.integer(196), ElixirScript.Core.BitString.integer(164), ElixirScript.Core.BitString.integer(250), ElixirScript.Core.BitString.integer(195), ElixirScript.Core.BitString.integer(48), ElixirScript.Core.BitString.integer(136), ElixirScript.Core.BitString.integer(79))], [Symbol.for('module'), Symbol.for('Elixir.String.Chars.Atom')]]);

        const value = __info__map__.get(kind);

        if (value !== null) {
            return value;
        }

        throw new ElixirScript.Core.Patterns.MatchError(kind);
    }

    function __impl__(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('for')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.Atom.__load(Elixir);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('target')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.String.Chars.Atom.__load(Elixir);
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([Symbol.for('protocol')], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return Elixir.String.Chars.__load(Elixir);
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    function to_string(...__function_args__) {
        function recur(...__function_args__) {
            let __arg_matches__ = null;

            let __intermediate__ = null;

            if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([null], __function_args__, () => {
                return true;
            })) !== null) {
                let [] = __arg_matches__;

                return '';
            } else if ((__arg_matches__ = ElixirScript.Core.Patterns.match_or_default([ElixirScript.Core.Patterns.variable('atom')], __function_args__, (atom0) => {
                return true;
            })) !== null) {
                let [atom0] = __arg_matches__;

                return ElixirScript.Core.erlang.atom_to_binary(atom0, Symbol.for('utf8'));
            }

            throw new ElixirScript.Core.Patterns.MatchError(__function_args__);
        }

        return ElixirScript.Core.Functions.trampoline(new ElixirScript.Core.Functions.Recurse(recur.bind(null, ...__function_args__)));
    }

    const __exports = {
        __impl__,
        to_string,
        __MODULE__: Symbol.for('Elixir.String.Chars.Atom'),
        __info__
    };

    Elixir.String.Chars.Atom.__exports = __exports

    return __exports;
}
export default Elixir;